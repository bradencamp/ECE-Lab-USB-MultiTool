
Logic Analyzer V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800ad40  0800ad40  0000bd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef4  0800aef4  0000c1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aef4  0800aef4  0000bef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aefc  0800aefc  0000c1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aefc  0800aefc  0000befc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af00  0800af00  0000bf00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800af04  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d0  2**0
                  CONTENTS
 10 .bss          00003594  200001d0  200001d0  0000c1d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003764  20003764  0000c1d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000131d1  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032d7  00000000  00000000  0001f3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  000226a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c60  00000000  00000000  00023700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002300c  00000000  00000000  00024360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ea9  00000000  00000000  0004736c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca447  00000000  00000000  0005d215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012765c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000487c  00000000  00000000  001276a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0012bf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad28 	.word	0x0800ad28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	0800ad28 	.word	0x0800ad28

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay_us>:
	SixteenBit = 0xFFFF
} NumBits;

uint8_t cout = 0;

void delay_us(uint32_t us) {
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
    // Enable the DWT cycle counter
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000298:	4b12      	ldr	r3, [pc, #72]	@ (80002e4 <delay_us+0x54>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	4a11      	ldr	r2, [pc, #68]	@ (80002e4 <delay_us+0x54>)
 800029e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002a2:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0; // Reset cycle counter
 80002a4:	4b10      	ldr	r3, [pc, #64]	@ (80002e8 <delay_us+0x58>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable cycle counter
 80002aa:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <delay_us+0x58>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a0e      	ldr	r2, [pc, #56]	@ (80002e8 <delay_us+0x58>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6013      	str	r3, [r2, #0]

    // Calculate the number of cycles needed for the delay
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 80002b6:	4b0d      	ldr	r3, [pc, #52]	@ (80002ec <delay_us+0x5c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a0d      	ldr	r2, [pc, #52]	@ (80002f0 <delay_us+0x60>)
 80002bc:	fba2 2303 	umull	r2, r3, r2, r3
 80002c0:	0c9a      	lsrs	r2, r3, #18
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	fb02 f303 	mul.w	r3, r2, r3
 80002c8:	60fb      	str	r3, [r7, #12]

    // Wait until the number of cycles has elapsed
    while (DWT->CYCCNT < cycles);
 80002ca:	bf00      	nop
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <delay_us+0x58>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d8fa      	bhi.n	80002cc <delay_us+0x3c>
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	e000edf0 	.word	0xe000edf0
 80002e8:	e0001000 	.word	0xe0001000
 80002ec:	20000004 	.word	0x20000004
 80002f0:	431bde83 	.word	0x431bde83

080002f4 <main>:

int main(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80002f8:	f000 fd34 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fc:	f000 f884 	bl	8000408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000300:	f000 f982 	bl	8000608 <MX_GPIO_Init>
  MX_TIM2_Init(0x00008CA0);
 8000304:	f648 40a0 	movw	r0, #36000	@ 0x8ca0
 8000308:	f000 f8e2 	bl	80004d0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800030c:	f009 fb3e 	bl	800998c <MX_USB_DEVICE_Init>
  MX_TIM16_Init(0xFFFF, 1);
 8000310:	2101      	movs	r1, #1
 8000312:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000316:	f000 f941 	bl	800059c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  state = preTrigger;
 800031a:	4b31      	ldr	r3, [pc, #196]	@ (80003e0 <main+0xec>)
 800031c:	2202      	movs	r2, #2
 800031e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
 // HAL_TIM_Base_Start_IT(&htim16);//test remove later.
  while (1)
    {
      /* USER CODE END WHILE */
  	  switch(state){
 8000320:	4b2f      	ldr	r3, [pc, #188]	@ (80003e0 <main+0xec>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b02      	cmp	r3, #2
 8000326:	d055      	beq.n	80003d4 <main+0xe0>
 8000328:	2b02      	cmp	r3, #2
 800032a:	dcf9      	bgt.n	8000320 <main+0x2c>
 800032c:	2b00      	cmp	r3, #0
 800032e:	d053      	beq.n	80003d8 <main+0xe4>
 8000330:	2b01      	cmp	r3, #1
 8000332:	d1f5      	bne.n	8000320 <main+0x2c>
  	  	  	  case triggerState:

  	  	  		  break;
  	  	  	  case postTrigger:

  	  	  		 if(val == BUFFER_SIZE){
 8000334:	4b2b      	ldr	r3, [pc, #172]	@ (80003e4 <main+0xf0>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800033c:	d102      	bne.n	8000344 <main+0x50>
  	  	  			 val = 0;
 800033e:	4b29      	ldr	r3, [pc, #164]	@ (80003e4 <main+0xf0>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
  	  	  	  	 }

  	  	  		 trigger = 0;
 8000344:	4b28      	ldr	r3, [pc, #160]	@ (80003e8 <main+0xf4>)
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
  	  	  		 //Send_Large_USB_Data((void*)buffer, 150 * sizeof(uint16_t));
				 counter++;
 800034a:	4b28      	ldr	r3, [pc, #160]	@ (80003ec <main+0xf8>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	4a26      	ldr	r2, [pc, #152]	@ (80003ec <main+0xf8>)
 8000352:	6013      	str	r3, [r2, #0]
				 if(val == bufferPointer - 1){
 8000354:	4b26      	ldr	r3, [pc, #152]	@ (80003f0 <main+0xfc>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	1e5a      	subs	r2, r3, #1
 800035a:	4b22      	ldr	r3, [pc, #136]	@ (80003e4 <main+0xf0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	d105      	bne.n	800036e <main+0x7a>
					 cout++;
 8000362:	4b24      	ldr	r3, [pc, #144]	@ (80003f4 <main+0x100>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	3301      	adds	r3, #1
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <main+0x100>)
 800036c:	701a      	strb	r2, [r3, #0]
				 }
  	  	  		 sprintf(msg, "%hu\r\n", buffer[val]);
 800036e:	4b1d      	ldr	r3, [pc, #116]	@ (80003e4 <main+0xf0>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a21      	ldr	r2, [pc, #132]	@ (80003f8 <main+0x104>)
 8000374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000378:	461a      	mov	r2, r3
 800037a:	4920      	ldr	r1, [pc, #128]	@ (80003fc <main+0x108>)
 800037c:	4820      	ldr	r0, [pc, #128]	@ (8000400 <main+0x10c>)
 800037e:	f00a f833 	bl	800a3e8 <siprintf>
  	  	  		 CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 8000382:	481f      	ldr	r0, [pc, #124]	@ (8000400 <main+0x10c>)
 8000384:	f7ff ff2c 	bl	80001e0 <strlen>
 8000388:	4603      	mov	r3, r0
 800038a:	b29b      	uxth	r3, r3
 800038c:	4619      	mov	r1, r3
 800038e:	481c      	ldr	r0, [pc, #112]	@ (8000400 <main+0x10c>)
 8000390:	f009 fbbc 	bl	8009b0c <CDC_Transmit_FS>
  	  	  		 delay_us(100);
 8000394:	2064      	movs	r0, #100	@ 0x64
 8000396:	f7ff ff7b 	bl	8000290 <delay_us>
//  	  	  		 HAL_Delay(1);
  	  	  		 val++;
 800039a:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <main+0xf0>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	3301      	adds	r3, #1
 80003a0:	4a10      	ldr	r2, [pc, #64]	@ (80003e4 <main+0xf0>)
 80003a2:	6013      	str	r3, [r2, #0]
/// creat a counter starting from 0 to 1024 and send the data from bufferpointer to 1024
  	  	  		 if (val == bufferPointer) {
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <main+0xfc>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	461a      	mov	r2, r3
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <main+0xf0>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d114      	bne.n	80003dc <main+0xe8>
  	  	  			counter = 0;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <main+0xf8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
  	  	  			memset(buffer, 0, sizeof(buffer));
 80003b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003bc:	2100      	movs	r1, #0
 80003be:	480e      	ldr	r0, [pc, #56]	@ (80003f8 <main+0x104>)
 80003c0:	f00a f832 	bl	800a428 <memset>
					HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80003c4:	2100      	movs	r1, #0
 80003c6:	480f      	ldr	r0, [pc, #60]	@ (8000404 <main+0x110>)
 80003c8:	f004 fb06 	bl	80049d8 <HAL_TIM_PWM_Start_IT>
					state = preTrigger;
 80003cc:	4b04      	ldr	r3, [pc, #16]	@ (80003e0 <main+0xec>)
 80003ce:	2202      	movs	r2, #2
 80003d0:	701a      	strb	r2, [r3, #0]
  	  	  		 }
  	  	  			break;
 80003d2:	e003      	b.n	80003dc <main+0xe8>
  	  	  		  break;
 80003d4:	bf00      	nop
 80003d6:	e7a3      	b.n	8000320 <main+0x2c>
  	  	  		  break;
 80003d8:	bf00      	nop
 80003da:	e7a1      	b.n	8000320 <main+0x2c>
  	  	  			break;
 80003dc:	bf00      	nop
  	  switch(state){
 80003de:	e79f      	b.n	8000320 <main+0x2c>
 80003e0:	20002206 	.word	0x20002206
 80003e4:	20002200 	.word	0x20002200
 80003e8:	200021f0 	.word	0x200021f0
 80003ec:	20002208 	.word	0x20002208
 80003f0:	200021ec 	.word	0x200021ec
 80003f4:	200022a8 	.word	0x200022a8
 80003f8:	200001ec 	.word	0x200001ec
 80003fc:	0800ad40 	.word	0x0800ad40
 8000400:	200021f4 	.word	0x200021f4
 8000404:	20002210 	.word	0x20002210

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b0a6      	sub	sp, #152	@ 0x98
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000412:	2228      	movs	r2, #40	@ 0x28
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f00a f806 	bl	800a428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
 800042a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2258      	movs	r2, #88	@ 0x58
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f009 fff8 	bl	800a428 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000438:	2301      	movs	r3, #1
 800043a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800043c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000440:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000442:	2301      	movs	r3, #1
 8000444:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000446:	2302      	movs	r3, #2
 8000448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800044c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000450:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000454:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000458:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000462:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000466:	4618      	mov	r0, r3
 8000468:	f002 fc64 	bl	8002d34 <HAL_RCC_OscConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000472:	f000 fb43 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000476:	230f      	movs	r3, #15
 8000478:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047a:	2302      	movs	r3, #2
 800047c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000486:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000490:	2102      	movs	r1, #2
 8000492:	4618      	mov	r0, r3
 8000494:	f003 fca2 	bl	8003ddc <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800049e:	f000 fb2d 	bl	8000afc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_TIM16
 80004a2:	f44f 0312 	mov.w	r3, #9568256	@ 0x920000
 80004a6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004a8:	2300      	movs	r3, #0
 80004aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80004ac:	2300      	movs	r3, #0
 80004ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80004b0:	2300      	movs	r3, #0
 80004b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4618      	mov	r0, r3
 80004b8:	f003 fe60 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80004c2:	f000 fb1b 	bl	8000afc <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3798      	adds	r7, #152	@ 0x98
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(uint32_t period)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	@ 0x30
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e4:	f107 0308 	add.w	r3, r7, #8
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
 80004f4:	615a      	str	r2, [r3, #20]
 80004f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004f8:	4b27      	ldr	r3, [pc, #156]	@ (8000598 <MX_TIM2_Init+0xc8>)
 80004fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000500:	4b25      	ldr	r3, [pc, #148]	@ (8000598 <MX_TIM2_Init+0xc8>)
 8000502:	2201      	movs	r2, #1
 8000504:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000506:	4b24      	ldr	r3, [pc, #144]	@ (8000598 <MX_TIM2_Init+0xc8>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = period-1;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3b01      	subs	r3, #1
 8000510:	4a21      	ldr	r2, [pc, #132]	@ (8000598 <MX_TIM2_Init+0xc8>)
 8000512:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000514:	4b20      	ldr	r3, [pc, #128]	@ (8000598 <MX_TIM2_Init+0xc8>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051a:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <MX_TIM2_Init+0xc8>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000520:	481d      	ldr	r0, [pc, #116]	@ (8000598 <MX_TIM2_Init+0xc8>)
 8000522:	f004 f966 	bl	80047f2 <HAL_TIM_PWM_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 800052c:	f000 fae6 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000530:	2300      	movs	r3, #0
 8000532:	627b      	str	r3, [r7, #36]	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800053c:	4619      	mov	r1, r3
 800053e:	4816      	ldr	r0, [pc, #88]	@ (8000598 <MX_TIM2_Init+0xc8>)
 8000540:	f005 fa96 	bl	8005a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800054a:	f000 fad7 	bl	8000afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800054e:	2360      	movs	r3, #96	@ 0x60
 8000550:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	2200      	movs	r2, #0
 8000564:	4619      	mov	r1, r3
 8000566:	480c      	ldr	r0, [pc, #48]	@ (8000598 <MX_TIM2_Init+0xc8>)
 8000568:	f004 fd7a 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8000572:	f000 fac3 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	2204      	movs	r2, #4
 800057c:	4619      	mov	r1, r3
 800057e:	4806      	ldr	r0, [pc, #24]	@ (8000598 <MX_TIM2_Init+0xc8>)
 8000580:	f004 fd6e 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 800058a:	f000 fab7 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	3730      	adds	r7, #48	@ 0x30
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20002210 	.word	0x20002210

0800059c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(uint16_t period, uint16_t prescalar)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	80fb      	strh	r3, [r7, #6]
 80005a8:	4613      	mov	r3, r2
 80005aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_TIM16_Init+0x64>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	@ (8000604 <MX_TIM16_Init+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler =prescalar ;
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	4a12      	ldr	r2, [pc, #72]	@ (8000600 <MX_TIM16_Init+0x64>)
 80005b6:	6053      	str	r3, [r2, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_TIM16_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = period;
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000600 <MX_TIM16_Init+0x64>)
 80005c2:	60d3      	str	r3, [r2, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_TIM16_Init+0x64>)
 80005c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005ca:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_TIM16_Init+0x64>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <MX_TIM16_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80005d8:	4809      	ldr	r0, [pc, #36]	@ (8000600 <MX_TIM16_Init+0x64>)
 80005da:	f003 ffed 	bl	80045b8 <HAL_TIM_Base_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM16_Init+0x4c>
  {
    Error_Handler();
 80005e4:	f000 fa8a 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
 80005e8:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <MX_TIM16_Init+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	68da      	ldr	r2, [r3, #12]
 80005ee:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <MX_TIM16_Init+0x64>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f042 0201 	orr.w	r2, r2, #1
 80005f6:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM16_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000225c 	.word	0x2000225c
 8000604:	40014400 	.word	0x40014400

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b32      	ldr	r3, [pc, #200]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a31      	ldr	r2, [pc, #196]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 8000624:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a2b      	ldr	r2, [pc, #172]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 800063c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a25      	ldr	r2, [pc, #148]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a1f      	ldr	r2, [pc, #124]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 800066c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <MX_GPIO_Init+0xe0>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000686:	f000 fe6f 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000690:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4812      	ldr	r0, [pc, #72]	@ (80006ec <MX_GPIO_Init+0xe4>)
 80006a2:	f000 fcd7 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a6:	2320      	movs	r3, #32
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c0:	f000 fcc8 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80006c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_GPIO_Init+0xe8>)
 80006da:	f000 fcbb 	bl	8001054 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	@ 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000
 80006ec:	48000800 	.word	0x48000800
 80006f0:	48000400 	.word	0x48000400

080006f4 <HAL_TIM_PeriodElapsedCallback>:
uint8_t trigEdge = 0x00; //Falling Edge
int triggerCount = 300;
int Cutter=0;

// ISR for Timer 16
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

	if(htim == &htim16){
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d113      	bne.n	800072c <HAL_TIM_PeriodElapsedCallback+0x38>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000704:	2120      	movs	r1, #32
 8000706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070a:	f000 fe45 	bl	8001398 <HAL_GPIO_TogglePin>
		state = postTrigger;
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
		val = bufferPointer;
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800071c:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 800071e:	2100      	movs	r1, #0
 8000720:	4808      	ldr	r0, [pc, #32]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000722:	f004 fab1 	bl	8004c88 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim16);
 8000726:	4803      	ldr	r0, [pc, #12]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000728:	f004 f834 	bl	8004794 <HAL_TIM_Base_Stop_IT>
	}

	}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000225c 	.word	0x2000225c
 8000738:	20002206 	.word	0x20002206
 800073c:	200021ec 	.word	0x200021ec
 8000740:	20002200 	.word	0x20002200
 8000744:	20002210 	.word	0x20002210

08000748 <HAL_TIM_PWM_PulseFinishedCallback>:

uint8_t IncFlag = 0; // Flag to see if we're on the second value.

// ISR for Timer 2
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

	// Read the current value from the input pin
	uint16_t currentValue = GPIOB->IDR;
 8000750:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	81fb      	strh	r3, [r7, #14]

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7f1b      	ldrb	r3, [r3, #28]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d143      	bne.n	80007e6 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
        if (!trigger && IncFlag) {
 800075e:	4b33      	ldr	r3, [pc, #204]	@ (800082c <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d13f      	bne.n	80007e6 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
 8000766:	4b32      	ldr	r3, [pc, #200]	@ (8000830 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d03b      	beq.n	80007e6 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
            xorResult = currentValue ^ buffer[bufferPointer];
 800076e:	4b31      	ldr	r3, [pc, #196]	@ (8000834 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	4b30      	ldr	r3, [pc, #192]	@ (8000838 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 8000776:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	4053      	eors	r3, r2
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b2e      	ldr	r3, [pc, #184]	@ (800083c <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 8000782:	801a      	strh	r2, [r3, #0]
            uint16_t trigPinCheck = xorResult & trigPin;
 8000784:	4b2e      	ldr	r3, [pc, #184]	@ (8000840 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b2c      	ldr	r3, [pc, #176]	@ (800083c <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	4013      	ands	r3, r2
 8000790:	81bb      	strh	r3, [r7, #12]
            uint16_t trigEdgeCheck = ~(buffer[bufferPointer] ^ trigEdge);
 8000792:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 800079a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800079e:	4a29      	ldr	r2, [pc, #164]	@ (8000844 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	4053      	eors	r3, r2
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	817b      	strh	r3, [r7, #10]
            trigger = (trigPinCheck & trigEdgeCheck) > 0;
 80007aa:	89ba      	ldrh	r2, [r7, #12]
 80007ac:	897b      	ldrh	r3, [r7, #10]
 80007ae:	4013      	ands	r3, r2
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bf14      	ite	ne
 80007b6:	2301      	movne	r3, #1
 80007b8:	2300      	moveq	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 80007c0:	601a      	str	r2, [r3, #0]
            if (trigger) {
 80007c2:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00d      	beq.n	80007e6 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
            	IncFlag = 0;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
                state = triggerState;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
                trigPointer = bufferPointer;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80007de:	601a      	str	r2, [r3, #0]
                HAL_TIM_Base_Start_IT(&htim16); // Start timer 16
 80007e0:	481b      	ldr	r0, [pc, #108]	@ (8000850 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80007e2:	f003 ff67 	bl	80046b4 <HAL_TIM_Base_Start_IT>
            }
        }
    }

	// Add 8-bit logic input to the buffer if not disconnected
	buffer[bufferPointer] = currentValue;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	4619      	mov	r1, r3
 80007ec:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	// Increment pointer with circular logic
	bufferPointer++;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80007fe:	801a      	strh	r2, [r3, #0]
	bufferPointer &= TwelveBit; // Default: 0x03FF for 10 Bits
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 800080c:	801a      	strh	r2, [r3, #0]

	if(bufferPointer == BUFFER_SIZE-1){IncFlag = 1;}
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000816:	4293      	cmp	r3, r2
 8000818:	d102      	bne.n	8000820 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>
 800081a:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]

}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	48000400 	.word	0x48000400
 800082c:	200021f0 	.word	0x200021f0
 8000830:	200022ab 	.word	0x200022ab
 8000834:	200021ec 	.word	0x200021ec
 8000838:	200001ec 	.word	0x200001ec
 800083c:	20002204 	.word	0x20002204
 8000840:	200022a9 	.word	0x200022a9
 8000844:	200022aa 	.word	0x200022aa
 8000848:	20002206 	.word	0x20002206
 800084c:	2000220c 	.word	0x2000220c
 8000850:	2000225c 	.word	0x2000225c

08000854 <Process_USB_Command>:
uint16_t period2LowerHalf = 0x0000;
uint32_t period2UpperHalf = 0x00000000;
uint16_t prescalar16 = 0x0000;
int puff[100];
int i = 0;
void Process_USB_Command(char *cmd) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]




	commandValueFlag += 1;
 800085c:	4b72      	ldr	r3, [pc, #456]	@ (8000a28 <Process_USB_Command+0x1d4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	4a71      	ldr	r2, [pc, #452]	@ (8000a28 <Process_USB_Command+0x1d4>)
 8000864:	6013      	str	r3, [r2, #0]
	if (commandValueFlag == 3)
 8000866:	4b70      	ldr	r3, [pc, #448]	@ (8000a28 <Process_USB_Command+0x1d4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b03      	cmp	r3, #3
 800086c:	d102      	bne.n	8000874 <Process_USB_Command+0x20>
			commandValueFlag = 0;
 800086e:	4b6e      	ldr	r3, [pc, #440]	@ (8000a28 <Process_USB_Command+0x1d4>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
	if (commandValueFlag == 0){
 8000874:	4b6c      	ldr	r3, [pc, #432]	@ (8000a28 <Process_USB_Command+0x1d4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d110      	bne.n	800089e <Process_USB_Command+0x4a>
		command = atoi(cmd);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f009 fd2b 	bl	800a2d8 <atoi>
 8000882:	4603      	mov	r3, r0
 8000884:	4a69      	ldr	r2, [pc, #420]	@ (8000a2c <Process_USB_Command+0x1d8>)
 8000886:	6013      	str	r3, [r2, #0]
		puff[i++] = command;
 8000888:	4b69      	ldr	r3, [pc, #420]	@ (8000a30 <Process_USB_Command+0x1dc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	4968      	ldr	r1, [pc, #416]	@ (8000a30 <Process_USB_Command+0x1dc>)
 8000890:	600a      	str	r2, [r1, #0]
 8000892:	4a66      	ldr	r2, [pc, #408]	@ (8000a2c <Process_USB_Command+0x1d8>)
 8000894:	6812      	ldr	r2, [r2, #0]
 8000896:	4967      	ldr	r1, [pc, #412]	@ (8000a34 <Process_USB_Command+0x1e0>)
 8000898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800089c:	e0b6      	b.n	8000a0c <Process_USB_Command+0x1b8>
	}
	else{
			switch(command){
 800089e:	4b63      	ldr	r3, [pc, #396]	@ (8000a2c <Process_USB_Command+0x1d8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b07      	cmp	r3, #7
 80008a4:	f200 80b2 	bhi.w	8000a0c <Process_USB_Command+0x1b8>
 80008a8:	a201      	add	r2, pc, #4	@ (adr r2, 80008b0 <Process_USB_Command+0x5c>)
 80008aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ae:	bf00      	nop
 80008b0:	080008d1 	.word	0x080008d1
 80008b4:	080008e1 	.word	0x080008e1
 80008b8:	080008f7 	.word	0x080008f7
 80008bc:	08000907 	.word	0x08000907
 80008c0:	08000917 	.word	0x08000917
 80008c4:	08000949 	.word	0x08000949
 80008c8:	0800098d 	.word	0x0800098d
 80008cc:	080009db 	.word	0x080009db
			case 0://start
				HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80008d0:	2100      	movs	r1, #0
 80008d2:	4859      	ldr	r0, [pc, #356]	@ (8000a38 <Process_USB_Command+0x1e4>)
 80008d4:	f004 f880 	bl	80049d8 <HAL_TIM_PWM_Start_IT>
				state = preTrigger;
 80008d8:	4b58      	ldr	r3, [pc, #352]	@ (8000a3c <Process_USB_Command+0x1e8>)
 80008da:	2202      	movs	r2, #2
 80008dc:	701a      	strb	r2, [r3, #0]
				break;
 80008de:	e095      	b.n	8000a0c <Process_USB_Command+0x1b8>
			case 1: //stop
				trigger = 0;
 80008e0:	4b57      	ldr	r3, [pc, #348]	@ (8000a40 <Process_USB_Command+0x1ec>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
				HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80008e6:	2100      	movs	r1, #0
 80008e8:	4853      	ldr	r0, [pc, #332]	@ (8000a38 <Process_USB_Command+0x1e4>)
 80008ea:	f004 f9cd 	bl	8004c88 <HAL_TIM_PWM_Stop_IT>
				state = preTrigger;
 80008ee:	4b53      	ldr	r3, [pc, #332]	@ (8000a3c <Process_USB_Command+0x1e8>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	701a      	strb	r2, [r3, #0]
				break;
 80008f4:	e08a      	b.n	8000a0c <Process_USB_Command+0x1b8>
			case 2: // set trig edge
				trigEdge = atoi(cmd);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f009 fcee 	bl	800a2d8 <atoi>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b50      	ldr	r3, [pc, #320]	@ (8000a44 <Process_USB_Command+0x1f0>)
 8000902:	701a      	strb	r2, [r3, #0]
				break;
 8000904:	e082      	b.n	8000a0c <Process_USB_Command+0x1b8>
			case 3: // set trig pin
				trigPin = atoi(cmd);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f009 fce6 	bl	800a2d8 <atoi>
 800090c:	4603      	mov	r3, r0
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b4d      	ldr	r3, [pc, #308]	@ (8000a48 <Process_USB_Command+0x1f4>)
 8000912:	701a      	strb	r2, [r3, #0]
				break;
 8000914:	e07a      	b.n	8000a0c <Process_USB_Command+0x1b8>
			case 4: //trigger PIN from 0 to 7
				period16 = period16 << 8;
 8000916:	4b4d      	ldr	r3, [pc, #308]	@ (8000a4c <Process_USB_Command+0x1f8>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <Process_USB_Command+0x1f8>)
 8000920:	801a      	strh	r2, [r3, #0]
				period16 |= atoi(cmd);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f009 fcd8 	bl	800a2d8 <atoi>
 8000928:	4603      	mov	r3, r0
 800092a:	b21a      	sxth	r2, r3
 800092c:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <Process_USB_Command+0x1f8>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	b21b      	sxth	r3, r3
 8000932:	4313      	orrs	r3, r2
 8000934:	b21b      	sxth	r3, r3
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b44      	ldr	r3, [pc, #272]	@ (8000a4c <Process_USB_Command+0x1f8>)
 800093a:	801a      	strh	r2, [r3, #0]
				change_period16(period16);
 800093c:	4b43      	ldr	r3, [pc, #268]	@ (8000a4c <Process_USB_Command+0x1f8>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f8ab 	bl	8000a9c <change_period16>
				break;
 8000946:	e061      	b.n	8000a0c <Process_USB_Command+0x1b8>

			case 5:
				period2UpperHalf = period2UpperHalf << 8;
 8000948:	4b41      	ldr	r3, [pc, #260]	@ (8000a50 <Process_USB_Command+0x1fc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	021b      	lsls	r3, r3, #8
 800094e:	4a40      	ldr	r2, [pc, #256]	@ (8000a50 <Process_USB_Command+0x1fc>)
 8000950:	6013      	str	r3, [r2, #0]
				period2UpperHalf |= atoi(cmd);
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f009 fcc0 	bl	800a2d8 <atoi>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a50 <Process_USB_Command+0x1fc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4313      	orrs	r3, r2
 8000962:	4a3b      	ldr	r2, [pc, #236]	@ (8000a50 <Process_USB_Command+0x1fc>)
 8000964:	6013      	str	r3, [r2, #0]
				period2 &= 0x0000FFFF;
 8000966:	4b3b      	ldr	r3, [pc, #236]	@ (8000a54 <Process_USB_Command+0x200>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	b29b      	uxth	r3, r3
 800096c:	4a39      	ldr	r2, [pc, #228]	@ (8000a54 <Process_USB_Command+0x200>)
 800096e:	6013      	str	r3, [r2, #0]
				period2 |= period2UpperHalf << 16;
 8000970:	4b37      	ldr	r3, [pc, #220]	@ (8000a50 <Process_USB_Command+0x1fc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	041a      	lsls	r2, r3, #16
 8000976:	4b37      	ldr	r3, [pc, #220]	@ (8000a54 <Process_USB_Command+0x200>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4313      	orrs	r3, r2
 800097c:	4a35      	ldr	r2, [pc, #212]	@ (8000a54 <Process_USB_Command+0x200>)
 800097e:	6013      	str	r3, [r2, #0]
				change_period2(period2);
 8000980:	4b34      	ldr	r3, [pc, #208]	@ (8000a54 <Process_USB_Command+0x200>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 f86b 	bl	8000a60 <change_period2>
				break;
 800098a:	e03f      	b.n	8000a0c <Process_USB_Command+0x1b8>
			case 6:
				period2LowerHalf = period2LowerHalf << 8;
 800098c:	4b32      	ldr	r3, [pc, #200]	@ (8000a58 <Process_USB_Command+0x204>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	b29a      	uxth	r2, r3
 8000994:	4b30      	ldr	r3, [pc, #192]	@ (8000a58 <Process_USB_Command+0x204>)
 8000996:	801a      	strh	r2, [r3, #0]
				period2LowerHalf |= atoi(cmd);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f009 fc9d 	bl	800a2d8 <atoi>
 800099e:	4603      	mov	r3, r0
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a58 <Process_USB_Command+0x204>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <Process_USB_Command+0x204>)
 80009b0:	801a      	strh	r2, [r3, #0]
				period2 &= 0xFFFF0000;
 80009b2:	4b28      	ldr	r3, [pc, #160]	@ (8000a54 <Process_USB_Command+0x200>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	0c1b      	lsrs	r3, r3, #16
 80009b8:	041b      	lsls	r3, r3, #16
 80009ba:	4a26      	ldr	r2, [pc, #152]	@ (8000a54 <Process_USB_Command+0x200>)
 80009bc:	6013      	str	r3, [r2, #0]
				period2 |= period2LowerHalf;
 80009be:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <Process_USB_Command+0x204>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <Process_USB_Command+0x200>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	4a22      	ldr	r2, [pc, #136]	@ (8000a54 <Process_USB_Command+0x200>)
 80009cc:	6013      	str	r3, [r2, #0]
				change_period2(period2);
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <Process_USB_Command+0x200>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f844 	bl	8000a60 <change_period2>
				break;
 80009d8:	e018      	b.n	8000a0c <Process_USB_Command+0x1b8>
			case 7:
				prescalar16 = prescalar16 << 8;
 80009da:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <Process_USB_Command+0x208>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <Process_USB_Command+0x208>)
 80009e4:	801a      	strh	r2, [r3, #0]
				prescalar16 |= atoi(cmd);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f009 fc76 	bl	800a2d8 <atoi>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <Process_USB_Command+0x208>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <Process_USB_Command+0x208>)
 80009fe:	801a      	strh	r2, [r3, #0]
				change_prescalar16(prescalar16);
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <Process_USB_Command+0x208>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f861 	bl	8000acc <change_prescalar16>
				break;
 8000a0a:	bf00      	nop
			}
	}
	 memset(cmd, 0, strlen(cmd));  // Clear the command string//clear command
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff fbe7 	bl	80001e0 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461a      	mov	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f009 fd05 	bl	800a428 <memset>

}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	200022ac 	.word	0x200022ac
 8000a30:	20002454 	.word	0x20002454
 8000a34:	200022c4 	.word	0x200022c4
 8000a38:	20002210 	.word	0x20002210
 8000a3c:	20002206 	.word	0x20002206
 8000a40:	200021f0 	.word	0x200021f0
 8000a44:	200022aa 	.word	0x200022aa
 8000a48:	200022a9 	.word	0x200022a9
 8000a4c:	200022b0 	.word	0x200022b0
 8000a50:	200022bc 	.word	0x200022bc
 8000a54:	200022b4 	.word	0x200022b4
 8000a58:	200022b8 	.word	0x200022b8
 8000a5c:	200022c0 	.word	0x200022c0

08000a60 <change_period2>:
void change_period2(uint32_t period){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480a      	ldr	r0, [pc, #40]	@ (8000a94 <change_period2+0x34>)
 8000a6c:	f003 ff18 	bl	80048a0 <HAL_TIM_PWM_Stop>

	memset(buffer, 0, sizeof(buffer));
 8000a70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a74:	2100      	movs	r1, #0
 8000a76:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <change_period2+0x38>)
 8000a78:	f009 fcd6 	bl	800a428 <memset>

	MX_TIM2_Init(period);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff fd27 	bl	80004d0 <MX_TIM2_Init>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000a82:	2100      	movs	r1, #0
 8000a84:	4803      	ldr	r0, [pc, #12]	@ (8000a94 <change_period2+0x34>)
 8000a86:	f003 ffa7 	bl	80049d8 <HAL_TIM_PWM_Start_IT>

}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20002210 	.word	0x20002210
 8000a98:	200001ec 	.word	0x200001ec

08000a9c <change_period16>:
void change_period16(uint16_t period){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Stop(&htim16);
 8000aa6:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <change_period16+0x28>)
 8000aa8:	f003 fddd 	bl	8004666 <HAL_TIM_Base_Stop>

	MX_TIM16_Init(period, prescalar16);
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <change_period16+0x2c>)
 8000aae:	881a      	ldrh	r2, [r3, #0]
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fd71 	bl	800059c <MX_TIM16_Init>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000225c 	.word	0x2000225c
 8000ac8:	200022c0 	.word	0x200022c0

08000acc <change_prescalar16>:
void change_prescalar16(uint16_t prescalar){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Stop(&htim16);
 8000ad6:	4807      	ldr	r0, [pc, #28]	@ (8000af4 <change_prescalar16+0x28>)
 8000ad8:	f003 fdc5 	bl	8004666 <HAL_TIM_Base_Stop>

	MX_TIM16_Init(period16, prescalar);
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <change_prescalar16+0x2c>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd59 	bl	800059c <MX_TIM16_Init>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000225c 	.word	0x2000225c
 8000af8:	200022b0 	.word	0x200022b0

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b3e:	2007      	movs	r0, #7
 8000b40:	f000 fa46 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b60:	d113      	bne.n	8000b8a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b62:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <HAL_TIM_PWM_MspInit+0x44>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	@ (8000b94 <HAL_TIM_PWM_MspInit+0x44>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	61d3      	str	r3, [r2, #28]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <HAL_TIM_PWM_MspInit+0x44>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	201c      	movs	r0, #28
 8000b80:	f000 fa31 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b84:	201c      	movs	r0, #28
 8000b86:	f000 fa4a 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <HAL_TIM_Base_MspInit+0x44>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d113      	bne.n	8000bd2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <HAL_TIM_Base_MspInit+0x48>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a0c      	ldr	r2, [pc, #48]	@ (8000be0 <HAL_TIM_Base_MspInit+0x48>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <HAL_TIM_Base_MspInit+0x48>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2019      	movs	r0, #25
 8000bc8:	f000 fa0d 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bcc:	2019      	movs	r0, #25
 8000bce:	f000 fa26 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40014400 	.word	0x40014400
 8000be0:	40021000 	.word	0x40021000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 f8d9 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000c4a:	f000 fcac 	bl	80015a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20003128 	.word	0x20003128

08000c58 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c5e:	f004 f8fd 	bl	8004e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000225c 	.word	0x2000225c

08000c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <TIM2_IRQHandler+0x10>)
 8000c72:	f004 f8f3 	bl	8004e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20002210 	.word	0x20002210

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f009 fbc2 	bl	800a438 <__errno>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	@ (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20010000 	.word	0x20010000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	20002458 	.word	0x20002458
 8000ce8:	20003768 	.word	0x20003768

08000cec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d48 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff ffea 	bl	8000cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <LoopForever+0xe>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	@ (8000d5c <LoopForever+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f009 fb81 	bl	800a444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d42:	f7ff fad7 	bl	80002f4 <main>

08000d46 <LoopForever>:

LoopForever:
    b LoopForever
 8000d46:	e7fe      	b.n	8000d46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000d54:	0800af04 	.word	0x0800af04
  ldr r2, =_sbss
 8000d58:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000d5c:	20003764 	.word	0x20003764

08000d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_2_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <HAL_Init+0x28>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	@ (8000d8c <HAL_Init+0x28>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 f92b 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 f808 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d80:	f7ff fec2 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40022000 	.word	0x40022000

08000d90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_InitTick+0x54>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_InitTick+0x58>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f943 	bl	800103a <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00e      	b.n	8000ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d80a      	bhi.n	8000dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f000 f90b 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <HAL_InitTick+0x5c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000004 	.word	0x20000004
 8000de8:	2000000c 	.word	0x2000000c
 8000dec:	20000008 	.word	0x20000008

08000df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	2000245c 	.word	0x2000245c

08000e18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	2000245c 	.word	0x2000245c

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	@ (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	@ (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	@ (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	@ 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	@ 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff29 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff3e 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001062:	e160      	b.n	8001326 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2101      	movs	r1, #1
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8152 	beq.w	8001320 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d005      	beq.n	8001094 <HAL_GPIO_Init+0x40>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d130      	bne.n	80010f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ca:	2201      	movs	r2, #1
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	f003 0201 	and.w	r2, r3, #1
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d017      	beq.n	8001132 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d123      	bne.n	8001186 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	6939      	ldr	r1, [r7, #16]
 8001182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0203 	and.w	r2, r3, #3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80ac 	beq.w	8001320 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001344 <HAL_GPIO_Init+0x2f0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001344 <HAL_GPIO_Init+0x2f0>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001344 <HAL_GPIO_Init+0x2f0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011e0:	4a59      	ldr	r2, [pc, #356]	@ (8001348 <HAL_GPIO_Init+0x2f4>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800120a:	d025      	beq.n	8001258 <HAL_GPIO_Init+0x204>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4f      	ldr	r2, [pc, #316]	@ (800134c <HAL_GPIO_Init+0x2f8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d01f      	beq.n	8001254 <HAL_GPIO_Init+0x200>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a4e      	ldr	r2, [pc, #312]	@ (8001350 <HAL_GPIO_Init+0x2fc>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d019      	beq.n	8001250 <HAL_GPIO_Init+0x1fc>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a4d      	ldr	r2, [pc, #308]	@ (8001354 <HAL_GPIO_Init+0x300>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d013      	beq.n	800124c <HAL_GPIO_Init+0x1f8>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a4c      	ldr	r2, [pc, #304]	@ (8001358 <HAL_GPIO_Init+0x304>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d00d      	beq.n	8001248 <HAL_GPIO_Init+0x1f4>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a4b      	ldr	r2, [pc, #300]	@ (800135c <HAL_GPIO_Init+0x308>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_Init+0x1f0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a4a      	ldr	r2, [pc, #296]	@ (8001360 <HAL_GPIO_Init+0x30c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d101      	bne.n	8001240 <HAL_GPIO_Init+0x1ec>
 800123c:	2306      	movs	r3, #6
 800123e:	e00c      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001240:	2307      	movs	r3, #7
 8001242:	e00a      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001244:	2305      	movs	r3, #5
 8001246:	e008      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001248:	2304      	movs	r3, #4
 800124a:	e006      	b.n	800125a <HAL_GPIO_Init+0x206>
 800124c:	2303      	movs	r3, #3
 800124e:	e004      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001250:	2302      	movs	r3, #2
 8001252:	e002      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001258:	2300      	movs	r3, #0
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	f002 0203 	and.w	r2, r2, #3
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	4093      	lsls	r3, r2
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800126a:	4937      	ldr	r1, [pc, #220]	@ (8001348 <HAL_GPIO_Init+0x2f4>)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001278:	4b3a      	ldr	r3, [pc, #232]	@ (8001364 <HAL_GPIO_Init+0x310>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800129c:	4a31      	ldr	r2, [pc, #196]	@ (8001364 <HAL_GPIO_Init+0x310>)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a2:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <HAL_GPIO_Init+0x310>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c6:	4a27      	ldr	r2, [pc, #156]	@ (8001364 <HAL_GPIO_Init+0x310>)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012cc:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <HAL_GPIO_Init+0x310>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001364 <HAL_GPIO_Init+0x310>)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <HAL_GPIO_Init+0x310>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800131a:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <HAL_GPIO_Init+0x310>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	f47f ae97 	bne.w	8001064 <HAL_GPIO_Init+0x10>
  }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000
 800134c:	48000400 	.word	0x48000400
 8001350:	48000800 	.word	0x48000800
 8001354:	48000c00 	.word	0x48000c00
 8001358:	48001000 	.word	0x48001000
 800135c:	48001400 	.word	0x48001400
 8001360:	48001800 	.word	0x48001800
 8001364:	40010400 	.word	0x40010400

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001384:	e002      	b.n	800138c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4013      	ands	r3, r2
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43d9      	mvns	r1, r3
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	400b      	ands	r3, r1
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e0b9      	b.n	8001552 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f008 fcc0 	bl	8009d78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2203      	movs	r2, #3
 80013fc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f004 fbf4 	bl	8005bf2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e03e      	b.n	800148e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	3311      	adds	r3, #17
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	440b      	add	r3, r1
 8001432:	3310      	adds	r3, #16
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	3313      	adds	r3, #19
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	3320      	adds	r3, #32
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3324      	adds	r3, #36	@ 0x24
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3301      	adds	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	791b      	ldrb	r3, [r3, #4]
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	429a      	cmp	r2, r3
 8001496:	d3bb      	bcc.n	8001410 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e044      	b.n	8001528 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	440b      	add	r3, r1
 80014ac:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	3301      	adds	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	791b      	ldrb	r3, [r3, #4]
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3b5      	bcc.n	800149e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3304      	adds	r3, #4
 800153a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800153e:	f004 fb73 	bl	8005c28 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_PCD_Start+0x16>
 800156c:	2302      	movs	r3, #2
 800156e:	e016      	b.n	800159e <HAL_PCD_Start+0x44>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fb21 	bl	8005bc4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001582:	2101      	movs	r1, #1
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f008 fe6f 	bl	800a268 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f006 fdde 	bl	8008150 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f006 fdd7 	bl	8008166 <USB_ReadInterrupts>
 80015b8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 fab1 	bl	8001b2c <PCD_EP_ISR_Handler>

    return;
 80015ca:	e0bd      	b.n	8001748 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d013      	beq.n	80015fe <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015de:	b29a      	uxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015e8:	b292      	uxth	r2, r2
 80015ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f008 fc3d 	bl	8009e6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015f4:	2100      	movs	r1, #0
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f8a9 	bl	800174e <HAL_PCD_SetAddress>

    return;
 80015fc:	e0a4      	b.n	8001748 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00c      	beq.n	8001622 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800161a:	b292      	uxth	r2, r2
 800161c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001620:	e092      	b.n	8001748 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00c      	beq.n	8001646 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001634:	b29a      	uxth	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800163e:	b292      	uxth	r2, r2
 8001640:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001644:	e080      	b.n	8001748 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d027      	beq.n	80016a0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001658:	b29a      	uxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0204 	bic.w	r2, r2, #4
 8001662:	b292      	uxth	r2, r2
 8001664:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001670:	b29a      	uxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0208 	bic.w	r2, r2, #8
 800167a:	b292      	uxth	r2, r2
 800167c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f008 fc2d 	bl	8009ee0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001698:	b292      	uxth	r2, r2
 800169a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800169e:	e053      	b.n	8001748 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d027      	beq.n	80016fa <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0208 	orr.w	r2, r2, #8
 80016bc:	b292      	uxth	r2, r2
 80016be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016d4:	b292      	uxth	r2, r2
 80016d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 0204 	orr.w	r2, r2, #4
 80016ec:	b292      	uxth	r2, r2
 80016ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f008 fbda 	bl	8009eac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016f8:	e026      	b.n	8001748 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00f      	beq.n	8001724 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800170c:	b29a      	uxth	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001716:	b292      	uxth	r2, r2
 8001718:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f008 fb98 	bl	8009e52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001722:	e011      	b.n	8001748 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001740:	b292      	uxth	r2, r2
 8001742:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001746:	bf00      	nop
  }
}
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_PCD_SetAddress+0x1a>
 8001764:	2302      	movs	r3, #2
 8001766:	e012      	b.n	800178e <HAL_PCD_SetAddress+0x40>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f006 fcd2 	bl	8008128 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	4608      	mov	r0, r1
 80017a0:	4611      	mov	r1, r2
 80017a2:	461a      	mov	r2, r3
 80017a4:	4603      	mov	r3, r0
 80017a6:	70fb      	strb	r3, [r7, #3]
 80017a8:	460b      	mov	r3, r1
 80017aa:	803b      	strh	r3, [r7, #0]
 80017ac:	4613      	mov	r3, r2
 80017ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da0e      	bge.n	80017da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	f003 0207 	and.w	r2, r3, #7
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	3310      	adds	r3, #16
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	705a      	strb	r2, [r3, #1]
 80017d8:	e00e      	b.n	80017f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	f003 0207 	and.w	r2, r3, #7
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001804:	883a      	ldrh	r2, [r7, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	78ba      	ldrb	r2, [r7, #2]
 800180e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001810:	78bb      	ldrb	r3, [r7, #2]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d102      	bne.n	800181c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_PCD_EP_Open+0x94>
 8001826:	2302      	movs	r3, #2
 8001828:	e00e      	b.n	8001848 <HAL_PCD_EP_Open+0xb2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68f9      	ldr	r1, [r7, #12]
 8001838:	4618      	mov	r0, r3
 800183a:	f004 fa13 	bl	8005c64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001846:	7afb      	ldrb	r3, [r7, #11]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800185c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001860:	2b00      	cmp	r3, #0
 8001862:	da0e      	bge.n	8001882 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	f003 0207 	and.w	r2, r3, #7
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	3310      	adds	r3, #16
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	705a      	strb	r2, [r3, #1]
 8001880:	e00e      	b.n	80018a0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	f003 0207 	and.w	r2, r3, #7
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_PCD_EP_Close+0x6a>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e00e      	b.n	80018d8 <HAL_PCD_EP_Close+0x88>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68f9      	ldr	r1, [r7, #12]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 fd8f 	bl	80063ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	460b      	mov	r3, r1
 80018ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018f0:	7afb      	ldrb	r3, [r7, #11]
 80018f2:	f003 0207 	and.w	r2, r3, #7
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4413      	add	r3, r2
 8001906:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2200      	movs	r2, #0
 800191e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001920:	7afb      	ldrb	r3, [r7, #11]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	b2da      	uxtb	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6979      	ldr	r1, [r7, #20]
 8001932:	4618      	mov	r0, r3
 8001934:	f004 ff47 	bl	80067c6 <USB_EPStartXfer>

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f003 0207 	and.w	r2, r3, #7
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001964:	681b      	ldr	r3, [r3, #0]
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	460b      	mov	r3, r1
 8001980:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001982:	7afb      	ldrb	r3, [r7, #11]
 8001984:	f003 0207 	and.w	r2, r3, #7
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	3310      	adds	r3, #16
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4413      	add	r3, r2
 8001996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2200      	movs	r2, #0
 80019b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2201      	movs	r2, #1
 80019bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019be:	7afb      	ldrb	r3, [r7, #11]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6979      	ldr	r1, [r7, #20]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f004 fef8 	bl	80067c6 <USB_EPStartXfer>

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	7912      	ldrb	r2, [r2, #4]
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e03e      	b.n	8001a7c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	da0e      	bge.n	8001a24 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	f003 0207 	and.w	r2, r3, #7
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	3310      	adds	r3, #16
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	705a      	strb	r2, [r3, #1]
 8001a22:	e00c      	b.n	8001a3e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_PCD_EP_SetStall+0x7e>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e00e      	b.n	8001a7c <HAL_PCD_EP_SetStall+0x9c>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68f9      	ldr	r1, [r7, #12]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f006 fa5c 	bl	8007f2a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	7912      	ldrb	r2, [r2, #4]
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e040      	b.n	8001b24 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da0e      	bge.n	8001ac8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	f003 0207 	and.w	r2, r3, #7
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	3310      	adds	r3, #16
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	705a      	strb	r2, [r3, #1]
 8001ac6:	e00e      	b.n	8001ae6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	f003 0207 	and.w	r2, r3, #7
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_PCD_EP_ClrStall+0x82>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e00e      	b.n	8001b24 <HAL_PCD_EP_ClrStall+0xa0>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f006 fa59 	bl	8007fcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b096      	sub	sp, #88	@ 0x58
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b34:	e3ad      	b.n	8002292 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b3e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8001b50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 816f 	bne.w	8001e38 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d14c      	bne.n	8001c00 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b76:	81fb      	strh	r3, [r7, #14]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3310      	adds	r3, #16
 8001b8e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	441a      	add	r2, r3
 8001bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f008 f928 	bl	8009e1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7b1b      	ldrb	r3, [r3, #12]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 835c 	beq.w	8002292 <PCD_EP_ISR_Handler+0x766>
 8001bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 8357 	bne.w	8002292 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7b1b      	ldrb	r3, [r3, #12]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	731a      	strb	r2, [r3, #12]
 8001bfe:	e348      	b.n	8002292 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c06:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c12:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001c16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d032      	beq.n	8001c84 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c44:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c52:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c56:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	f006 fad6 	bl	800820a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	823b      	strh	r3, [r7, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	8a3a      	ldrh	r2, [r7, #16]
 8001c74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c78:	b292      	uxth	r2, r2
 8001c7a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f008 f8a1 	bl	8009dc4 <HAL_PCD_SetupStageCallback>
 8001c82:	e306      	b.n	8002292 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c84:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f280 8302 	bge.w	8002292 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	83fb      	strh	r3, [r7, #30]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	8bfa      	ldrh	r2, [r7, #30]
 8001ca4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d019      	beq.n	8001d10 <PCD_EP_ISR_Handler+0x1e4>
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d015      	beq.n	8001d10 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cea:	6959      	ldr	r1, [r3, #20]
 8001cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	f006 fa88 	bl	800820a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	441a      	add	r2, r3
 8001d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d06:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d08:	2100      	movs	r1, #0
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f008 f86c 	bl	8009de8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001d1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 82b5 	bne.w	8002292 <PCD_EP_ISR_Handler+0x766>
 8001d28:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001d2c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001d30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001d34:	f000 82ad 	beq.w	8002292 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	801a      	strh	r2, [r3, #0]
 8001d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <PCD_EP_ISR_Handler+0x25a>
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	e039      	b.n	8001dfa <PCD_EP_ISR_Handler+0x2ce>
 8001d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d8c:	d818      	bhi.n	8001dc0 <PCD_EP_ISR_Handler+0x294>
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <PCD_EP_ISR_Handler+0x27c>
 8001da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001da4:	3301      	adds	r3, #1
 8001da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	029b      	lsls	r3, r3, #10
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	e01c      	b.n	8001dfa <PCD_EP_ISR_Handler+0x2ce>
 8001dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	095b      	lsrs	r3, r3, #5
 8001dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <PCD_EP_ISR_Handler+0x2ae>
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	029b      	lsls	r3, r3, #10
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4313      	orrs	r3, r2
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e0a:	827b      	strh	r3, [r7, #18]
 8001e0c:	8a7b      	ldrh	r3, [r7, #18]
 8001e0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001e12:	827b      	strh	r3, [r7, #18]
 8001e14:	8a7b      	ldrh	r3, [r7, #18]
 8001e16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001e1a:	827b      	strh	r3, [r7, #18]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	8a7b      	ldrh	r3, [r7, #18]
 8001e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	8013      	strh	r3, [r2, #0]
 8001e36:	e22c      	b.n	8002292 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e4c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f280 80f6 	bge.w	8002042 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001e84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e8c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea4:	7b1b      	ldrb	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d123      	bne.n	8001ef2 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ece:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001ed2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 808e 	beq.w	8001ff8 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee2:	6959      	ldr	r1, [r3, #20]
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee6:	88da      	ldrh	r2, [r3, #6]
 8001ee8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001eec:	f006 f98d 	bl	800820a <USB_ReadPMA>
 8001ef0:	e082      	b.n	8001ff8 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef4:	78db      	ldrb	r3, [r3, #3]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d10a      	bne.n	8001f10 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001efa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001efe:	461a      	mov	r2, r3
 8001f00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f9d3 	bl	80022ae <HAL_PCD_EP_DB_Receive>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001f0e:	e073      	b.n	8001ff8 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f2a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	441a      	add	r2, r3
 8001f3c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d022      	beq.n	8001fb4 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f92:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001f96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d02c      	beq.n	8001ff8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa4:	6959      	ldr	r1, [r3, #20]
 8001fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa8:	891a      	ldrh	r2, [r3, #8]
 8001faa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fae:	f006 f92c 	bl	800820a <USB_ReadPMA>
 8001fb2:	e021      	b.n	8001ff8 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001fdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fea:	6959      	ldr	r1, [r3, #20]
 8001fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fee:	895a      	ldrh	r2, [r3, #10]
 8001ff0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ff4:	f006 f909 	bl	800820a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	69da      	ldr	r2, [r3, #28]
 8001ffc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002000:	441a      	add	r2, r3
 8002002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002004:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800200e:	441a      	add	r2, r3
 8002010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002012:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <PCD_EP_ISR_Handler+0x4fc>
 800201c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d206      	bcs.n	8002036 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f007 feda 	bl	8009de8 <HAL_PCD_DataOutStageCallback>
 8002034:	e005      	b.n	8002042 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800203c:	4618      	mov	r0, r3
 800203e:	f004 fbc2 	bl	80067c6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002042:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8121 	beq.w	8002292 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8002050:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	3310      	adds	r3, #16
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800207a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800207e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	441a      	add	r2, r3
 8002090:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800209c:	b29b      	uxth	r3, r3
 800209e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80020a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a2:	78db      	ldrb	r3, [r3, #3]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	f040 80a2 	bne.w	80021ee <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80020aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80020b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020b2:	7b1b      	ldrb	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8093 	beq.w	80021e0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80020be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d046      	beq.n	8002154 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d126      	bne.n	800211c <PCD_EP_ISR_Handler+0x5f0>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020dc:	b29b      	uxth	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	4413      	add	r3, r2
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	00da      	lsls	r2, r3, #3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	4413      	add	r3, r2
 80020f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80020f4:	623b      	str	r3, [r7, #32]
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002100:	b29a      	uxth	r2, r3
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002114:	b29a      	uxth	r2, r3
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	e061      	b.n	80021e0 <PCD_EP_ISR_Handler+0x6b4>
 800211c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d15d      	bne.n	80021e0 <PCD_EP_ISR_Handler+0x6b4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002138:	4413      	add	r3, r2
 800213a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800213c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	00da      	lsls	r2, r3, #3
 8002142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002144:	4413      	add	r3, r2
 8002146:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800214a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800214c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214e:	2200      	movs	r2, #0
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	e045      	b.n	80021e0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800215a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800215c:	785b      	ldrb	r3, [r3, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d126      	bne.n	80021b0 <PCD_EP_ISR_Handler+0x684>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	637b      	str	r3, [r7, #52]	@ 0x34
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002170:	b29b      	uxth	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002176:	4413      	add	r3, r2
 8002178:	637b      	str	r3, [r7, #52]	@ 0x34
 800217a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	00da      	lsls	r2, r3, #3
 8002180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002182:	4413      	add	r3, r2
 8002184:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002188:	633b      	str	r3, [r7, #48]	@ 0x30
 800218a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002194:	b29a      	uxth	r2, r3
 8002196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ac:	801a      	strh	r2, [r3, #0]
 80021ae:	e017      	b.n	80021e0 <PCD_EP_ISR_Handler+0x6b4>
 80021b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b2:	785b      	ldrb	r3, [r3, #1]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d113      	bne.n	80021e0 <PCD_EP_ISR_Handler+0x6b4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c6:	4413      	add	r3, r2
 80021c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	00da      	lsls	r2, r3, #3
 80021d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d2:	4413      	add	r3, r2
 80021d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80021d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021dc:	2200      	movs	r2, #0
 80021de:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f007 fe19 	bl	8009e1e <HAL_PCD_DataInStageCallback>
 80021ec:	e051      	b.n	8002292 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80021ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80021f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d144      	bne.n	8002284 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	4413      	add	r3, r2
 8002214:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800221e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800222a:	429a      	cmp	r2, r3
 800222c:	d907      	bls.n	800223e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800222e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002236:	1ad2      	subs	r2, r2, r3
 8002238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800223a:	619a      	str	r2, [r3, #24]
 800223c:	e002      	b.n	8002244 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800223e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d106      	bne.n	800225a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800224c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f007 fde3 	bl	8009e1e <HAL_PCD_DataInStageCallback>
 8002258:	e01b      	b.n	8002292 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800225a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002262:	441a      	add	r2, r3
 8002264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002266:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002270:	441a      	add	r2, r3
 8002272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002274:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800227c:	4618      	mov	r0, r3
 800227e:	f004 faa2 	bl	80067c6 <USB_EPStartXfer>
 8002282:	e006      	b.n	8002292 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002284:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002288:	461a      	mov	r2, r3
 800228a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f917 	bl	80024c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800229a:	b29b      	uxth	r3, r3
 800229c:	b21b      	sxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f6ff ac49 	blt.w	8001b36 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3758      	adds	r7, #88	@ 0x58
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b088      	sub	sp, #32
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	4613      	mov	r3, r2
 80022ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d07c      	beq.n	80023c0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	8b7b      	ldrh	r3, [r7, #26]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d306      	bcc.n	8002304 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	8b7b      	ldrh	r3, [r7, #26]
 80022fc:	1ad2      	subs	r2, r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	619a      	str	r2, [r3, #24]
 8002302:	e002      	b.n	800230a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d123      	bne.n	800235a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800232c:	833b      	strh	r3, [r7, #24]
 800232e:	8b3b      	ldrh	r3, [r7, #24]
 8002330:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002334:	833b      	strh	r3, [r7, #24]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	441a      	add	r2, r3
 8002344:	8b3b      	ldrh	r3, [r7, #24]
 8002346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800234a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800234e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002356:	b29b      	uxth	r3, r3
 8002358:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01f      	beq.n	80023a4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800237a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800237e:	82fb      	strh	r3, [r7, #22]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	8afb      	ldrh	r3, [r7, #22]
 8002390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800239c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023a4:	8b7b      	ldrh	r3, [r7, #26]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8085 	beq.w	80024b6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	6959      	ldr	r1, [r3, #20]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	891a      	ldrh	r2, [r3, #8]
 80023b8:	8b7b      	ldrh	r3, [r7, #26]
 80023ba:	f005 ff26 	bl	800820a <USB_ReadPMA>
 80023be:	e07a      	b.n	80024b6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	8b7b      	ldrh	r3, [r7, #26]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d306      	bcc.n	80023fe <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	8b7b      	ldrh	r3, [r7, #26]
 80023f6:	1ad2      	subs	r2, r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	619a      	str	r2, [r3, #24]
 80023fc:	e002      	b.n	8002404 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d123      	bne.n	8002454 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002426:	83fb      	strh	r3, [r7, #30]
 8002428:	8bfb      	ldrh	r3, [r7, #30]
 800242a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800242e:	83fb      	strh	r3, [r7, #30]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	441a      	add	r2, r3
 800243e:	8bfb      	ldrh	r3, [r7, #30]
 8002440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800244c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002450:	b29b      	uxth	r3, r3
 8002452:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d11f      	bne.n	800249e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002478:	83bb      	strh	r3, [r7, #28]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	441a      	add	r2, r3
 8002488:	8bbb      	ldrh	r3, [r7, #28]
 800248a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800248e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002496:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800249a:	b29b      	uxth	r3, r3
 800249c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800249e:	8b7b      	ldrh	r3, [r7, #26]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6959      	ldr	r1, [r3, #20]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	895a      	ldrh	r2, [r3, #10]
 80024b0:	8b7b      	ldrh	r3, [r7, #26]
 80024b2:	f005 feaa 	bl	800820a <USB_ReadPMA>
    }
  }

  return count;
 80024b6:	8b7b      	ldrh	r3, [r7, #26]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0a4      	sub	sp, #144	@ 0x90
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 81db 	beq.w	8002890 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024fe:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800250a:	429a      	cmp	r2, r3
 800250c:	d907      	bls.n	800251e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002516:	1ad2      	subs	r2, r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	619a      	str	r2, [r3, #24]
 800251c:	e002      	b.n	8002524 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f040 80b9 	bne.w	80026a0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	785b      	ldrb	r3, [r3, #1]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d126      	bne.n	8002584 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800254a:	4413      	add	r3, r2
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	00da      	lsls	r2, r3, #3
 8002554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002556:	4413      	add	r3, r2
 8002558:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800255c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800255e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002568:	b29a      	uxth	r2, r3
 800256a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800257c:	b29a      	uxth	r2, r3
 800257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	e01a      	b.n	80025ba <HAL_PCD_EP_DB_Transmit+0xfa>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	785b      	ldrb	r3, [r3, #1]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d116      	bne.n	80025ba <HAL_PCD_EP_DB_Transmit+0xfa>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	637b      	str	r3, [r7, #52]	@ 0x34
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a0:	4413      	add	r3, r2
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	00da      	lsls	r2, r3, #3
 80025aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ac:	4413      	add	r3, r2
 80025ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80025b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b6:	2200      	movs	r2, #0
 80025b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d126      	bne.n	8002616 <HAL_PCD_EP_DB_Transmit+0x156>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	00da      	lsls	r2, r3, #3
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800260a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800260e:	b29a      	uxth	r2, r3
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	801a      	strh	r2, [r3, #0]
 8002614:	e017      	b.n	8002646 <HAL_PCD_EP_DB_Transmit+0x186>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	785b      	ldrb	r3, [r3, #1]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d113      	bne.n	8002646 <HAL_PCD_EP_DB_Transmit+0x186>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	4413      	add	r3, r2
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	00da      	lsls	r2, r3, #3
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	4413      	add	r3, r2
 800263a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800263e:	623b      	str	r3, [r7, #32]
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	2200      	movs	r2, #0
 8002644:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	4619      	mov	r1, r3
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f007 fbe6 	bl	8009e1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 82fa 	beq.w	8002c52 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002678:	82fb      	strh	r3, [r7, #22]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	441a      	add	r2, r3
 8002688:	8afb      	ldrh	r3, [r7, #22]
 800268a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800268e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800269a:	b29b      	uxth	r3, r3
 800269c:	8013      	strh	r3, [r2, #0]
 800269e:	e2d8      	b.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d021      	beq.n	80026ee <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	441a      	add	r2, r3
 80026d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80026da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	f040 82ac 	bne.w	8002c52 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002702:	441a      	add	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002710:	441a      	add	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	429a      	cmp	r2, r3
 8002720:	d30b      	bcc.n	800273a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6a1a      	ldr	r2, [r3, #32]
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002732:	1ad2      	subs	r2, r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	621a      	str	r2, [r3, #32]
 8002738:	e017      	b.n	800276a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002742:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002752:	e00a      	b.n	800276a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2200      	movs	r2, #0
 8002768:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	785b      	ldrb	r3, [r3, #1]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d165      	bne.n	800283e <HAL_PCD_EP_DB_Transmit+0x37e>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002780:	b29b      	uxth	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002786:	4413      	add	r3, r2
 8002788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	00da      	lsls	r2, r3, #3
 8002790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002792:	4413      	add	r3, r2
 8002794:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002798:	63bb      	str	r3, [r7, #56]	@ 0x38
 800279a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x308>
 80027b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c4:	801a      	strh	r2, [r3, #0]
 80027c6:	e057      	b.n	8002878 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80027c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80027ce:	d818      	bhi.n	8002802 <HAL_PCD_EP_DB_Transmit+0x342>
 80027d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <HAL_PCD_EP_DB_Transmit+0x32a>
 80027e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027e6:	3301      	adds	r3, #1
 80027e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	029b      	lsls	r3, r3, #10
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4313      	orrs	r3, r2
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fe:	801a      	strh	r2, [r3, #0]
 8002800:	e03a      	b.n	8002878 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002802:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800280a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <HAL_PCD_EP_DB_Transmit+0x35c>
 8002816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002818:	3b01      	subs	r3, #1
 800281a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800281c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29a      	uxth	r2, r3
 8002822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002824:	b29b      	uxth	r3, r3
 8002826:	029b      	lsls	r3, r3, #10
 8002828:	b29b      	uxth	r3, r3
 800282a:	4313      	orrs	r3, r2
 800282c:	b29b      	uxth	r3, r3
 800282e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002836:	b29a      	uxth	r2, r3
 8002838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283a:	801a      	strh	r2, [r3, #0]
 800283c:	e01c      	b.n	8002878 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d118      	bne.n	8002878 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	647b      	str	r3, [r7, #68]	@ 0x44
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002854:	b29b      	uxth	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800285a:	4413      	add	r3, r2
 800285c:	647b      	str	r3, [r7, #68]	@ 0x44
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	00da      	lsls	r2, r3, #3
 8002864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002866:	4413      	add	r3, r2
 8002868:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800286c:	643b      	str	r3, [r7, #64]	@ 0x40
 800286e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002872:	b29a      	uxth	r2, r3
 8002874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002876:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6959      	ldr	r1, [r3, #20]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	891a      	ldrh	r2, [r3, #8]
 8002884:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002888:	b29b      	uxth	r3, r3
 800288a:	f005 fc7c 	bl	8008186 <USB_WritePMA>
 800288e:	e1e0      	b.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002898:	b29b      	uxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	4413      	add	r3, r2
 80028aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d307      	bcc.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	699a      	ldr	r2, [r3, #24]
 80028c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80028cc:	1ad2      	subs	r2, r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	619a      	str	r2, [r3, #24]
 80028d2:	e002      	b.n	80028da <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 80c0 	bne.w	8002a64 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d126      	bne.n	800293a <HAL_PCD_EP_DB_Transmit+0x47a>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002900:	4413      	add	r3, r2
 8002902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	00da      	lsls	r2, r3, #3
 800290a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800290c:	4413      	add	r3, r2
 800290e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002912:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291e:	b29a      	uxth	r2, r3
 8002920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002922:	801a      	strh	r2, [r3, #0]
 8002924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800292e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002932:	b29a      	uxth	r2, r3
 8002934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002936:	801a      	strh	r2, [r3, #0]
 8002938:	e01a      	b.n	8002970 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	785b      	ldrb	r3, [r3, #1]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d116      	bne.n	8002970 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	667b      	str	r3, [r7, #100]	@ 0x64
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002950:	b29b      	uxth	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002956:	4413      	add	r3, r2
 8002958:	667b      	str	r3, [r7, #100]	@ 0x64
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	00da      	lsls	r2, r3, #3
 8002960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002962:	4413      	add	r3, r2
 8002964:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002968:	663b      	str	r3, [r7, #96]	@ 0x60
 800296a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800296c:	2200      	movs	r2, #0
 800296e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	677b      	str	r3, [r7, #116]	@ 0x74
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d12b      	bne.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x516>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800298c:	b29b      	uxth	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002992:	4413      	add	r3, r2
 8002994:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	00da      	lsls	r2, r3, #3
 800299c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800299e:	4413      	add	r3, r2
 80029a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80029a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	e017      	b.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x546>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	785b      	ldrb	r3, [r3, #1]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d113      	bne.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x546>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ec:	4413      	add	r3, r2
 80029ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	00da      	lsls	r2, r3, #3
 80029f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029f8:	4413      	add	r3, r2
 80029fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80029fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a02:	2200      	movs	r2, #0
 8002a04:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f007 fa06 	bl	8009e1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f040 811a 	bne.w	8002c52 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a38:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	441a      	add	r2, r3
 8002a4a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8002a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	8013      	strh	r3, [r2, #0]
 8002a62:	e0f6      	b.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d121      	bne.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a88:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002aa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	f040 80ca 	bne.w	8002c52 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002ac6:	441a      	add	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002ad4:	441a      	add	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	6a1a      	ldr	r2, [r3, #32]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d30b      	bcc.n	8002afe <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	6a1a      	ldr	r2, [r3, #32]
 8002af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af6:	1ad2      	subs	r2, r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	621a      	str	r2, [r3, #32]
 8002afc:	e017      	b.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d108      	bne.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002b06:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002b16:	e00a      	b.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2200      	movs	r2, #0
 8002b24:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	785b      	ldrb	r3, [r3, #1]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d165      	bne.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x748>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b50:	4413      	add	r3, r2
 8002b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	00da      	lsls	r2, r3, #3
 8002b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b72:	801a      	strh	r2, [r3, #0]
 8002b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8002b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	e054      	b.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b96:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b98:	d818      	bhi.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x70c>
 8002b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8002bae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	e037      	b.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x77c>
 8002bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bd0:	095b      	lsrs	r3, r3, #5
 8002bd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x726>
 8002be0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002be2:	3b01      	subs	r3, #1
 8002be4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	029b      	lsls	r3, r3, #10
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	e019      	b.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x77c>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	785b      	ldrb	r3, [r3, #1]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d115      	bne.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x77c>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1e:	4413      	add	r3, r2
 8002c20:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	00da      	lsls	r2, r3, #3
 8002c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002c30:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c3a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	6959      	ldr	r1, [r3, #20]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	895a      	ldrh	r2, [r3, #10]
 8002c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f005 fa9a 	bl	8008186 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c6c:	82bb      	strh	r3, [r7, #20]
 8002c6e:	8abb      	ldrh	r3, [r7, #20]
 8002c70:	f083 0310 	eor.w	r3, r3, #16
 8002c74:	82bb      	strh	r3, [r7, #20]
 8002c76:	8abb      	ldrh	r3, [r7, #20]
 8002c78:	f083 0320 	eor.w	r3, r3, #32
 8002c7c:	82bb      	strh	r3, [r7, #20]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	441a      	add	r2, r3
 8002c8c:	8abb      	ldrh	r3, [r7, #20]
 8002c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3790      	adds	r7, #144	@ 0x90
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	817b      	strh	r3, [r7, #10]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cbe:	897b      	ldrh	r3, [r7, #10]
 8002cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cca:	897b      	ldrh	r3, [r7, #10]
 8002ccc:	f003 0207 	and.w	r2, r3, #7
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	3310      	adds	r3, #16
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4413      	add	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e009      	b.n	8002cf6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ce2:	897a      	ldrh	r2, [r7, #10]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002cf6:	893b      	ldrh	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	80da      	strh	r2, [r3, #6]
 8002d0a:	e00b      	b.n	8002d24 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f001 b83a 	b.w	8003dce <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 816f 	beq.w	800304e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d70:	4bb5      	ldr	r3, [pc, #724]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d00c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d7c:	4bb2      	ldr	r3, [pc, #712]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d15c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x10e>
 8002d88:	4baf      	ldr	r3, [pc, #700]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d94:	d155      	bne.n	8002e42 <HAL_RCC_OscConfig+0x10e>
 8002d96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d9a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002daa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d102      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x94>
 8002dc2:	4ba1      	ldr	r3, [pc, #644]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	e015      	b.n	8002df4 <HAL_RCC_OscConfig+0xc0>
 8002dc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dcc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002ddc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002de0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002de4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002df0:	4b95      	ldr	r3, [pc, #596]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002df8:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002dfc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002e00:	fa92 f2a2 	rbit	r2, r2
 8002e04:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002e08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002e0c:	fab2 f282 	clz	r2, r2
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	f042 0220 	orr.w	r2, r2, #32
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f002 021f 	and.w	r2, r2, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8111 	beq.w	800304c <HAL_RCC_OscConfig+0x318>
 8002e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 8108 	bne.w	800304c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f000 bfc6 	b.w	8003dce <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12e>
 8002e54:	4b7c      	ldr	r3, [pc, #496]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a7b      	ldr	r2, [pc, #492]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	e036      	b.n	8002ed0 <HAL_RCC_OscConfig+0x19c>
 8002e62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x158>
 8002e72:	4b75      	ldr	r3, [pc, #468]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a74      	ldr	r2, [pc, #464]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b72      	ldr	r3, [pc, #456]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a71      	ldr	r2, [pc, #452]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002e84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e021      	b.n	8002ed0 <HAL_RCC_OscConfig+0x19c>
 8002e8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x184>
 8002e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a69      	ldr	r2, [pc, #420]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b67      	ldr	r3, [pc, #412]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a66      	ldr	r2, [pc, #408]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x19c>
 8002eb8:	4b63      	ldr	r3, [pc, #396]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a62      	ldr	r2, [pc, #392]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b60      	ldr	r3, [pc, #384]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5f      	ldr	r2, [pc, #380]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ece:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d059      	beq.n	8002f94 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fd ff9a 	bl	8000e18 <HAL_GetTick>
 8002ee4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eea:	f7fd ff95 	bl	8000e18 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	@ 0x64
 8002ef8:	d902      	bls.n	8002f00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	f000 bf67 	b.w	8003dce <HAL_RCC_OscConfig+0x109a>
 8002f00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f04:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002f14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d102      	bne.n	8002f32 <HAL_RCC_OscConfig+0x1fe>
 8002f2c:	4b46      	ldr	r3, [pc, #280]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_OscConfig+0x22a>
 8002f32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f36:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002f46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f4a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002f4e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f62:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002f66:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002f6a:	fa92 f2a2 	rbit	r2, r2
 8002f6e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002f72:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002f76:	fab2 f282 	clz	r2, r2
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	f042 0220 	orr.w	r2, r2, #32
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f002 021f 	and.w	r2, r2, #31
 8002f86:	2101      	movs	r1, #1
 8002f88:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0ab      	beq.n	8002eea <HAL_RCC_OscConfig+0x1b6>
 8002f92:	e05c      	b.n	800304e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fd ff40 	bl	8000e18 <HAL_GetTick>
 8002f98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9e:	f7fd ff3b 	bl	8000e18 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	@ 0x64
 8002fac:	d902      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	f000 bf0d 	b.w	8003dce <HAL_RCC_OscConfig+0x109a>
 8002fb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fb8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002fc8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d102      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2b2>
 8002fe0:	4b19      	ldr	r3, [pc, #100]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x2de>
 8002fe6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fea:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002ffa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ffe:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003002:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800300e:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <HAL_RCC_OscConfig+0x314>)
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003016:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800301a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800301e:	fa92 f2a2 	rbit	r2, r2
 8003022:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003026:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800302a:	fab2 f282 	clz	r2, r2
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	f042 0220 	orr.w	r2, r2, #32
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	f002 021f 	and.w	r2, r2, #31
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f202 	lsl.w	r2, r1, r2
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1ab      	bne.n	8002f9e <HAL_RCC_OscConfig+0x26a>
 8003046:	e002      	b.n	800304e <HAL_RCC_OscConfig+0x31a>
 8003048:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003052:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 817f 	beq.w	8003362 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003064:	4ba7      	ldr	r3, [pc, #668]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00c      	beq.n	800308a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003070:	4ba4      	ldr	r3, [pc, #656]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b08      	cmp	r3, #8
 800307a:	d173      	bne.n	8003164 <HAL_RCC_OscConfig+0x430>
 800307c:	4ba1      	ldr	r3, [pc, #644]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003088:	d16c      	bne.n	8003164 <HAL_RCC_OscConfig+0x430>
 800308a:	2302      	movs	r3, #2
 800308c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800309c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d102      	bne.n	80030ba <HAL_RCC_OscConfig+0x386>
 80030b4:	4b93      	ldr	r3, [pc, #588]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	e013      	b.n	80030e2 <HAL_RCC_OscConfig+0x3ae>
 80030ba:	2302      	movs	r3, #2
 80030bc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80030cc:	2302      	movs	r3, #2
 80030ce:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80030d2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80030de:	4b89      	ldr	r3, [pc, #548]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	2202      	movs	r2, #2
 80030e4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80030e8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80030ec:	fa92 f2a2 	rbit	r2, r2
 80030f0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80030f4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80030f8:	fab2 f282 	clz	r2, r2
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	f042 0220 	orr.w	r2, r2, #32
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	f002 021f 	and.w	r2, r2, #31
 8003108:	2101      	movs	r1, #1
 800310a:	fa01 f202 	lsl.w	r2, r1, r2
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCC_OscConfig+0x3f6>
 8003114:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003118:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d002      	beq.n	800312a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f000 be52 	b.w	8003dce <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312a:	4b76      	ldr	r3, [pc, #472]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003132:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003136:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	21f8      	movs	r1, #248	@ 0xf8
 8003140:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003148:	fa91 f1a1 	rbit	r1, r1
 800314c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003150:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003154:	fab1 f181 	clz	r1, r1
 8003158:	b2c9      	uxtb	r1, r1
 800315a:	408b      	lsls	r3, r1
 800315c:	4969      	ldr	r1, [pc, #420]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003162:	e0fe      	b.n	8003362 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003168:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8088 	beq.w	8003286 <HAL_RCC_OscConfig+0x552>
 8003176:	2301      	movs	r3, #1
 8003178:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003188:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003196:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	461a      	mov	r2, r3
 800319e:	2301      	movs	r3, #1
 80031a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a2:	f7fd fe39 	bl	8000e18 <HAL_GetTick>
 80031a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ac:	f7fd fe34 	bl	8000e18 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d902      	bls.n	80031c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	f000 be06 	b.w	8003dce <HAL_RCC_OscConfig+0x109a>
 80031c2:	2302      	movs	r3, #2
 80031c4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80031d4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_OscConfig+0x4be>
 80031ec:	4b45      	ldr	r3, [pc, #276]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	e013      	b.n	800321a <HAL_RCC_OscConfig+0x4e6>
 80031f2:	2302      	movs	r3, #2
 80031f4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003204:	2302      	movs	r3, #2
 8003206:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800320a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003216:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	2202      	movs	r2, #2
 800321c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003220:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003224:	fa92 f2a2 	rbit	r2, r2
 8003228:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800322c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003230:	fab2 f282 	clz	r2, r2
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	f042 0220 	orr.w	r2, r2, #32
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	f002 021f 	and.w	r2, r2, #31
 8003240:	2101      	movs	r1, #1
 8003242:	fa01 f202 	lsl.w	r2, r1, r2
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0af      	beq.n	80031ac <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b2d      	ldr	r3, [pc, #180]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003258:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	21f8      	movs	r1, #248	@ 0xf8
 8003262:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800326a:	fa91 f1a1 	rbit	r1, r1
 800326e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003272:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003276:	fab1 f181 	clz	r1, r1
 800327a:	b2c9      	uxtb	r1, r1
 800327c:	408b      	lsls	r3, r1
 800327e:	4921      	ldr	r1, [pc, #132]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]
 8003284:	e06d      	b.n	8003362 <HAL_RCC_OscConfig+0x62e>
 8003286:	2301      	movs	r3, #1
 8003288:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003298:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032a6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	461a      	mov	r2, r3
 80032ae:	2300      	movs	r3, #0
 80032b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fd fdb1 	bl	8000e18 <HAL_GetTick>
 80032b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fd fdac 	bl	8000e18 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d902      	bls.n	80032d2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	f000 bd7e 	b.w	8003dce <HAL_RCC_OscConfig+0x109a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80032e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <HAL_RCC_OscConfig+0x5d4>
 80032fc:	4b01      	ldr	r3, [pc, #4]	@ (8003304 <HAL_RCC_OscConfig+0x5d0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	e016      	b.n	8003330 <HAL_RCC_OscConfig+0x5fc>
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	2302      	movs	r3, #2
 800330a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800331a:	2302      	movs	r3, #2
 800331c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003320:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800332c:	4bbf      	ldr	r3, [pc, #764]	@ (800362c <HAL_RCC_OscConfig+0x8f8>)
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	2202      	movs	r2, #2
 8003332:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003336:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800333a:	fa92 f2a2 	rbit	r2, r2
 800333e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003342:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003346:	fab2 f282 	clz	r2, r2
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	f042 0220 	orr.w	r2, r2, #32
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f002 021f 	and.w	r2, r2, #31
 8003356:	2101      	movs	r1, #1
 8003358:	fa01 f202 	lsl.w	r2, r1, r2
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ac      	bne.n	80032bc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003362:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003366:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8113 	beq.w	800359e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800337c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d07c      	beq.n	8003482 <HAL_RCC_OscConfig+0x74e>
 8003388:	2301      	movs	r3, #1
 800338a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800339a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	4ba2      	ldr	r3, [pc, #648]	@ (8003630 <HAL_RCC_OscConfig+0x8fc>)
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	461a      	mov	r2, r3
 80033ae:	2301      	movs	r3, #1
 80033b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b2:	f7fd fd31 	bl	8000e18 <HAL_GetTick>
 80033b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fd fd2c 	bl	8000e18 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d902      	bls.n	80033d2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	f000 bcfe 	b.w	8003dce <HAL_RCC_OscConfig+0x109a>
 80033d2:	2302      	movs	r3, #2
 80033d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033dc:	fa93 f2a3 	rbit	r2, r3
 80033e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033f2:	2202      	movs	r2, #2
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	fa93 f2a3 	rbit	r2, r3
 8003404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003412:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003416:	2202      	movs	r2, #2
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800341e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	fa93 f2a3 	rbit	r2, r3
 8003428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800342c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003430:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	4b7e      	ldr	r3, [pc, #504]	@ (800362c <HAL_RCC_OscConfig+0x8f8>)
 8003434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800343a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800343e:	2102      	movs	r1, #2
 8003440:	6019      	str	r1, [r3, #0]
 8003442:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003446:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f1a3 	rbit	r1, r3
 8003450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003454:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003458:	6019      	str	r1, [r3, #0]
  return result;
 800345a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800345e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d09d      	beq.n	80033bc <HAL_RCC_OscConfig+0x688>
 8003480:	e08d      	b.n	800359e <HAL_RCC_OscConfig+0x86a>
 8003482:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003486:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003492:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fa93 f2a3 	rbit	r2, r3
 800349c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80034a4:	601a      	str	r2, [r3, #0]
  return result;
 80034a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80034ae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	4b5d      	ldr	r3, [pc, #372]	@ (8003630 <HAL_RCC_OscConfig+0x8fc>)
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	2300      	movs	r3, #0
 80034c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c4:	f7fd fca8 	bl	8000e18 <HAL_GetTick>
 80034c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ce:	f7fd fca3 	bl	8000e18 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d902      	bls.n	80034e4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	f000 bc75 	b.w	8003dce <HAL_RCC_OscConfig+0x109a>
 80034e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80034ec:	2202      	movs	r2, #2
 80034ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003502:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800350c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003510:	2202      	movs	r2, #2
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003518:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003526:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003530:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003534:	2202      	movs	r2, #2
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800353c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	fa93 f2a3 	rbit	r2, r3
 8003546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800354a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800354e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	4b36      	ldr	r3, [pc, #216]	@ (800362c <HAL_RCC_OscConfig+0x8f8>)
 8003552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003558:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800355c:	2102      	movs	r1, #2
 800355e:	6019      	str	r1, [r3, #0]
 8003560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003564:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	fa93 f1a3 	rbit	r1, r3
 800356e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003572:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003576:	6019      	str	r1, [r3, #0]
  return result;
 8003578:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800357c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d197      	bne.n	80034ce <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 81a5 	beq.w	80038fe <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ba:	4b1c      	ldr	r3, [pc, #112]	@ (800362c <HAL_RCC_OscConfig+0x8f8>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d116      	bne.n	80035f4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c6:	4b19      	ldr	r3, [pc, #100]	@ (800362c <HAL_RCC_OscConfig+0x8f8>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4a18      	ldr	r2, [pc, #96]	@ (800362c <HAL_RCC_OscConfig+0x8f8>)
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d0:	61d3      	str	r3, [r2, #28]
 80035d2:	4b16      	ldr	r3, [pc, #88]	@ (800362c <HAL_RCC_OscConfig+0x8f8>)
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80035da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003634 <HAL_RCC_OscConfig+0x900>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d121      	bne.n	8003644 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <HAL_RCC_OscConfig+0x900>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a0b      	ldr	r2, [pc, #44]	@ (8003634 <HAL_RCC_OscConfig+0x900>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360c:	f7fd fc04 	bl	8000e18 <HAL_GetTick>
 8003610:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	e010      	b.n	8003638 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fd fbff 	bl	8000e18 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	@ 0x64
 8003624:	d908      	bls.n	8003638 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e3d1      	b.n	8003dce <HAL_RCC_OscConfig+0x109a>
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	10908120 	.word	0x10908120
 8003634:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b8d      	ldr	r3, [pc, #564]	@ (8003870 <HAL_RCC_OscConfig+0xb3c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0e8      	beq.n	8003616 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003648:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x92e>
 8003654:	4b87      	ldr	r3, [pc, #540]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a86      	ldr	r2, [pc, #536]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	e035      	b.n	80036ce <HAL_RCC_OscConfig+0x99a>
 8003662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003666:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x958>
 8003672:	4b80      	ldr	r3, [pc, #512]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4a7f      	ldr	r2, [pc, #508]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6213      	str	r3, [r2, #32]
 800367e:	4b7d      	ldr	r3, [pc, #500]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4a7c      	ldr	r2, [pc, #496]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	6213      	str	r3, [r2, #32]
 800368a:	e020      	b.n	80036ce <HAL_RCC_OscConfig+0x99a>
 800368c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003690:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b05      	cmp	r3, #5
 800369a:	d10c      	bne.n	80036b6 <HAL_RCC_OscConfig+0x982>
 800369c:	4b75      	ldr	r3, [pc, #468]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a74      	ldr	r2, [pc, #464]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 80036a2:	f043 0304 	orr.w	r3, r3, #4
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	4b72      	ldr	r3, [pc, #456]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	4a71      	ldr	r2, [pc, #452]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6213      	str	r3, [r2, #32]
 80036b4:	e00b      	b.n	80036ce <HAL_RCC_OscConfig+0x99a>
 80036b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	6213      	str	r3, [r2, #32]
 80036c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	4a6b      	ldr	r2, [pc, #428]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 8081 	beq.w	80037e2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e0:	f7fd fb9a 	bl	8000e18 <HAL_GetTick>
 80036e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	e00b      	b.n	8003702 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fd fb95 	bl	8000e18 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e365      	b.n	8003dce <HAL_RCC_OscConfig+0x109a>
 8003702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003706:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800370a:	2202      	movs	r2, #2
 800370c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003712:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	fa93 f2a3 	rbit	r2, r3
 800371c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003720:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800372a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800372e:	2202      	movs	r2, #2
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003736:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	fa93 f2a3 	rbit	r2, r3
 8003740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003744:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003748:	601a      	str	r2, [r3, #0]
  return result;
 800374a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800374e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003752:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f043 0302 	orr.w	r3, r3, #2
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d102      	bne.n	800376e <HAL_RCC_OscConfig+0xa3a>
 8003768:	4b42      	ldr	r3, [pc, #264]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	e013      	b.n	8003796 <HAL_RCC_OscConfig+0xa62>
 800376e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003772:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003776:	2202      	movs	r2, #2
 8003778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800377e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	fa93 f2a3 	rbit	r2, r3
 8003788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800378c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	4b38      	ldr	r3, [pc, #224]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800379a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800379e:	2102      	movs	r1, #2
 80037a0:	6011      	str	r1, [r2, #0]
 80037a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037a6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	fa92 f1a2 	rbit	r1, r2
 80037b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037b4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80037b8:	6011      	str	r1, [r2, #0]
  return result;
 80037ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037be:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	fab2 f282 	clz	r2, r2
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	f002 021f 	and.w	r2, r2, #31
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f202 	lsl.w	r2, r1, r2
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d084      	beq.n	80036ea <HAL_RCC_OscConfig+0x9b6>
 80037e0:	e083      	b.n	80038ea <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e2:	f7fd fb19 	bl	8000e18 <HAL_GetTick>
 80037e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ea:	e00b      	b.n	8003804 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ec:	f7fd fb14 	bl	8000e18 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e2e4      	b.n	8003dce <HAL_RCC_OscConfig+0x109a>
 8003804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003808:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800380c:	2202      	movs	r2, #2
 800380e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003814:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f2a3 	rbit	r2, r3
 800381e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003822:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800382c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003830:	2202      	movs	r2, #2
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003838:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	fa93 f2a3 	rbit	r2, r3
 8003842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003846:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800384a:	601a      	str	r2, [r3, #0]
  return result;
 800384c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003850:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003854:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d106      	bne.n	8003878 <HAL_RCC_OscConfig+0xb44>
 800386a:	4b02      	ldr	r3, [pc, #8]	@ (8003874 <HAL_RCC_OscConfig+0xb40>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	e017      	b.n	80038a0 <HAL_RCC_OscConfig+0xb6c>
 8003870:	40007000 	.word	0x40007000
 8003874:	40021000 	.word	0x40021000
 8003878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800387c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003880:	2202      	movs	r2, #2
 8003882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003888:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	fa93 f2a3 	rbit	r2, r3
 8003892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003896:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	4bb3      	ldr	r3, [pc, #716]	@ (8003b6c <HAL_RCC_OscConfig+0xe38>)
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038a4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80038a8:	2102      	movs	r1, #2
 80038aa:	6011      	str	r1, [r2, #0]
 80038ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038b0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	fa92 f1a2 	rbit	r1, r2
 80038ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038be:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80038c2:	6011      	str	r1, [r2, #0]
  return result;
 80038c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038c8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	fab2 f282 	clz	r2, r2
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	f002 021f 	and.w	r2, r2, #31
 80038de:	2101      	movs	r1, #1
 80038e0:	fa01 f202 	lsl.w	r2, r1, r2
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d180      	bne.n	80037ec <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038ea:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f2:	4b9e      	ldr	r3, [pc, #632]	@ (8003b6c <HAL_RCC_OscConfig+0xe38>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	4a9d      	ldr	r2, [pc, #628]	@ (8003b6c <HAL_RCC_OscConfig+0xe38>)
 80038f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038fc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003902:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 825e 	beq.w	8003dcc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003910:	4b96      	ldr	r3, [pc, #600]	@ (8003b6c <HAL_RCC_OscConfig+0xe38>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 030c 	and.w	r3, r3, #12
 8003918:	2b08      	cmp	r3, #8
 800391a:	f000 821f 	beq.w	8003d5c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003922:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b02      	cmp	r3, #2
 800392c:	f040 8170 	bne.w	8003c10 <HAL_RCC_OscConfig+0xedc>
 8003930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003934:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003938:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800393c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003942:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	fa93 f2a3 	rbit	r2, r3
 800394c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003950:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003954:	601a      	str	r2, [r3, #0]
  return result;
 8003956:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800395a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800395e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800396a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	461a      	mov	r2, r3
 8003972:	2300      	movs	r3, #0
 8003974:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003976:	f7fd fa4f 	bl	8000e18 <HAL_GetTick>
 800397a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397e:	e009      	b.n	8003994 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003980:	f7fd fa4a 	bl	8000e18 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e21c      	b.n	8003dce <HAL_RCC_OscConfig+0x109a>
 8003994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003998:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800399c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	fa93 f2a3 	rbit	r2, r3
 80039b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039b4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80039b8:	601a      	str	r2, [r3, #0]
  return result;
 80039ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039be:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80039c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d102      	bne.n	80039de <HAL_RCC_OscConfig+0xcaa>
 80039d8:	4b64      	ldr	r3, [pc, #400]	@ (8003b6c <HAL_RCC_OscConfig+0xe38>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	e027      	b.n	8003a2e <HAL_RCC_OscConfig+0xcfa>
 80039de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039e2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80039e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039f0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	fa93 f2a3 	rbit	r2, r3
 80039fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039fe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a08:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003a0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a16:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	fa93 f2a3 	rbit	r2, r3
 8003a20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a24:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	4b50      	ldr	r3, [pc, #320]	@ (8003b6c <HAL_RCC_OscConfig+0xe38>)
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a32:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003a36:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003a3a:	6011      	str	r1, [r2, #0]
 8003a3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a40:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	fa92 f1a2 	rbit	r1, r2
 8003a4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a4e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003a52:	6011      	str	r1, [r2, #0]
  return result;
 8003a54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a58:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	fab2 f282 	clz	r2, r2
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	f042 0220 	orr.w	r2, r2, #32
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	f002 021f 	and.w	r2, r2, #31
 8003a6e:	2101      	movs	r1, #1
 8003a70:	fa01 f202 	lsl.w	r2, r1, r2
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d182      	bne.n	8003980 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b6c <HAL_RCC_OscConfig+0xe38>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	f023 020f 	bic.w	r2, r3, #15
 8003a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	4937      	ldr	r1, [pc, #220]	@ (8003b6c <HAL_RCC_OscConfig+0xe38>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003a94:	4b35      	ldr	r3, [pc, #212]	@ (8003b6c <HAL_RCC_OscConfig+0xe38>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aa0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a19      	ldr	r1, [r3, #32]
 8003aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	492d      	ldr	r1, [pc, #180]	@ (8003b6c <HAL_RCC_OscConfig+0xe38>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
 8003abc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ac0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003ac4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ace:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	fa93 f2a3 	rbit	r2, r3
 8003ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003adc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003ae0:	601a      	str	r2, [r3, #0]
  return result;
 8003ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003aea:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003af6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	461a      	mov	r2, r3
 8003afe:	2301      	movs	r3, #1
 8003b00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b02:	f7fd f989 	bl	8000e18 <HAL_GetTick>
 8003b06:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b0a:	e009      	b.n	8003b20 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fd f984 	bl	8000e18 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e156      	b.n	8003dce <HAL_RCC_OscConfig+0x109a>
 8003b20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b24:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003b28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b32:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	fa93 f2a3 	rbit	r2, r3
 8003b3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b40:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003b44:	601a      	str	r2, [r3, #0]
  return result;
 8003b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b4a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003b4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <HAL_RCC_OscConfig+0xe3c>
 8003b64:	4b01      	ldr	r3, [pc, #4]	@ (8003b6c <HAL_RCC_OscConfig+0xe38>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	e02a      	b.n	8003bc0 <HAL_RCC_OscConfig+0xe8c>
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b74:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003b78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b82:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	fa93 f2a3 	rbit	r2, r3
 8003b8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b90:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b9a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003b9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ba8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	fa93 f2a3 	rbit	r2, r3
 8003bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	4b86      	ldr	r3, [pc, #536]	@ (8003dd8 <HAL_RCC_OscConfig+0x10a4>)
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bc4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003bc8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003bcc:	6011      	str	r1, [r2, #0]
 8003bce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bd2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	fa92 f1a2 	rbit	r1, r2
 8003bdc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003be0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003be4:	6011      	str	r1, [r2, #0]
  return result;
 8003be6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bea:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	fab2 f282 	clz	r2, r2
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	f042 0220 	orr.w	r2, r2, #32
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	f002 021f 	and.w	r2, r2, #31
 8003c00:	2101      	movs	r1, #1
 8003c02:	fa01 f202 	lsl.w	r2, r1, r2
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f43f af7f 	beq.w	8003b0c <HAL_RCC_OscConfig+0xdd8>
 8003c0e:	e0dd      	b.n	8003dcc <HAL_RCC_OscConfig+0x1098>
 8003c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c14:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003c18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c22:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	fa93 f2a3 	rbit	r2, r3
 8003c2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c30:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003c34:	601a      	str	r2, [r3, #0]
  return result;
 8003c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c3a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003c3e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c40:	fab3 f383 	clz	r3, r3
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c4a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	2300      	movs	r3, #0
 8003c54:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fd f8df 	bl	8000e18 <HAL_GetTick>
 8003c5a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5e:	e009      	b.n	8003c74 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c60:	f7fd f8da 	bl	8000e18 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e0ac      	b.n	8003dce <HAL_RCC_OscConfig+0x109a>
 8003c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c78:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003c7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c86:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	fa93 f2a3 	rbit	r2, r3
 8003c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c94:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003c98:	601a      	str	r2, [r3, #0]
  return result;
 8003c9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c9e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003ca2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca4:	fab3 f383 	clz	r3, r3
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d102      	bne.n	8003cbe <HAL_RCC_OscConfig+0xf8a>
 8003cb8:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <HAL_RCC_OscConfig+0x10a4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	e027      	b.n	8003d0e <HAL_RCC_OscConfig+0xfda>
 8003cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cc2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003cc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cd0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	fa93 f2a3 	rbit	r2, r3
 8003cda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cde:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ce8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003cec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cf6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	fa93 f2a3 	rbit	r2, r3
 8003d00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d04:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	4b33      	ldr	r3, [pc, #204]	@ (8003dd8 <HAL_RCC_OscConfig+0x10a4>)
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d12:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003d16:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003d1a:	6011      	str	r1, [r2, #0]
 8003d1c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d20:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	fa92 f1a2 	rbit	r1, r2
 8003d2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d2e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003d32:	6011      	str	r1, [r2, #0]
  return result;
 8003d34:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d38:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	fab2 f282 	clz	r2, r2
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	f042 0220 	orr.w	r2, r2, #32
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	f002 021f 	and.w	r2, r2, #31
 8003d4e:	2101      	movs	r1, #1
 8003d50:	fa01 f202 	lsl.w	r2, r1, r2
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d182      	bne.n	8003c60 <HAL_RCC_OscConfig+0xf2c>
 8003d5a:	e037      	b.n	8003dcc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e02e      	b.n	8003dce <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d70:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <HAL_RCC_OscConfig+0x10a4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003d78:	4b17      	ldr	r3, [pc, #92]	@ (8003dd8 <HAL_RCC_OscConfig+0x10a4>)
 8003d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d84:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d117      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003d98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d9c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003da0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003da4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d10b      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003db0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003db4:	f003 020f 	and.w	r2, r3, #15
 8003db8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000

08003ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b09e      	sub	sp, #120	@ 0x78
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e162      	b.n	80040ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df4:	4b90      	ldr	r3, [pc, #576]	@ (8004038 <HAL_RCC_ClockConfig+0x25c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d910      	bls.n	8003e24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b8d      	ldr	r3, [pc, #564]	@ (8004038 <HAL_RCC_ClockConfig+0x25c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 0207 	bic.w	r2, r3, #7
 8003e0a:	498b      	ldr	r1, [pc, #556]	@ (8004038 <HAL_RCC_ClockConfig+0x25c>)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b89      	ldr	r3, [pc, #548]	@ (8004038 <HAL_RCC_ClockConfig+0x25c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e14a      	b.n	80040ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e30:	4b82      	ldr	r3, [pc, #520]	@ (800403c <HAL_RCC_ClockConfig+0x260>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	497f      	ldr	r1, [pc, #508]	@ (800403c <HAL_RCC_ClockConfig+0x260>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 80dc 	beq.w	8004008 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d13c      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xf6>
 8003e58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e5c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e60:	fa93 f3a3 	rbit	r3, r3
 8003e64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003e66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e68:	fab3 f383 	clz	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d102      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xa6>
 8003e7c:	4b6f      	ldr	r3, [pc, #444]	@ (800403c <HAL_RCC_ClockConfig+0x260>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	e00f      	b.n	8003ea2 <HAL_RCC_ClockConfig+0xc6>
 8003e82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e94:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e9e:	4b67      	ldr	r3, [pc, #412]	@ (800403c <HAL_RCC_ClockConfig+0x260>)
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ea6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ea8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eaa:	fa92 f2a2 	rbit	r2, r2
 8003eae:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003eb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003eb2:	fab2 f282 	clz	r2, r2
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	f042 0220 	orr.w	r2, r2, #32
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	f002 021f 	and.w	r2, r2, #31
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d17b      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0f3      	b.n	80040ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d13c      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x178>
 8003eda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ede:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d102      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x128>
 8003efe:	4b4f      	ldr	r3, [pc, #316]	@ (800403c <HAL_RCC_ClockConfig+0x260>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	e00f      	b.n	8003f24 <HAL_RCC_ClockConfig+0x148>
 8003f04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f16:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1a:	fa93 f3a3 	rbit	r3, r3
 8003f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f20:	4b46      	ldr	r3, [pc, #280]	@ (800403c <HAL_RCC_ClockConfig+0x260>)
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f28:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003f2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f2c:	fa92 f2a2 	rbit	r2, r2
 8003f30:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003f32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f34:	fab2 f282 	clz	r2, r2
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	f042 0220 	orr.w	r2, r2, #32
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	f002 021f 	and.w	r2, r2, #31
 8003f44:	2101      	movs	r1, #1
 8003f46:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d13a      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0b2      	b.n	80040ba <HAL_RCC_ClockConfig+0x2de>
 8003f54:	2302      	movs	r3, #2
 8003f56:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f62:	fab3 f383 	clz	r3, r3
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d102      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x1a0>
 8003f76:	4b31      	ldr	r3, [pc, #196]	@ (800403c <HAL_RCC_ClockConfig+0x260>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	e00d      	b.n	8003f98 <HAL_RCC_ClockConfig+0x1bc>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f82:	fa93 f3a3 	rbit	r3, r3
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f88:	2302      	movs	r3, #2
 8003f8a:	623b      	str	r3, [r7, #32]
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	4b29      	ldr	r3, [pc, #164]	@ (800403c <HAL_RCC_ClockConfig+0x260>)
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	2202      	movs	r2, #2
 8003f9a:	61ba      	str	r2, [r7, #24]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	fa92 f2a2 	rbit	r2, r2
 8003fa2:	617a      	str	r2, [r7, #20]
  return result;
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	fab2 f282 	clz	r2, r2
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	f042 0220 	orr.w	r2, r2, #32
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	f002 021f 	and.w	r2, r2, #31
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e079      	b.n	80040ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800403c <HAL_RCC_ClockConfig+0x260>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f023 0203 	bic.w	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	491a      	ldr	r1, [pc, #104]	@ (800403c <HAL_RCC_ClockConfig+0x260>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fd8:	f7fc ff1e 	bl	8000e18 <HAL_GetTick>
 8003fdc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe0:	f7fc ff1a 	bl	8000e18 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e061      	b.n	80040ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	4b11      	ldr	r3, [pc, #68]	@ (800403c <HAL_RCC_ClockConfig+0x260>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 020c 	and.w	r2, r3, #12
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	429a      	cmp	r2, r3
 8004006:	d1eb      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004008:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_RCC_ClockConfig+0x25c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d214      	bcs.n	8004040 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <HAL_RCC_ClockConfig+0x25c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 0207 	bic.w	r2, r3, #7
 800401e:	4906      	ldr	r1, [pc, #24]	@ (8004038 <HAL_RCC_ClockConfig+0x25c>)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b04      	ldr	r3, [pc, #16]	@ (8004038 <HAL_RCC_ClockConfig+0x25c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d005      	beq.n	8004040 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e040      	b.n	80040ba <HAL_RCC_ClockConfig+0x2de>
 8004038:	40022000 	.word	0x40022000
 800403c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800404c:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <HAL_RCC_ClockConfig+0x2e8>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	491a      	ldr	r1, [pc, #104]	@ (80040c4 <HAL_RCC_ClockConfig+0x2e8>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406a:	4b16      	ldr	r3, [pc, #88]	@ (80040c4 <HAL_RCC_ClockConfig+0x2e8>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4912      	ldr	r1, [pc, #72]	@ (80040c4 <HAL_RCC_ClockConfig+0x2e8>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800407e:	f000 f829 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 8004082:	4601      	mov	r1, r0
 8004084:	4b0f      	ldr	r3, [pc, #60]	@ (80040c4 <HAL_RCC_ClockConfig+0x2e8>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800408c:	22f0      	movs	r2, #240	@ 0xf0
 800408e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	fa92 f2a2 	rbit	r2, r2
 8004096:	60fa      	str	r2, [r7, #12]
  return result;
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	fab2 f282 	clz	r2, r2
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	40d3      	lsrs	r3, r2
 80040a2:	4a09      	ldr	r2, [pc, #36]	@ (80040c8 <HAL_RCC_ClockConfig+0x2ec>)
 80040a4:	5cd3      	ldrb	r3, [r2, r3]
 80040a6:	fa21 f303 	lsr.w	r3, r1, r3
 80040aa:	4a08      	ldr	r2, [pc, #32]	@ (80040cc <HAL_RCC_ClockConfig+0x2f0>)
 80040ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80040ae:	4b08      	ldr	r3, [pc, #32]	@ (80040d0 <HAL_RCC_ClockConfig+0x2f4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fc fe6c 	bl	8000d90 <HAL_InitTick>
  
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3778      	adds	r7, #120	@ 0x78
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	0800ad90 	.word	0x0800ad90
 80040cc:	20000004 	.word	0x20000004
 80040d0:	20000008 	.word	0x20000008

080040d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80040ee:	4b1f      	ldr	r3, [pc, #124]	@ (800416c <HAL_RCC_GetSysClockFreq+0x98>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d002      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x30>
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d003      	beq.n	800410a <HAL_RCC_GetSysClockFreq+0x36>
 8004102:	e029      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004104:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004106:	613b      	str	r3, [r7, #16]
      break;
 8004108:	e029      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	0c9b      	lsrs	r3, r3, #18
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	4a18      	ldr	r2, [pc, #96]	@ (8004174 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004114:	5cd3      	ldrb	r3, [r2, r3]
 8004116:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004118:	4b14      	ldr	r3, [pc, #80]	@ (800416c <HAL_RCC_GetSysClockFreq+0x98>)
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	4a15      	ldr	r2, [pc, #84]	@ (8004178 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004122:	5cd3      	ldrb	r3, [r2, r3]
 8004124:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004130:	4a0f      	ldr	r2, [pc, #60]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	fbb2 f2f3 	udiv	r2, r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	e007      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004142:	4a0b      	ldr	r2, [pc, #44]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	fbb2 f2f3 	udiv	r2, r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	fb02 f303 	mul.w	r3, r2, r3
 8004150:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	613b      	str	r3, [r7, #16]
      break;
 8004156:	e002      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x9c>)
 800415a:	613b      	str	r3, [r7, #16]
      break;
 800415c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800415e:	693b      	ldr	r3, [r7, #16]
}
 8004160:	4618      	mov	r0, r3
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	40021000 	.word	0x40021000
 8004170:	007a1200 	.word	0x007a1200
 8004174:	0800ada0 	.word	0x0800ada0
 8004178:	0800adb0 	.word	0x0800adb0

0800417c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b092      	sub	sp, #72	@ 0x48
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800418c:	2300      	movs	r3, #0
 800418e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80d4 	beq.w	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a0:	4b4e      	ldr	r3, [pc, #312]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10e      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	4b4b      	ldr	r3, [pc, #300]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	4a4a      	ldr	r2, [pc, #296]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b6:	61d3      	str	r3, [r2, #28]
 80041b8:	4b48      	ldr	r3, [pc, #288]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	4b45      	ldr	r3, [pc, #276]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d118      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d6:	4b42      	ldr	r3, [pc, #264]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a41      	ldr	r2, [pc, #260]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e2:	f7fc fe19 	bl	8000e18 <HAL_GetTick>
 80041e6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e8:	e008      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ea:	f7fc fe15 	bl	8000e18 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b64      	cmp	r3, #100	@ 0x64
 80041f6:	d901      	bls.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e1d6      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b38      	ldr	r3, [pc, #224]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004208:	4b34      	ldr	r3, [pc, #208]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004210:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8084 	beq.w	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004222:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004224:	429a      	cmp	r2, r3
 8004226:	d07c      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004228:	4b2c      	ldr	r3, [pc, #176]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004232:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004236:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	4b26      	ldr	r3, [pc, #152]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	461a      	mov	r2, r3
 8004252:	2301      	movs	r3, #1
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800425a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	4b1d      	ldr	r3, [pc, #116]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	461a      	mov	r2, r3
 8004276:	2300      	movs	r3, #0
 8004278:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800427a:	4a18      	ldr	r2, [pc, #96]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d04b      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428a:	f7fc fdc5 	bl	8000e18 <HAL_GetTick>
 800428e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004290:	e00a      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fc fdc1 	bl	8000e18 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e180      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042a8:	2302      	movs	r3, #2
 80042aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b4:	2302      	movs	r3, #2
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	61fb      	str	r3, [r7, #28]
  return result;
 80042c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d108      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042d6:	4b01      	ldr	r3, [pc, #4]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	e00d      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40007000 	.word	0x40007000
 80042e4:	10908100 	.word	0x10908100
 80042e8:	2302      	movs	r3, #2
 80042ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	4b9a      	ldr	r3, [pc, #616]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	2202      	movs	r2, #2
 80042fa:	613a      	str	r2, [r7, #16]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	fa92 f2a2 	rbit	r2, r2
 8004302:	60fa      	str	r2, [r7, #12]
  return result;
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	fab2 f282 	clz	r2, r2
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	f002 021f 	and.w	r2, r2, #31
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f202 	lsl.w	r2, r1, r2
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0b7      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004322:	4b8f      	ldr	r3, [pc, #572]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	498c      	ldr	r1, [pc, #560]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004330:	4313      	orrs	r3, r2
 8004332:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004334:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004338:	2b01      	cmp	r3, #1
 800433a:	d105      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433c:	4b88      	ldr	r3, [pc, #544]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	4a87      	ldr	r2, [pc, #540]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004346:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004354:	4b82      	ldr	r3, [pc, #520]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004358:	f023 0203 	bic.w	r2, r3, #3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	497f      	ldr	r1, [pc, #508]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004362:	4313      	orrs	r3, r2
 8004364:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004372:	4b7b      	ldr	r3, [pc, #492]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	4978      	ldr	r1, [pc, #480]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004380:	4313      	orrs	r3, r2
 8004382:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004390:	4b73      	ldr	r3, [pc, #460]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4970      	ldr	r1, [pc, #448]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b2:	f023 0210 	bic.w	r2, r3, #16
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	4969      	ldr	r1, [pc, #420]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043cc:	4b64      	ldr	r3, [pc, #400]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	4961      	ldr	r1, [pc, #388]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f023 0220 	bic.w	r2, r3, #32
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	495a      	ldr	r1, [pc, #360]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004408:	4b55      	ldr	r3, [pc, #340]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	4952      	ldr	r1, [pc, #328]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004416:	4313      	orrs	r3, r2
 8004418:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d008      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004426:	4b4e      	ldr	r3, [pc, #312]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	494b      	ldr	r1, [pc, #300]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004434:	4313      	orrs	r3, r2
 8004436:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004444:	4b46      	ldr	r3, [pc, #280]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	4943      	ldr	r1, [pc, #268]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004462:	4b3f      	ldr	r3, [pc, #252]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446e:	493c      	ldr	r1, [pc, #240]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004480:	4b37      	ldr	r3, [pc, #220]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	4934      	ldr	r1, [pc, #208]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800448e:	4313      	orrs	r3, r2
 8004490:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d008      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800449e:	4b30      	ldr	r3, [pc, #192]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044aa:	492d      	ldr	r1, [pc, #180]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044bc:	4b28      	ldr	r3, [pc, #160]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c8:	4925      	ldr	r1, [pc, #148]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80044da:	4b21      	ldr	r3, [pc, #132]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e6:	491e      	ldr	r1, [pc, #120]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80044f8:	4b19      	ldr	r3, [pc, #100]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	4916      	ldr	r1, [pc, #88]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004506:	4313      	orrs	r3, r2
 8004508:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004516:	4b12      	ldr	r3, [pc, #72]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004522:	490f      	ldr	r1, [pc, #60]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004524:	4313      	orrs	r3, r2
 8004526:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004534:	4b0a      	ldr	r3, [pc, #40]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004538:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004540:	4907      	ldr	r1, [pc, #28]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004552:	4b03      	ldr	r3, [pc, #12]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	e002      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
 8004564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004566:	4913      	ldr	r1, [pc, #76]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004568:	4313      	orrs	r3, r2
 800456a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004578:	4b0e      	ldr	r3, [pc, #56]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004584:	490b      	ldr	r1, [pc, #44]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004586:	4313      	orrs	r3, r2
 8004588:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d008      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004596:	4b07      	ldr	r3, [pc, #28]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a2:	4904      	ldr	r1, [pc, #16]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3748      	adds	r7, #72	@ 0x48
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000

080045b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e049      	b.n	800465e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fc fada 	bl	8000b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f000 fe64 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a1a      	ldr	r2, [r3, #32]
 8004674:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10f      	bne.n	800469e <HAL_TIM_Base_Stop+0x38>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a1a      	ldr	r2, [r3, #32]
 8004684:	f240 4344 	movw	r3, #1092	@ 0x444
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d107      	bne.n	800469e <HAL_TIM_Base_Stop+0x38>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d001      	beq.n	80046cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e04f      	b.n	800476c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a23      	ldr	r2, [pc, #140]	@ (8004778 <HAL_TIM_Base_Start_IT+0xc4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01d      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f6:	d018      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1f      	ldr	r2, [pc, #124]	@ (800477c <HAL_TIM_Base_Start_IT+0xc8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1e      	ldr	r2, [pc, #120]	@ (8004780 <HAL_TIM_Base_Start_IT+0xcc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1c      	ldr	r2, [pc, #112]	@ (8004784 <HAL_TIM_Base_Start_IT+0xd0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1b      	ldr	r2, [pc, #108]	@ (8004788 <HAL_TIM_Base_Start_IT+0xd4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a19      	ldr	r2, [pc, #100]	@ (800478c <HAL_TIM_Base_Start_IT+0xd8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d115      	bne.n	8004756 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	4b17      	ldr	r3, [pc, #92]	@ (8004790 <HAL_TIM_Base_Start_IT+0xdc>)
 8004732:	4013      	ands	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b06      	cmp	r3, #6
 800473a:	d015      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0xb4>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004742:	d011      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004754:	e008      	b.n	8004768 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0201 	orr.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e000      	b.n	800476a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004768:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	40013400 	.word	0x40013400
 8004788:	40014000 	.word	0x40014000
 800478c:	40015000 	.word	0x40015000
 8004790:	00010007 	.word	0x00010007

08004794 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a1a      	ldr	r2, [r3, #32]
 80047b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10f      	bne.n	80047dc <HAL_TIM_Base_Stop_IT+0x48>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6a1a      	ldr	r2, [r3, #32]
 80047c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d107      	bne.n	80047dc <HAL_TIM_Base_Stop_IT+0x48>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e049      	b.n	8004898 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d106      	bne.n	800481e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7fc f999 	bl	8000b50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f000 fd47 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	6839      	ldr	r1, [r7, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f001 f8b6 	bl	8005a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a40      	ldr	r2, [pc, #256]	@ (80049c0 <HAL_TIM_PWM_Stop+0x120>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d018      	beq.n	80048f4 <HAL_TIM_PWM_Stop+0x54>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a3f      	ldr	r2, [pc, #252]	@ (80049c4 <HAL_TIM_PWM_Stop+0x124>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d013      	beq.n	80048f4 <HAL_TIM_PWM_Stop+0x54>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a3d      	ldr	r2, [pc, #244]	@ (80049c8 <HAL_TIM_PWM_Stop+0x128>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00e      	beq.n	80048f4 <HAL_TIM_PWM_Stop+0x54>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a3c      	ldr	r2, [pc, #240]	@ (80049cc <HAL_TIM_PWM_Stop+0x12c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d009      	beq.n	80048f4 <HAL_TIM_PWM_Stop+0x54>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a3a      	ldr	r2, [pc, #232]	@ (80049d0 <HAL_TIM_PWM_Stop+0x130>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d004      	beq.n	80048f4 <HAL_TIM_PWM_Stop+0x54>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a39      	ldr	r2, [pc, #228]	@ (80049d4 <HAL_TIM_PWM_Stop+0x134>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <HAL_TIM_PWM_Stop+0x58>
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <HAL_TIM_PWM_Stop+0x5a>
 80048f8:	2300      	movs	r3, #0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d017      	beq.n	800492e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6a1a      	ldr	r2, [r3, #32]
 8004904:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <HAL_TIM_PWM_Stop+0x8e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6a1a      	ldr	r2, [r3, #32]
 8004914:	f240 4344 	movw	r3, #1092	@ 0x444
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d107      	bne.n	800492e <HAL_TIM_PWM_Stop+0x8e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800492c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6a1a      	ldr	r2, [r3, #32]
 8004934:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <HAL_TIM_PWM_Stop+0xbe>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6a1a      	ldr	r2, [r3, #32]
 8004944:	f240 4344 	movw	r3, #1092	@ 0x444
 8004948:	4013      	ands	r3, r2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d107      	bne.n	800495e <HAL_TIM_PWM_Stop+0xbe>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0201 	bic.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d104      	bne.n	800496e <HAL_TIM_PWM_Stop+0xce>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800496c:	e023      	b.n	80049b6 <HAL_TIM_PWM_Stop+0x116>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b04      	cmp	r3, #4
 8004972:	d104      	bne.n	800497e <HAL_TIM_PWM_Stop+0xde>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800497c:	e01b      	b.n	80049b6 <HAL_TIM_PWM_Stop+0x116>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d104      	bne.n	800498e <HAL_TIM_PWM_Stop+0xee>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800498c:	e013      	b.n	80049b6 <HAL_TIM_PWM_Stop+0x116>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d104      	bne.n	800499e <HAL_TIM_PWM_Stop+0xfe>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800499c:	e00b      	b.n	80049b6 <HAL_TIM_PWM_Stop+0x116>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_PWM_Stop+0x10e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049ac:	e003      	b.n	80049b6 <HAL_TIM_PWM_Stop+0x116>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40013400 	.word	0x40013400
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40014400 	.word	0x40014400
 80049d0:	40014800 	.word	0x40014800
 80049d4:	40015000 	.word	0x40015000

080049d8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <HAL_TIM_PWM_Start_IT+0x28>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e03c      	b.n	8004a7a <HAL_TIM_PWM_Start_IT+0xa2>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d109      	bne.n	8004a1a <HAL_TIM_PWM_Start_IT+0x42>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e02f      	b.n	8004a7a <HAL_TIM_PWM_Start_IT+0xa2>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d109      	bne.n	8004a34 <HAL_TIM_PWM_Start_IT+0x5c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e022      	b.n	8004a7a <HAL_TIM_PWM_Start_IT+0xa2>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d109      	bne.n	8004a4e <HAL_TIM_PWM_Start_IT+0x76>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e015      	b.n	8004a7a <HAL_TIM_PWM_Start_IT+0xa2>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d109      	bne.n	8004a68 <HAL_TIM_PWM_Start_IT+0x90>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e008      	b.n	8004a7a <HAL_TIM_PWM_Start_IT+0xa2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	bf14      	ite	ne
 8004a74:	2301      	movne	r3, #1
 8004a76:	2300      	moveq	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e0ec      	b.n	8004c5c <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start_IT+0xba>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a90:	e023      	b.n	8004ada <HAL_TIM_PWM_Start_IT+0x102>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start_IT+0xca>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aa0:	e01b      	b.n	8004ada <HAL_TIM_PWM_Start_IT+0x102>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start_IT+0xda>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ab0:	e013      	b.n	8004ada <HAL_TIM_PWM_Start_IT+0x102>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start_IT+0xea>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ac0:	e00b      	b.n	8004ada <HAL_TIM_PWM_Start_IT+0x102>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_PWM_Start_IT+0xfa>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ad0:	e003      	b.n	8004ada <HAL_TIM_PWM_Start_IT+0x102>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	d841      	bhi.n	8004b64 <HAL_TIM_PWM_Start_IT+0x18c>
 8004ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <HAL_TIM_PWM_Start_IT+0x110>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004b65 	.word	0x08004b65
 8004af0:	08004b65 	.word	0x08004b65
 8004af4:	08004b65 	.word	0x08004b65
 8004af8:	08004b2f 	.word	0x08004b2f
 8004afc:	08004b65 	.word	0x08004b65
 8004b00:	08004b65 	.word	0x08004b65
 8004b04:	08004b65 	.word	0x08004b65
 8004b08:	08004b41 	.word	0x08004b41
 8004b0c:	08004b65 	.word	0x08004b65
 8004b10:	08004b65 	.word	0x08004b65
 8004b14:	08004b65 	.word	0x08004b65
 8004b18:	08004b53 	.word	0x08004b53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0202 	orr.w	r2, r2, #2
 8004b2a:	60da      	str	r2, [r3, #12]
      break;
 8004b2c:	e01d      	b.n	8004b6a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0204 	orr.w	r2, r2, #4
 8004b3c:	60da      	str	r2, [r3, #12]
      break;
 8004b3e:	e014      	b.n	8004b6a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0208 	orr.w	r2, r2, #8
 8004b4e:	60da      	str	r2, [r3, #12]
      break;
 8004b50:	e00b      	b.n	8004b6a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0210 	orr.w	r2, r2, #16
 8004b60:	60da      	str	r2, [r3, #12]
      break;
 8004b62:	e002      	b.n	8004b6a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
      break;
 8004b68:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d174      	bne.n	8004c5a <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2201      	movs	r2, #1
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 ff53 	bl	8005a24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a38      	ldr	r2, [pc, #224]	@ (8004c64 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d018      	beq.n	8004bba <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a36      	ldr	r2, [pc, #216]	@ (8004c68 <HAL_TIM_PWM_Start_IT+0x290>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a35      	ldr	r2, [pc, #212]	@ (8004c6c <HAL_TIM_PWM_Start_IT+0x294>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00e      	beq.n	8004bba <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a33      	ldr	r2, [pc, #204]	@ (8004c70 <HAL_TIM_PWM_Start_IT+0x298>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d009      	beq.n	8004bba <HAL_TIM_PWM_Start_IT+0x1e2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a32      	ldr	r2, [pc, #200]	@ (8004c74 <HAL_TIM_PWM_Start_IT+0x29c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d004      	beq.n	8004bba <HAL_TIM_PWM_Start_IT+0x1e2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a30      	ldr	r2, [pc, #192]	@ (8004c78 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <HAL_TIM_PWM_Start_IT+0x1e6>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_TIM_PWM_Start_IT+0x1e8>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bd2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a22      	ldr	r2, [pc, #136]	@ (8004c64 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01d      	beq.n	8004c1a <HAL_TIM_PWM_Start_IT+0x242>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be6:	d018      	beq.n	8004c1a <HAL_TIM_PWM_Start_IT+0x242>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a23      	ldr	r2, [pc, #140]	@ (8004c7c <HAL_TIM_PWM_Start_IT+0x2a4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <HAL_TIM_PWM_Start_IT+0x242>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a22      	ldr	r2, [pc, #136]	@ (8004c80 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00e      	beq.n	8004c1a <HAL_TIM_PWM_Start_IT+0x242>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a19      	ldr	r2, [pc, #100]	@ (8004c68 <HAL_TIM_PWM_Start_IT+0x290>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d009      	beq.n	8004c1a <HAL_TIM_PWM_Start_IT+0x242>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <HAL_TIM_PWM_Start_IT+0x294>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <HAL_TIM_PWM_Start_IT+0x242>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a18      	ldr	r2, [pc, #96]	@ (8004c78 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d115      	bne.n	8004c46 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	4b18      	ldr	r3, [pc, #96]	@ (8004c84 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b06      	cmp	r3, #6
 8004c2a:	d015      	beq.n	8004c58 <HAL_TIM_PWM_Start_IT+0x280>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c32:	d011      	beq.n	8004c58 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c44:	e008      	b.n	8004c58 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0201 	orr.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e000      	b.n	8004c5a <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c58:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40013400 	.word	0x40013400
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	40014400 	.word	0x40014400
 8004c74:	40014800 	.word	0x40014800
 8004c78:	40015000 	.word	0x40015000
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800
 8004c84:	00010007 	.word	0x00010007

08004c88 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b0c      	cmp	r3, #12
 8004c9a:	d841      	bhi.n	8004d20 <HAL_TIM_PWM_Stop_IT+0x98>
 8004c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004cd9 	.word	0x08004cd9
 8004ca8:	08004d21 	.word	0x08004d21
 8004cac:	08004d21 	.word	0x08004d21
 8004cb0:	08004d21 	.word	0x08004d21
 8004cb4:	08004ceb 	.word	0x08004ceb
 8004cb8:	08004d21 	.word	0x08004d21
 8004cbc:	08004d21 	.word	0x08004d21
 8004cc0:	08004d21 	.word	0x08004d21
 8004cc4:	08004cfd 	.word	0x08004cfd
 8004cc8:	08004d21 	.word	0x08004d21
 8004ccc:	08004d21 	.word	0x08004d21
 8004cd0:	08004d21 	.word	0x08004d21
 8004cd4:	08004d0f 	.word	0x08004d0f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0202 	bic.w	r2, r2, #2
 8004ce6:	60da      	str	r2, [r3, #12]
      break;
 8004ce8:	e01d      	b.n	8004d26 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0204 	bic.w	r2, r2, #4
 8004cf8:	60da      	str	r2, [r3, #12]
      break;
 8004cfa:	e014      	b.n	8004d26 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0208 	bic.w	r2, r2, #8
 8004d0a:	60da      	str	r2, [r3, #12]
      break;
 8004d0c:	e00b      	b.n	8004d26 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0210 	bic.w	r2, r2, #16
 8004d1c:	60da      	str	r2, [r3, #12]
      break;
 8004d1e:	e002      	b.n	8004d26 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
      break;
 8004d24:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f040 8086 	bne.w	8004e3a <HAL_TIM_PWM_Stop_IT+0x1b2>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2200      	movs	r2, #0
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fe74 	bl	8005a24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a40      	ldr	r2, [pc, #256]	@ (8004e44 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8004e48 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a3d      	ldr	r2, [pc, #244]	@ (8004e4c <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3c      	ldr	r2, [pc, #240]	@ (8004e50 <HAL_TIM_PWM_Stop_IT+0x1c8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a3a      	ldr	r2, [pc, #232]	@ (8004e54 <HAL_TIM_PWM_Stop_IT+0x1cc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a39      	ldr	r2, [pc, #228]	@ (8004e58 <HAL_TIM_PWM_Stop_IT+0x1d0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_TIM_PWM_Stop_IT+0xf4>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_TIM_PWM_Stop_IT+0xf6>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d017      	beq.n	8004db2 <HAL_TIM_PWM_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a1a      	ldr	r2, [r3, #32]
 8004d88:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10f      	bne.n	8004db2 <HAL_TIM_PWM_Stop_IT+0x12a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <HAL_TIM_PWM_Stop_IT+0x12a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004db0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10f      	bne.n	8004de2 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d107      	bne.n	8004de2 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0201 	bic.w	r2, r2, #1
 8004de0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <HAL_TIM_PWM_Stop_IT+0x16a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df0:	e023      	b.n	8004e3a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d104      	bne.n	8004e02 <HAL_TIM_PWM_Stop_IT+0x17a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e00:	e01b      	b.n	8004e3a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Stop_IT+0x18a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e10:	e013      	b.n	8004e3a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Stop_IT+0x19a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e20:	e00b      	b.n	8004e3a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Stop_IT+0x1aa>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e30:	e003      	b.n	8004e3a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	40013400 	.word	0x40013400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800
 8004e58:	40015000 	.word	0x40015000

08004e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d020      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01b      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0202 	mvn.w	r2, #2
 8004e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f9f8 	bl	800529c <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f9ea 	bl	8005288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fb fc47 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d020      	beq.n	8004f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01b      	beq.n	8004f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0204 	mvn.w	r2, #4
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f9d2 	bl	800529c <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f9c4 	bl	8005288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fb fc21 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d020      	beq.n	8004f58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01b      	beq.n	8004f58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0208 	mvn.w	r2, #8
 8004f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f9ac 	bl	800529c <HAL_TIM_IC_CaptureCallback>
 8004f44:	e005      	b.n	8004f52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f99e 	bl	8005288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fb fbfb 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d020      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01b      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0210 	mvn.w	r2, #16
 8004f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2208      	movs	r2, #8
 8004f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f986 	bl	800529c <HAL_TIM_IC_CaptureCallback>
 8004f90:	e005      	b.n	8004f9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f978 	bl	8005288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7fb fbd5 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0201 	mvn.w	r2, #1
 8004fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fb fb96 	bl	80006f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00c      	beq.n	8004fec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fdd8 	bl	8005b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fdd0 	bl	8005bb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00c      	beq.n	8005034 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d007      	beq.n	8005034 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800502c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f93e 	bl	80052b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00c      	beq.n	8005058 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0220 	mvn.w	r2, #32
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fd98 	bl	8005b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800507a:	2302      	movs	r3, #2
 800507c:	e0ff      	b.n	800527e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b14      	cmp	r3, #20
 800508a:	f200 80f0 	bhi.w	800526e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800508e:	a201      	add	r2, pc, #4	@ (adr r2, 8005094 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	080050e9 	.word	0x080050e9
 8005098:	0800526f 	.word	0x0800526f
 800509c:	0800526f 	.word	0x0800526f
 80050a0:	0800526f 	.word	0x0800526f
 80050a4:	08005129 	.word	0x08005129
 80050a8:	0800526f 	.word	0x0800526f
 80050ac:	0800526f 	.word	0x0800526f
 80050b0:	0800526f 	.word	0x0800526f
 80050b4:	0800516b 	.word	0x0800516b
 80050b8:	0800526f 	.word	0x0800526f
 80050bc:	0800526f 	.word	0x0800526f
 80050c0:	0800526f 	.word	0x0800526f
 80050c4:	080051ab 	.word	0x080051ab
 80050c8:	0800526f 	.word	0x0800526f
 80050cc:	0800526f 	.word	0x0800526f
 80050d0:	0800526f 	.word	0x0800526f
 80050d4:	080051ed 	.word	0x080051ed
 80050d8:	0800526f 	.word	0x0800526f
 80050dc:	0800526f 	.word	0x0800526f
 80050e0:	0800526f 	.word	0x0800526f
 80050e4:	0800522d 	.word	0x0800522d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f992 	bl	8005418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0208 	orr.w	r2, r2, #8
 8005102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0204 	bic.w	r2, r2, #4
 8005112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	619a      	str	r2, [r3, #24]
      break;
 8005126:	e0a5      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fa0c 	bl	800554c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6999      	ldr	r1, [r3, #24]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	021a      	lsls	r2, r3, #8
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	619a      	str	r2, [r3, #24]
      break;
 8005168:	e084      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fa7f 	bl	8005674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0208 	orr.w	r2, r2, #8
 8005184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0204 	bic.w	r2, r2, #4
 8005194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69d9      	ldr	r1, [r3, #28]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	61da      	str	r2, [r3, #28]
      break;
 80051a8:	e064      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 faf1 	bl	8005798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69d9      	ldr	r1, [r3, #28]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	021a      	lsls	r2, r3, #8
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	61da      	str	r2, [r3, #28]
      break;
 80051ea:	e043      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fb40 	bl	8005878 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0208 	orr.w	r2, r2, #8
 8005206:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0204 	bic.w	r2, r2, #4
 8005216:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800522a:	e023      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fb8a 	bl	800594c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005246:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005256:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	021a      	lsls	r2, r3, #8
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800526c:	e002      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
      break;
 8005272:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop

08005288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a48      	ldr	r2, [pc, #288]	@ (80053f8 <TIM_Base_SetConfig+0x134>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d013      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e2:	d00f      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a45      	ldr	r2, [pc, #276]	@ (80053fc <TIM_Base_SetConfig+0x138>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00b      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a44      	ldr	r2, [pc, #272]	@ (8005400 <TIM_Base_SetConfig+0x13c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a43      	ldr	r2, [pc, #268]	@ (8005404 <TIM_Base_SetConfig+0x140>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a42      	ldr	r2, [pc, #264]	@ (8005408 <TIM_Base_SetConfig+0x144>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d108      	bne.n	8005316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800530a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a37      	ldr	r2, [pc, #220]	@ (80053f8 <TIM_Base_SetConfig+0x134>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01f      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005324:	d01b      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a34      	ldr	r2, [pc, #208]	@ (80053fc <TIM_Base_SetConfig+0x138>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d017      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a33      	ldr	r2, [pc, #204]	@ (8005400 <TIM_Base_SetConfig+0x13c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a32      	ldr	r2, [pc, #200]	@ (8005404 <TIM_Base_SetConfig+0x140>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00f      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a32      	ldr	r2, [pc, #200]	@ (800540c <TIM_Base_SetConfig+0x148>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a31      	ldr	r2, [pc, #196]	@ (8005410 <TIM_Base_SetConfig+0x14c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a30      	ldr	r2, [pc, #192]	@ (8005414 <TIM_Base_SetConfig+0x150>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2b      	ldr	r2, [pc, #172]	@ (8005408 <TIM_Base_SetConfig+0x144>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a18      	ldr	r2, [pc, #96]	@ (80053f8 <TIM_Base_SetConfig+0x134>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <TIM_Base_SetConfig+0x100>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a19      	ldr	r2, [pc, #100]	@ (8005404 <TIM_Base_SetConfig+0x140>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00f      	beq.n	80053c4 <TIM_Base_SetConfig+0x100>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a19      	ldr	r2, [pc, #100]	@ (800540c <TIM_Base_SetConfig+0x148>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00b      	beq.n	80053c4 <TIM_Base_SetConfig+0x100>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a18      	ldr	r2, [pc, #96]	@ (8005410 <TIM_Base_SetConfig+0x14c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d007      	beq.n	80053c4 <TIM_Base_SetConfig+0x100>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a17      	ldr	r2, [pc, #92]	@ (8005414 <TIM_Base_SetConfig+0x150>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_Base_SetConfig+0x100>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a12      	ldr	r2, [pc, #72]	@ (8005408 <TIM_Base_SetConfig+0x144>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d103      	bne.n	80053cc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d105      	bne.n	80053ea <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f023 0201 	bic.w	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	611a      	str	r2, [r3, #16]
  }
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40013400 	.word	0x40013400
 8005408:	40015000 	.word	0x40015000
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f023 0201 	bic.w	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0303 	bic.w	r3, r3, #3
 8005452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f023 0302 	bic.w	r3, r3, #2
 8005464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a30      	ldr	r2, [pc, #192]	@ (8005534 <TIM_OC1_SetConfig+0x11c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d013      	beq.n	80054a0 <TIM_OC1_SetConfig+0x88>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a2f      	ldr	r2, [pc, #188]	@ (8005538 <TIM_OC1_SetConfig+0x120>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00f      	beq.n	80054a0 <TIM_OC1_SetConfig+0x88>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a2e      	ldr	r2, [pc, #184]	@ (800553c <TIM_OC1_SetConfig+0x124>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00b      	beq.n	80054a0 <TIM_OC1_SetConfig+0x88>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a2d      	ldr	r2, [pc, #180]	@ (8005540 <TIM_OC1_SetConfig+0x128>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d007      	beq.n	80054a0 <TIM_OC1_SetConfig+0x88>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a2c      	ldr	r2, [pc, #176]	@ (8005544 <TIM_OC1_SetConfig+0x12c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d003      	beq.n	80054a0 <TIM_OC1_SetConfig+0x88>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a2b      	ldr	r2, [pc, #172]	@ (8005548 <TIM_OC1_SetConfig+0x130>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d10c      	bne.n	80054ba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f023 0308 	bic.w	r3, r3, #8
 80054a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f023 0304 	bic.w	r3, r3, #4
 80054b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005534 <TIM_OC1_SetConfig+0x11c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <TIM_OC1_SetConfig+0xd2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005538 <TIM_OC1_SetConfig+0x120>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00f      	beq.n	80054ea <TIM_OC1_SetConfig+0xd2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <TIM_OC1_SetConfig+0x124>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00b      	beq.n	80054ea <TIM_OC1_SetConfig+0xd2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <TIM_OC1_SetConfig+0x128>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <TIM_OC1_SetConfig+0xd2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a19      	ldr	r2, [pc, #100]	@ (8005544 <TIM_OC1_SetConfig+0x12c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_OC1_SetConfig+0xd2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a18      	ldr	r2, [pc, #96]	@ (8005548 <TIM_OC1_SetConfig+0x130>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d111      	bne.n	800550e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	621a      	str	r2, [r3, #32]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40012c00 	.word	0x40012c00
 8005538:	40013400 	.word	0x40013400
 800553c:	40014000 	.word	0x40014000
 8005540:	40014400 	.word	0x40014400
 8005544:	40014800 	.word	0x40014800
 8005548:	40015000 	.word	0x40015000

0800554c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f023 0210 	bic.w	r2, r3, #16
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800557a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f023 0320 	bic.w	r3, r3, #32
 800559a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a2c      	ldr	r2, [pc, #176]	@ (800565c <TIM_OC2_SetConfig+0x110>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d007      	beq.n	80055c0 <TIM_OC2_SetConfig+0x74>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a2b      	ldr	r2, [pc, #172]	@ (8005660 <TIM_OC2_SetConfig+0x114>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC2_SetConfig+0x74>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005664 <TIM_OC2_SetConfig+0x118>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10d      	bne.n	80055dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1f      	ldr	r2, [pc, #124]	@ (800565c <TIM_OC2_SetConfig+0x110>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <TIM_OC2_SetConfig+0xc0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005660 <TIM_OC2_SetConfig+0x114>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_OC2_SetConfig+0xc0>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005668 <TIM_OC2_SetConfig+0x11c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_OC2_SetConfig+0xc0>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a1d      	ldr	r2, [pc, #116]	@ (800566c <TIM_OC2_SetConfig+0x120>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_OC2_SetConfig+0xc0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005670 <TIM_OC2_SetConfig+0x124>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC2_SetConfig+0xc0>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a17      	ldr	r2, [pc, #92]	@ (8005664 <TIM_OC2_SetConfig+0x118>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d113      	bne.n	8005634 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005612:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800561a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	621a      	str	r2, [r3, #32]
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40012c00 	.word	0x40012c00
 8005660:	40013400 	.word	0x40013400
 8005664:	40015000 	.word	0x40015000
 8005668:	40014000 	.word	0x40014000
 800566c:	40014400 	.word	0x40014400
 8005670:	40014800 	.word	0x40014800

08005674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005780 <TIM_OC3_SetConfig+0x10c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <TIM_OC3_SetConfig+0x72>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005784 <TIM_OC3_SetConfig+0x110>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_OC3_SetConfig+0x72>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a29      	ldr	r2, [pc, #164]	@ (8005788 <TIM_OC3_SetConfig+0x114>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d10d      	bne.n	8005702 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005700:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1e      	ldr	r2, [pc, #120]	@ (8005780 <TIM_OC3_SetConfig+0x10c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <TIM_OC3_SetConfig+0xbe>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1d      	ldr	r2, [pc, #116]	@ (8005784 <TIM_OC3_SetConfig+0x110>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00f      	beq.n	8005732 <TIM_OC3_SetConfig+0xbe>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1d      	ldr	r2, [pc, #116]	@ (800578c <TIM_OC3_SetConfig+0x118>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00b      	beq.n	8005732 <TIM_OC3_SetConfig+0xbe>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1c      	ldr	r2, [pc, #112]	@ (8005790 <TIM_OC3_SetConfig+0x11c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d007      	beq.n	8005732 <TIM_OC3_SetConfig+0xbe>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1b      	ldr	r2, [pc, #108]	@ (8005794 <TIM_OC3_SetConfig+0x120>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <TIM_OC3_SetConfig+0xbe>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a16      	ldr	r2, [pc, #88]	@ (8005788 <TIM_OC3_SetConfig+0x114>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d113      	bne.n	800575a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	621a      	str	r2, [r3, #32]
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40013400 	.word	0x40013400
 8005788:	40015000 	.word	0x40015000
 800578c:	40014000 	.word	0x40014000
 8005790:	40014400 	.word	0x40014400
 8005794:	40014800 	.word	0x40014800

08005798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	031b      	lsls	r3, r3, #12
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005860 <TIM_OC4_SetConfig+0xc8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d013      	beq.n	8005824 <TIM_OC4_SetConfig+0x8c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a19      	ldr	r2, [pc, #100]	@ (8005864 <TIM_OC4_SetConfig+0xcc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00f      	beq.n	8005824 <TIM_OC4_SetConfig+0x8c>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a18      	ldr	r2, [pc, #96]	@ (8005868 <TIM_OC4_SetConfig+0xd0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00b      	beq.n	8005824 <TIM_OC4_SetConfig+0x8c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a17      	ldr	r2, [pc, #92]	@ (800586c <TIM_OC4_SetConfig+0xd4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <TIM_OC4_SetConfig+0x8c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a16      	ldr	r2, [pc, #88]	@ (8005870 <TIM_OC4_SetConfig+0xd8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_OC4_SetConfig+0x8c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a15      	ldr	r2, [pc, #84]	@ (8005874 <TIM_OC4_SetConfig+0xdc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d109      	bne.n	8005838 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800582a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	019b      	lsls	r3, r3, #6
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40013400 	.word	0x40013400
 8005868:	40014000 	.word	0x40014000
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800
 8005874:	40015000 	.word	0x40015000

08005878 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80058bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a19      	ldr	r2, [pc, #100]	@ (8005934 <TIM_OC5_SetConfig+0xbc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <TIM_OC5_SetConfig+0x82>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a18      	ldr	r2, [pc, #96]	@ (8005938 <TIM_OC5_SetConfig+0xc0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00f      	beq.n	80058fa <TIM_OC5_SetConfig+0x82>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a17      	ldr	r2, [pc, #92]	@ (800593c <TIM_OC5_SetConfig+0xc4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00b      	beq.n	80058fa <TIM_OC5_SetConfig+0x82>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a16      	ldr	r2, [pc, #88]	@ (8005940 <TIM_OC5_SetConfig+0xc8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <TIM_OC5_SetConfig+0x82>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a15      	ldr	r2, [pc, #84]	@ (8005944 <TIM_OC5_SetConfig+0xcc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_OC5_SetConfig+0x82>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a14      	ldr	r2, [pc, #80]	@ (8005948 <TIM_OC5_SetConfig+0xd0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d109      	bne.n	800590e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005900:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	621a      	str	r2, [r3, #32]
}
 8005928:	bf00      	nop
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40013400 	.word	0x40013400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800
 8005948:	40015000 	.word	0x40015000

0800594c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800597e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	021b      	lsls	r3, r3, #8
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	051b      	lsls	r3, r3, #20
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a0c <TIM_OC6_SetConfig+0xc0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d013      	beq.n	80059d0 <TIM_OC6_SetConfig+0x84>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a19      	ldr	r2, [pc, #100]	@ (8005a10 <TIM_OC6_SetConfig+0xc4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00f      	beq.n	80059d0 <TIM_OC6_SetConfig+0x84>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a18      	ldr	r2, [pc, #96]	@ (8005a14 <TIM_OC6_SetConfig+0xc8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00b      	beq.n	80059d0 <TIM_OC6_SetConfig+0x84>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a17      	ldr	r2, [pc, #92]	@ (8005a18 <TIM_OC6_SetConfig+0xcc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <TIM_OC6_SetConfig+0x84>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a16      	ldr	r2, [pc, #88]	@ (8005a1c <TIM_OC6_SetConfig+0xd0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_OC6_SetConfig+0x84>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a15      	ldr	r2, [pc, #84]	@ (8005a20 <TIM_OC6_SetConfig+0xd4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d109      	bne.n	80059e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	029b      	lsls	r3, r3, #10
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40012c00 	.word	0x40012c00
 8005a10:	40013400 	.word	0x40013400
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40014400 	.word	0x40014400
 8005a1c:	40014800 	.word	0x40014800
 8005a20:	40015000 	.word	0x40015000

08005a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 031f 	and.w	r3, r3, #31
 8005a36:	2201      	movs	r2, #1
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a1a      	ldr	r2, [r3, #32]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	43db      	mvns	r3, r3
 8005a46:	401a      	ands	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a1a      	ldr	r2, [r3, #32]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 031f 	and.w	r3, r3, #31
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	621a      	str	r2, [r3, #32]
}
 8005a62:	bf00      	nop
 8005a64:	371c      	adds	r7, #28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e06d      	b.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a30      	ldr	r2, [pc, #192]	@ (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d108      	bne.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005acc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d01d      	beq.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b04:	d018      	beq.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d013      	beq.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1a      	ldr	r2, [pc, #104]	@ (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00e      	beq.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d009      	beq.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a16      	ldr	r2, [pc, #88]	@ (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a11      	ldr	r2, [pc, #68]	@ (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d10c      	bne.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	40012c00 	.word	0x40012c00
 8005b74:	40013400 	.word	0x40013400
 8005b78:	40015000 	.word	0x40015000
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800
 8005b84:	40014000 	.word	0x40014000

08005b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bd4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005bd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b085      	sub	sp, #20
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bfa:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005bfe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	4013      	ands	r3, r2
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	1d3b      	adds	r3, r7, #4
 8005c32:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b09d      	sub	sp, #116	@ 0x74
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	78db      	ldrb	r3, [r3, #3]
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d81f      	bhi.n	8005cd6 <USB_ActivateEndpoint+0x72>
 8005c96:	a201      	add	r2, pc, #4	@ (adr r2, 8005c9c <USB_ActivateEndpoint+0x38>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cad 	.word	0x08005cad
 8005ca0:	08005cc9 	.word	0x08005cc9
 8005ca4:	08005cdf 	.word	0x08005cdf
 8005ca8:	08005cbb 	.word	0x08005cbb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005cac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005cb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005cb8:	e012      	b.n	8005ce0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005cba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005cbe:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005cc2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005cc6:	e00b      	b.n	8005ce0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005cc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ccc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cd0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005cd4:	e004      	b.n	8005ce0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005cdc:	e000      	b.n	8005ce0 <USB_ActivateEndpoint+0x7c>
      break;
 8005cde:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	441a      	add	r2, r3
 8005cea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	b21b      	sxth	r3, r3
 8005d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1a:	b21a      	sxth	r2, r3
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	b21b      	sxth	r3, r3
 8005d22:	4313      	orrs	r3, r2
 8005d24:	b21b      	sxth	r3, r3
 8005d26:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	441a      	add	r2, r3
 8005d34:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	7b1b      	ldrb	r3, [r3, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f040 8178 	bne.w	8006046 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 8084 	beq.w	8005e68 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	4413      	add	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	00da      	lsls	r2, r3, #3
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	88db      	ldrh	r3, [r3, #6]
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	827b      	strh	r3, [r7, #18]
 8005da2:	8a7b      	ldrh	r3, [r7, #18]
 8005da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01b      	beq.n	8005de4 <USB_ActivateEndpoint+0x180>
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc2:	823b      	strh	r3, [r7, #16]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	8a3b      	ldrh	r3, [r7, #16]
 8005dd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ddc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	78db      	ldrb	r3, [r3, #3]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d020      	beq.n	8005e2e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e02:	81bb      	strh	r3, [r7, #12]
 8005e04:	89bb      	ldrh	r3, [r7, #12]
 8005e06:	f083 0320 	eor.w	r3, r3, #32
 8005e0a:	81bb      	strh	r3, [r7, #12]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	441a      	add	r2, r3
 8005e16:	89bb      	ldrh	r3, [r7, #12]
 8005e18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	8013      	strh	r3, [r2, #0]
 8005e2c:	e2d5      	b.n	80063da <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e44:	81fb      	strh	r3, [r7, #14]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	89fb      	ldrh	r3, [r7, #14]
 8005e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]
 8005e66:	e2b8      	b.n	80063da <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	4413      	add	r3, r2
 8005e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	00da      	lsls	r2, r3, #3
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	88db      	ldrh	r3, [r3, #6]
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	4413      	add	r3, r2
 8005eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	00da      	lsls	r2, r3, #3
 8005eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb8:	4413      	add	r3, r2
 8005eba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <USB_ActivateEndpoint+0x28a>
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	801a      	strh	r2, [r3, #0]
 8005eec:	e039      	b.n	8005f62 <USB_ActivateEndpoint+0x2fe>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ef4:	d818      	bhi.n	8005f28 <USB_ActivateEndpoint+0x2c4>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <USB_ActivateEndpoint+0x2ac>
 8005f0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	029b      	lsls	r3, r3, #10
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	801a      	strh	r2, [r3, #0]
 8005f26:	e01c      	b.n	8005f62 <USB_ActivateEndpoint+0x2fe>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <USB_ActivateEndpoint+0x2de>
 8005f3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	029b      	lsls	r3, r3, #10
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4313      	orrs	r3, r2
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d01b      	beq.n	8005fb2 <USB_ActivateEndpoint+0x34e>
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f90:	843b      	strh	r3, [r7, #32]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	441a      	add	r2, r3
 8005f9c:	8c3b      	ldrh	r3, [r7, #32]
 8005f9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d124      	bne.n	8006004 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd0:	83bb      	strh	r3, [r7, #28]
 8005fd2:	8bbb      	ldrh	r3, [r7, #28]
 8005fd4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005fd8:	83bb      	strh	r3, [r7, #28]
 8005fda:	8bbb      	ldrh	r3, [r7, #28]
 8005fdc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005fe0:	83bb      	strh	r3, [r7, #28]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	441a      	add	r2, r3
 8005fec:	8bbb      	ldrh	r3, [r7, #28]
 8005fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	8013      	strh	r3, [r2, #0]
 8006002:	e1ea      	b.n	80063da <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601a:	83fb      	strh	r3, [r7, #30]
 800601c:	8bfb      	ldrh	r3, [r7, #30]
 800601e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006022:	83fb      	strh	r3, [r7, #30]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	441a      	add	r2, r3
 800602e:	8bfb      	ldrh	r3, [r7, #30]
 8006030:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006034:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800603c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006040:	b29b      	uxth	r3, r3
 8006042:	8013      	strh	r3, [r2, #0]
 8006044:	e1c9      	b.n	80063da <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	78db      	ldrb	r3, [r3, #3]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d11e      	bne.n	800608c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006064:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	441a      	add	r2, r3
 8006072:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800607a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800607e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006086:	b29b      	uxth	r3, r3
 8006088:	8013      	strh	r3, [r2, #0]
 800608a:	e01d      	b.n	80060c8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	b29b      	uxth	r3, r3
 800609a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800609e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	441a      	add	r2, r3
 80060b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80060b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060d8:	4413      	add	r3, r2
 80060da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	00da      	lsls	r2, r3, #3
 80060e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	891b      	ldrh	r3, [r3, #8]
 80060f0:	085b      	lsrs	r3, r3, #1
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006106:	b29b      	uxth	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800610c:	4413      	add	r3, r2
 800610e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	00da      	lsls	r2, r3, #3
 8006116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006118:	4413      	add	r3, r2
 800611a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800611e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	895b      	ldrh	r3, [r3, #10]
 8006124:	085b      	lsrs	r3, r3, #1
 8006126:	b29b      	uxth	r3, r3
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800612e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 8093 	bne.w	8006260 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800614a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800614e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d01b      	beq.n	800618e <USB_ActivateEndpoint+0x52a>
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800616c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	441a      	add	r2, r3
 8006178:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800617a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800617e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006182:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800618a:	b29b      	uxth	r3, r3
 800618c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800619c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800619e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01b      	beq.n	80061de <USB_ActivateEndpoint+0x57a>
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	441a      	add	r2, r3
 80061c8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80061ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061da:	b29b      	uxth	r3, r3
 80061dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f4:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061f6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80061fc:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061fe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006200:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006204:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	441a      	add	r2, r3
 8006210:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800621a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800621e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006222:	b29b      	uxth	r3, r3
 8006224:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800623c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	441a      	add	r2, r3
 8006248:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800624a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800624e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800625a:	b29b      	uxth	r3, r3
 800625c:	8013      	strh	r3, [r2, #0]
 800625e:	e0bc      	b.n	80063da <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006270:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01d      	beq.n	80062b8 <USB_ActivateEndpoint+0x654>
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800628e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006292:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	441a      	add	r2, r3
 80062a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80062a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80062c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80062cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01d      	beq.n	8006310 <USB_ActivateEndpoint+0x6ac>
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ea:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	441a      	add	r2, r3
 80062f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80062fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006308:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800630c:	b29b      	uxth	r3, r3
 800630e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	78db      	ldrb	r3, [r3, #3]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d024      	beq.n	8006362 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800632a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800632e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006332:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006336:	f083 0320 	eor.w	r3, r3, #32
 800633a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	441a      	add	r2, r3
 8006348:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800634c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800635c:	b29b      	uxth	r3, r3
 800635e:	8013      	strh	r3, [r2, #0]
 8006360:	e01d      	b.n	800639e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006378:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	441a      	add	r2, r3
 8006386:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800638a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800638e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800639a:	b29b      	uxth	r3, r3
 800639c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80063da:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3774      	adds	r7, #116	@ 0x74
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop

080063ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b08d      	sub	sp, #52	@ 0x34
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	7b1b      	ldrb	r3, [r3, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 808e 	bne.w	800651c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d044      	beq.n	8006492 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	81bb      	strh	r3, [r7, #12]
 8006416:	89bb      	ldrh	r3, [r7, #12]
 8006418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641c:	2b00      	cmp	r3, #0
 800641e:	d01b      	beq.n	8006458 <USB_DeactivateEndpoint+0x6c>
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006436:	817b      	strh	r3, [r7, #10]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	441a      	add	r2, r3
 8006442:	897b      	ldrh	r3, [r7, #10]
 8006444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800644c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006450:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006454:	b29b      	uxth	r3, r3
 8006456:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800646a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800646e:	813b      	strh	r3, [r7, #8]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	441a      	add	r2, r3
 800647a:	893b      	ldrh	r3, [r7, #8]
 800647c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006480:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006484:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800648c:	b29b      	uxth	r3, r3
 800648e:	8013      	strh	r3, [r2, #0]
 8006490:	e192      	b.n	80067b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	827b      	strh	r3, [r7, #18]
 80064a0:	8a7b      	ldrh	r3, [r7, #18]
 80064a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01b      	beq.n	80064e2 <USB_DeactivateEndpoint+0xf6>
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c0:	823b      	strh	r3, [r7, #16]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	441a      	add	r2, r3
 80064cc:	8a3b      	ldrh	r3, [r7, #16]
 80064ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064de:	b29b      	uxth	r3, r3
 80064e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f8:	81fb      	strh	r3, [r7, #14]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	441a      	add	r2, r3
 8006504:	89fb      	ldrh	r3, [r7, #14]
 8006506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800650a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800650e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006516:	b29b      	uxth	r3, r3
 8006518:	8013      	strh	r3, [r2, #0]
 800651a:	e14d      	b.n	80067b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f040 80a5 	bne.w	8006670 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	843b      	strh	r3, [r7, #32]
 8006534:	8c3b      	ldrh	r3, [r7, #32]
 8006536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d01b      	beq.n	8006576 <USB_DeactivateEndpoint+0x18a>
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006554:	83fb      	strh	r3, [r7, #30]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	8bfb      	ldrh	r3, [r7, #30]
 8006562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800656a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800656e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006572:	b29b      	uxth	r3, r3
 8006574:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	83bb      	strh	r3, [r7, #28]
 8006584:	8bbb      	ldrh	r3, [r7, #28]
 8006586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d01b      	beq.n	80065c6 <USB_DeactivateEndpoint+0x1da>
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a4:	837b      	strh	r3, [r7, #26]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	441a      	add	r2, r3
 80065b0:	8b7b      	ldrh	r3, [r7, #26]
 80065b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065dc:	833b      	strh	r3, [r7, #24]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	8b3b      	ldrh	r3, [r7, #24]
 80065ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006614:	82fb      	strh	r3, [r7, #22]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	8afb      	ldrh	r3, [r7, #22]
 8006622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800662a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800662e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006632:	b29b      	uxth	r3, r3
 8006634:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800664c:	82bb      	strh	r3, [r7, #20]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	441a      	add	r2, r3
 8006658:	8abb      	ldrh	r3, [r7, #20]
 800665a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800665e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800666a:	b29b      	uxth	r3, r3
 800666c:	8013      	strh	r3, [r2, #0]
 800666e:	e0a3      	b.n	80067b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800667e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <USB_DeactivateEndpoint+0x2d4>
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800669a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	441a      	add	r2, r3
 80066aa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80066ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066bc:	b29b      	uxth	r3, r3
 80066be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80066ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80066d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01b      	beq.n	8006710 <USB_DeactivateEndpoint+0x324>
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	441a      	add	r2, r3
 80066fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006708:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800670c:	b29b      	uxth	r3, r3
 800670e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006726:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	441a      	add	r2, r3
 8006732:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800673c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006744:	b29b      	uxth	r3, r3
 8006746:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800675a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800675e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	441a      	add	r2, r3
 800676a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800676c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677c:	b29b      	uxth	r3, r3
 800677e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006796:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	441a      	add	r2, r3
 80067a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80067a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3734      	adds	r7, #52	@ 0x34
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b0c2      	sub	sp, #264	@ 0x108
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d4:	6018      	str	r0, [r3, #0]
 80067d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067de:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	f040 86b7 	bne.w	8007560 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80067f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	429a      	cmp	r2, r3
 800680c:	d908      	bls.n	8006820 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800680e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800681e:	e007      	b.n	8006830 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	7b1b      	ldrb	r3, [r3, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d13a      	bne.n	80068b6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6959      	ldr	r1, [r3, #20]
 800684c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	88da      	ldrh	r2, [r3, #6]
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685c:	b29b      	uxth	r3, r3
 800685e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006862:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006866:	6800      	ldr	r0, [r0, #0]
 8006868:	f001 fc8d 	bl	8008186 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800686c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006886:	b29b      	uxth	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	4413      	add	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	00da      	lsls	r2, r3, #3
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	f000 be1f 	b.w	80074f4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80068b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	78db      	ldrb	r3, [r3, #3]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	f040 8462 	bne.w	800718c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80068c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6a1a      	ldr	r2, [r3, #32]
 80068d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	f240 83df 	bls.w	80070a4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	441a      	add	r2, r3
 800692a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800692e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006936:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800693a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693e:	b29b      	uxth	r3, r3
 8006940:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6a1a      	ldr	r2, [r3, #32]
 800694e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006952:	1ad2      	subs	r2, r2, r3
 8006954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006964:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 81c7 	beq.w	8006d16 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	633b      	str	r3, [r7, #48]	@ 0x30
 8006994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	785b      	ldrb	r3, [r3, #1]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d177      	bne.n	8006a94 <USB_EPStartXfer+0x2ce>
 80069a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069be:	b29b      	uxth	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c4:	4413      	add	r3, r2
 80069c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	00da      	lsls	r2, r3, #3
 80069d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d8:	4413      	add	r3, r2
 80069da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80069de:	627b      	str	r3, [r7, #36]	@ 0x24
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	801a      	strh	r2, [r3, #0]
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <USB_EPStartXfer+0x248>
 80069f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	e067      	b.n	8006ade <USB_EPStartXfer+0x318>
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a12:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a14:	d81c      	bhi.n	8006a50 <USB_EPStartXfer+0x28a>
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <USB_EPStartXfer+0x270>
 8006a2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a30:	3301      	adds	r3, #1
 8006a32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	029b      	lsls	r3, r3, #10
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	4313      	orrs	r3, r2
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	801a      	strh	r2, [r3, #0]
 8006a4e:	e046      	b.n	8006ade <USB_EPStartXfer+0x318>
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <USB_EPStartXfer+0x2aa>
 8006a66:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	029b      	lsls	r3, r3, #10
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	4313      	orrs	r3, r2
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e024      	b.n	8006ade <USB_EPStartXfer+0x318>
 8006a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d11c      	bne.n	8006ade <USB_EPStartXfer+0x318>
 8006aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	4413      	add	r3, r2
 8006aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8006abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	00da      	lsls	r2, r3, #3
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006adc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	895b      	ldrh	r3, [r3, #10]
 8006aea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6959      	ldr	r1, [r3, #20]
 8006afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b0c:	6800      	ldr	r0, [r0, #0]
 8006b0e:	f001 fb3a 	bl	8008186 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695a      	ldr	r2, [r3, #20]
 8006b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b22:	441a      	add	r2, r3
 8006b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6a1a      	ldr	r2, [r3, #32]
 8006b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d90f      	bls.n	8006b6c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6a1a      	ldr	r2, [r3, #32]
 8006b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5c:	1ad2      	subs	r2, r2, r3
 8006b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	621a      	str	r2, [r3, #32]
 8006b6a:	e00e      	b.n	8006b8a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2200      	movs	r2, #0
 8006b88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d177      	bne.n	8006c8a <USB_EPStartXfer+0x4c4>
 8006b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	4413      	add	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	00da      	lsls	r2, r3, #3
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	801a      	strh	r2, [r3, #0]
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <USB_EPStartXfer+0x43e>
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	e06d      	b.n	8006ce0 <USB_EPStartXfer+0x51a>
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c0a:	d81c      	bhi.n	8006c46 <USB_EPStartXfer+0x480>
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d004      	beq.n	8006c2c <USB_EPStartXfer+0x466>
 8006c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c26:	3301      	adds	r3, #1
 8006c28:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	029b      	lsls	r3, r3, #10
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	801a      	strh	r2, [r3, #0]
 8006c44:	e04c      	b.n	8006ce0 <USB_EPStartXfer+0x51a>
 8006c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4a:	095b      	lsrs	r3, r3, #5
 8006c4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	f003 031f 	and.w	r3, r3, #31
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d104      	bne.n	8006c66 <USB_EPStartXfer+0x4a0>
 8006c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c60:	3b01      	subs	r3, #1
 8006c62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	029b      	lsls	r3, r3, #10
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	4313      	orrs	r3, r2
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	801a      	strh	r2, [r3, #0]
 8006c88:	e02a      	b.n	8006ce0 <USB_EPStartXfer+0x51a>
 8006c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	785b      	ldrb	r3, [r3, #1]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d122      	bne.n	8006ce0 <USB_EPStartXfer+0x51a>
 8006c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	623b      	str	r3, [r7, #32]
 8006ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	4413      	add	r3, r2
 8006cbc:	623b      	str	r3, [r7, #32]
 8006cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	00da      	lsls	r2, r3, #3
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	891b      	ldrh	r3, [r3, #8]
 8006cec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6959      	ldr	r1, [r3, #20]
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d0e:	6800      	ldr	r0, [r0, #0]
 8006d10:	f001 fa39 	bl	8008186 <USB_WritePMA>
 8006d14:	e3ee      	b.n	80074f4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d177      	bne.n	8006e16 <USB_EPStartXfer+0x650>
 8006d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d46:	4413      	add	r3, r2
 8006d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	00da      	lsls	r2, r3, #3
 8006d58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <USB_EPStartXfer+0x5ca>
 8006d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d8c:	801a      	strh	r2, [r3, #0]
 8006d8e:	e06d      	b.n	8006e6c <USB_EPStartXfer+0x6a6>
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d94:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d96:	d81c      	bhi.n	8006dd2 <USB_EPStartXfer+0x60c>
 8006d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <USB_EPStartXfer+0x5f2>
 8006dae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006db2:	3301      	adds	r3, #1
 8006db4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	029b      	lsls	r3, r3, #10
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dce:	801a      	strh	r2, [r3, #0]
 8006dd0:	e04c      	b.n	8006e6c <USB_EPStartXfer+0x6a6>
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d104      	bne.n	8006df2 <USB_EPStartXfer+0x62c>
 8006de8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dec:	3b01      	subs	r3, #1
 8006dee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	029b      	lsls	r3, r3, #10
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	4313      	orrs	r3, r2
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	e02a      	b.n	8006e6c <USB_EPStartXfer+0x6a6>
 8006e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	785b      	ldrb	r3, [r3, #1]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d122      	bne.n	8006e6c <USB_EPStartXfer+0x6a6>
 8006e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e46:	4413      	add	r3, r2
 8006e48:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	00da      	lsls	r2, r3, #3
 8006e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	891b      	ldrh	r3, [r3, #8]
 8006e78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6959      	ldr	r1, [r3, #20]
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e9a:	6800      	ldr	r0, [r0, #0]
 8006e9c:	f001 f973 	bl	8008186 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695a      	ldr	r2, [r3, #20]
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	441a      	add	r2, r3
 8006eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6a1a      	ldr	r2, [r3, #32]
 8006eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d90f      	bls.n	8006efa <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a1a      	ldr	r2, [r3, #32]
 8006ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eea:	1ad2      	subs	r2, r2, r3
 8006eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	621a      	str	r2, [r3, #32]
 8006ef8:	e00e      	b.n	8006f18 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2200      	movs	r2, #0
 8006f16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d177      	bne.n	8007024 <USB_EPStartXfer+0x85e>
 8006f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	461a      	mov	r2, r3
 8006f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f54:	4413      	add	r3, r2
 8006f56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	00da      	lsls	r2, r3, #3
 8006f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f68:	4413      	add	r3, r2
 8006f6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <USB_EPStartXfer+0x7d8>
 8006f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f9a:	801a      	strh	r2, [r3, #0]
 8006f9c:	e067      	b.n	800706e <USB_EPStartXfer+0x8a8>
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fa4:	d81c      	bhi.n	8006fe0 <USB_EPStartXfer+0x81a>
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d004      	beq.n	8006fc6 <USB_EPStartXfer+0x800>
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	029b      	lsls	r3, r3, #10
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fdc:	801a      	strh	r2, [r3, #0]
 8006fde:	e046      	b.n	800706e <USB_EPStartXfer+0x8a8>
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe4:	095b      	lsrs	r3, r3, #5
 8006fe6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <USB_EPStartXfer+0x83a>
 8006ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29a      	uxth	r2, r3
 8007006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800700a:	b29b      	uxth	r3, r3
 800700c:	029b      	lsls	r3, r3, #10
 800700e:	b29b      	uxth	r3, r3
 8007010:	4313      	orrs	r3, r2
 8007012:	b29b      	uxth	r3, r3
 8007014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701c:	b29a      	uxth	r2, r3
 800701e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	e024      	b.n	800706e <USB_EPStartXfer+0x8a8>
 8007024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d11c      	bne.n	800706e <USB_EPStartXfer+0x8a8>
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007042:	b29b      	uxth	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007048:	4413      	add	r3, r2
 800704a:	643b      	str	r3, [r7, #64]	@ 0x40
 800704c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	00da      	lsls	r2, r3, #3
 800705a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800705c:	4413      	add	r3, r2
 800705e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007068:	b29a      	uxth	r2, r3
 800706a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800706e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	895b      	ldrh	r3, [r3, #10]
 800707a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800707e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6959      	ldr	r1, [r3, #20]
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708e:	b29b      	uxth	r3, r3
 8007090:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007094:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007098:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800709c:	6800      	ldr	r0, [r0, #0]
 800709e:	f001 f872 	bl	8008186 <USB_WritePMA>
 80070a2:	e227      	b.n	80074f4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80070a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80070b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80070d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070da:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80070de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	441a      	add	r2, r3
 80070f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80070fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800711c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800712a:	b29b      	uxth	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007130:	4413      	add	r3, r2
 8007132:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	00da      	lsls	r2, r3, #3
 8007142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007144:	4413      	add	r3, r2
 8007146:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800714a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007150:	b29a      	uxth	r2, r3
 8007152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007154:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	891b      	ldrh	r3, [r3, #8]
 8007162:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6959      	ldr	r1, [r3, #20]
 8007172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007176:	b29b      	uxth	r3, r3
 8007178:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800717c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007180:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007184:	6800      	ldr	r0, [r0, #0]
 8007186:	f000 fffe 	bl	8008186 <USB_WritePMA>
 800718a:	e1b3      	b.n	80074f4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800718c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6a1a      	ldr	r2, [r3, #32]
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719c:	1ad2      	subs	r2, r2, r3
 800719e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80c6 	beq.w	800735e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80071de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d177      	bne.n	80072de <USB_EPStartXfer+0xb18>
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007208:	b29b      	uxth	r3, r3
 800720a:	461a      	mov	r2, r3
 800720c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800720e:	4413      	add	r3, r2
 8007210:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	00da      	lsls	r2, r3, #3
 8007220:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007222:	4413      	add	r3, r2
 8007224:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007228:	667b      	str	r3, [r7, #100]	@ 0x64
 800722a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007234:	b29a      	uxth	r2, r3
 8007236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007238:	801a      	strh	r2, [r3, #0]
 800723a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <USB_EPStartXfer+0xa92>
 8007242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007250:	b29a      	uxth	r2, r3
 8007252:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007254:	801a      	strh	r2, [r3, #0]
 8007256:	e067      	b.n	8007328 <USB_EPStartXfer+0xb62>
 8007258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800725c:	2b3e      	cmp	r3, #62	@ 0x3e
 800725e:	d81c      	bhi.n	800729a <USB_EPStartXfer+0xad4>
 8007260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007264:	085b      	lsrs	r3, r3, #1
 8007266:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d004      	beq.n	8007280 <USB_EPStartXfer+0xaba>
 8007276:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800727a:	3301      	adds	r3, #1
 800727c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007280:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29a      	uxth	r2, r3
 8007286:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800728a:	b29b      	uxth	r3, r3
 800728c:	029b      	lsls	r3, r3, #10
 800728e:	b29b      	uxth	r3, r3
 8007290:	4313      	orrs	r3, r2
 8007292:	b29a      	uxth	r2, r3
 8007294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007296:	801a      	strh	r2, [r3, #0]
 8007298:	e046      	b.n	8007328 <USB_EPStartXfer+0xb62>
 800729a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d104      	bne.n	80072ba <USB_EPStartXfer+0xaf4>
 80072b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80072b4:	3b01      	subs	r3, #1
 80072b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	029b      	lsls	r3, r3, #10
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	4313      	orrs	r3, r2
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	e024      	b.n	8007328 <USB_EPStartXfer+0xb62>
 80072de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	785b      	ldrb	r3, [r3, #1]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d11c      	bne.n	8007328 <USB_EPStartXfer+0xb62>
 80072ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	461a      	mov	r2, r3
 8007300:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007302:	4413      	add	r3, r2
 8007304:	673b      	str	r3, [r7, #112]	@ 0x70
 8007306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	00da      	lsls	r2, r3, #3
 8007314:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007316:	4413      	add	r3, r2
 8007318:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800731c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800731e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007322:	b29a      	uxth	r2, r3
 8007324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007326:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	895b      	ldrh	r3, [r3, #10]
 8007334:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6959      	ldr	r1, [r3, #20]
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007348:	b29b      	uxth	r3, r3
 800734a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800734e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007352:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007356:	6800      	ldr	r0, [r0, #0]
 8007358:	f000 ff15 	bl	8008186 <USB_WritePMA>
 800735c:	e0ca      	b.n	80074f4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800735e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d177      	bne.n	800745e <USB_EPStartXfer+0xc98>
 800736e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800737a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007388:	b29b      	uxth	r3, r3
 800738a:	461a      	mov	r2, r3
 800738c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800738e:	4413      	add	r3, r2
 8007390:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	00da      	lsls	r2, r3, #3
 80073a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073a2:	4413      	add	r3, r2
 80073a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <USB_EPStartXfer+0xc12>
 80073c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	e073      	b.n	80074c0 <USB_EPStartXfer+0xcfa>
 80073d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80073de:	d81c      	bhi.n	800741a <USB_EPStartXfer+0xc54>
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	085b      	lsrs	r3, r3, #1
 80073e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <USB_EPStartXfer+0xc3a>
 80073f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073fa:	3301      	adds	r3, #1
 80073fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800740a:	b29b      	uxth	r3, r3
 800740c:	029b      	lsls	r3, r3, #10
 800740e:	b29b      	uxth	r3, r3
 8007410:	4313      	orrs	r3, r2
 8007412:	b29a      	uxth	r2, r3
 8007414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007416:	801a      	strh	r2, [r3, #0]
 8007418:	e052      	b.n	80074c0 <USB_EPStartXfer+0xcfa>
 800741a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741e:	095b      	lsrs	r3, r3, #5
 8007420:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007428:	f003 031f 	and.w	r3, r3, #31
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <USB_EPStartXfer+0xc74>
 8007430:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007434:	3b01      	subs	r3, #1
 8007436:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800743a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29a      	uxth	r2, r3
 8007440:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007444:	b29b      	uxth	r3, r3
 8007446:	029b      	lsls	r3, r3, #10
 8007448:	b29b      	uxth	r3, r3
 800744a:	4313      	orrs	r3, r2
 800744c:	b29b      	uxth	r3, r3
 800744e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007456:	b29a      	uxth	r2, r3
 8007458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	e030      	b.n	80074c0 <USB_EPStartXfer+0xcfa>
 800745e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d128      	bne.n	80074c0 <USB_EPStartXfer+0xcfa>
 800746e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800747c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800748a:	b29b      	uxth	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007492:	4413      	add	r3, r2
 8007494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	00da      	lsls	r2, r3, #3
 80074a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074aa:	4413      	add	r3, r2
 80074ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	891b      	ldrh	r3, [r3, #8]
 80074cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6959      	ldr	r1, [r3, #20]
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074ee:	6800      	ldr	r0, [r0, #0]
 80074f0:	f000 fe49 	bl	8008186 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80074f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	b29b      	uxth	r3, r3
 8007512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800751a:	817b      	strh	r3, [r7, #10]
 800751c:	897b      	ldrh	r3, [r7, #10]
 800751e:	f083 0310 	eor.w	r3, r3, #16
 8007522:	817b      	strh	r3, [r7, #10]
 8007524:	897b      	ldrh	r3, [r7, #10]
 8007526:	f083 0320 	eor.w	r3, r3, #32
 800752a:	817b      	strh	r3, [r7, #10]
 800752c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	441a      	add	r2, r3
 8007546:	897b      	ldrh	r3, [r7, #10]
 8007548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800754c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007558:	b29b      	uxth	r3, r3
 800755a:	8013      	strh	r3, [r2, #0]
 800755c:	f000 bcdf 	b.w	8007f1e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	7b1b      	ldrb	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f040 80bc 	bne.w	80076ea <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	429a      	cmp	r2, r3
 800758c:	d917      	bls.n	80075be <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800758e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800759e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	619a      	str	r2, [r3, #24]
 80075bc:	e00e      	b.n	80075dc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80075be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80075ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2200      	movs	r2, #0
 80075da:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80075dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007600:	4413      	add	r3, r2
 8007602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	00da      	lsls	r2, r3, #3
 8007614:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007618:	4413      	add	r3, r2
 800761a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800761e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800762e:	b29a      	uxth	r2, r3
 8007630:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10d      	bne.n	800765a <USB_EPStartXfer+0xe94>
 800763e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800764a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764e:	b29a      	uxth	r2, r3
 8007650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	f000 bc28 	b.w	8007eaa <USB_EPStartXfer+0x16e4>
 800765a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007660:	d81f      	bhi.n	80076a2 <USB_EPStartXfer+0xedc>
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800766c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <USB_EPStartXfer+0xebc>
 8007678:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800767c:	3301      	adds	r3, #1
 800767e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	b29a      	uxth	r2, r3
 800768a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800768e:	b29b      	uxth	r3, r3
 8007690:	029b      	lsls	r3, r3, #10
 8007692:	b29b      	uxth	r3, r3
 8007694:	4313      	orrs	r3, r2
 8007696:	b29a      	uxth	r2, r3
 8007698:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	f000 bc04 	b.w	8007eaa <USB_EPStartXfer+0x16e4>
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <USB_EPStartXfer+0xefc>
 80076b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80076bc:	3b01      	subs	r3, #1
 80076be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	029b      	lsls	r3, r3, #10
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	4313      	orrs	r3, r2
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076e6:	801a      	strh	r2, [r3, #0]
 80076e8:	e3df      	b.n	8007eaa <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80076ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	78db      	ldrb	r3, [r3, #3]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	f040 8218 	bne.w	8007b2c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80076fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f040 809d 	bne.w	8007848 <USB_EPStartXfer+0x1082>
 800770e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007712:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800772a:	b29b      	uxth	r3, r3
 800772c:	461a      	mov	r2, r3
 800772e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007732:	4413      	add	r3, r2
 8007734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	00da      	lsls	r2, r3, #3
 8007746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800774a:	4413      	add	r3, r2
 800774c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007760:	b29a      	uxth	r2, r3
 8007762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007766:	801a      	strh	r2, [r3, #0]
 8007768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10c      	bne.n	8007792 <USB_EPStartXfer+0xfcc>
 8007778:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007788:	b29a      	uxth	r2, r3
 800778a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800778e:	801a      	strh	r2, [r3, #0]
 8007790:	e08f      	b.n	80078b2 <USB_EPStartXfer+0x10ec>
 8007792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b3e      	cmp	r3, #62	@ 0x3e
 80077a0:	d826      	bhi.n	80077f0 <USB_EPStartXfer+0x102a>
 80077a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <USB_EPStartXfer+0x100c>
 80077c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077cc:	3301      	adds	r3, #1
 80077ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29a      	uxth	r2, r3
 80077da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077de:	b29b      	uxth	r3, r3
 80077e0:	029b      	lsls	r3, r3, #10
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	4313      	orrs	r3, r2
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077ec:	801a      	strh	r2, [r3, #0]
 80077ee:	e060      	b.n	80078b2 <USB_EPStartXfer+0x10ec>
 80077f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	095b      	lsrs	r3, r3, #5
 80077fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 031f 	and.w	r3, r3, #31
 8007812:	2b00      	cmp	r3, #0
 8007814:	d104      	bne.n	8007820 <USB_EPStartXfer+0x105a>
 8007816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800781a:	3b01      	subs	r3, #1
 800781c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29a      	uxth	r2, r3
 8007828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782c:	b29b      	uxth	r3, r3
 800782e:	029b      	lsls	r3, r3, #10
 8007830:	b29b      	uxth	r3, r3
 8007832:	4313      	orrs	r3, r2
 8007834:	b29b      	uxth	r3, r3
 8007836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800783a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800783e:	b29a      	uxth	r2, r3
 8007840:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007844:	801a      	strh	r2, [r3, #0]
 8007846:	e034      	b.n	80078b2 <USB_EPStartXfer+0x10ec>
 8007848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d12c      	bne.n	80078b2 <USB_EPStartXfer+0x10ec>
 8007858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007874:	b29b      	uxth	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800787c:	4413      	add	r3, r2
 800787e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	00da      	lsls	r2, r3, #3
 8007890:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007894:	4413      	add	r3, r2
 8007896:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800789a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800789e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80078b0:	801a      	strh	r2, [r3, #0]
 80078b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80078c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 809d 	bne.w	8007a0c <USB_EPStartXfer+0x1246>
 80078d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078f6:	4413      	add	r3, r2
 80078f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	00da      	lsls	r2, r3, #3
 800790a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800790e:	4413      	add	r3, r2
 8007910:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	b29b      	uxth	r3, r3
 8007920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007924:	b29a      	uxth	r2, r3
 8007926:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10c      	bne.n	8007956 <USB_EPStartXfer+0x1190>
 800793c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794c:	b29a      	uxth	r2, r3
 800794e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	e088      	b.n	8007a68 <USB_EPStartXfer+0x12a2>
 8007956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b3e      	cmp	r3, #62	@ 0x3e
 8007964:	d826      	bhi.n	80079b4 <USB_EPStartXfer+0x11ee>
 8007966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <USB_EPStartXfer+0x11d0>
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007990:	3301      	adds	r3, #1
 8007992:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007996:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29a      	uxth	r2, r3
 800799e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	029b      	lsls	r3, r3, #10
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	4313      	orrs	r3, r2
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079b0:	801a      	strh	r2, [r3, #0]
 80079b2:	e059      	b.n	8007a68 <USB_EPStartXfer+0x12a2>
 80079b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f003 031f 	and.w	r3, r3, #31
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d104      	bne.n	80079e4 <USB_EPStartXfer+0x121e>
 80079da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079de:	3b01      	subs	r3, #1
 80079e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	029b      	lsls	r3, r3, #10
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	4313      	orrs	r3, r2
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	e02d      	b.n	8007a68 <USB_EPStartXfer+0x12a2>
 8007a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d125      	bne.n	8007a68 <USB_EPStartXfer+0x12a2>
 8007a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a32:	4413      	add	r3, r2
 8007a34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	00da      	lsls	r2, r3, #3
 8007a46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a66:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 8218 	beq.w	8007eaa <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <USB_EPStartXfer+0x12ec>
 8007aa6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10d      	bne.n	8007ace <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ab2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f040 81f5 	bne.w	8007eaa <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ac0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f040 81ee 	bne.w	8007eaa <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	441a      	add	r2, r3
 8007b12:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007b16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	8013      	strh	r3, [r2, #0]
 8007b2a:	e1be      	b.n	8007eaa <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	78db      	ldrb	r3, [r3, #3]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	f040 81b4 	bne.w	8007ea6 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699a      	ldr	r2, [r3, #24]
 8007b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d917      	bls.n	8007b8a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8007b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7a:	1ad2      	subs	r2, r2, r3
 8007b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	619a      	str	r2, [r3, #24]
 8007b88:	e00e      	b.n	8007ba8 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8007b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	785b      	ldrb	r3, [r3, #1]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f040 8085 	bne.w	8007cc4 <USB_EPStartXfer+0x14fe>
 8007bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bde:	4413      	add	r3, r2
 8007be0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	00da      	lsls	r2, r3, #3
 8007bf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c12:	801a      	strh	r2, [r3, #0]
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10c      	bne.n	8007c36 <USB_EPStartXfer+0x1470>
 8007c1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c32:	801a      	strh	r2, [r3, #0]
 8007c34:	e077      	b.n	8007d26 <USB_EPStartXfer+0x1560>
 8007c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c3c:	d81e      	bhi.n	8007c7c <USB_EPStartXfer+0x14b6>
 8007c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d004      	beq.n	8007c5e <USB_EPStartXfer+0x1498>
 8007c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c58:	3301      	adds	r3, #1
 8007c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	029b      	lsls	r3, r3, #10
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	4313      	orrs	r3, r2
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c78:	801a      	strh	r2, [r3, #0]
 8007c7a:	e054      	b.n	8007d26 <USB_EPStartXfer+0x1560>
 8007c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c80:	095b      	lsrs	r3, r3, #5
 8007c82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8a:	f003 031f 	and.w	r3, r3, #31
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d104      	bne.n	8007c9c <USB_EPStartXfer+0x14d6>
 8007c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c96:	3b01      	subs	r3, #1
 8007c98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	029b      	lsls	r3, r3, #10
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cc0:	801a      	strh	r2, [r3, #0]
 8007cc2:	e030      	b.n	8007d26 <USB_EPStartXfer+0x1560>
 8007cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	785b      	ldrb	r3, [r3, #1]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d128      	bne.n	8007d26 <USB_EPStartXfer+0x1560>
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	00da      	lsls	r2, r3, #3
 8007d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d10:	4413      	add	r3, r2
 8007d12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f040 8085 	bne.w	8007e50 <USB_EPStartXfer+0x168a>
 8007d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	00da      	lsls	r2, r3, #3
 8007d7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d82:	4413      	add	r3, r2
 8007d84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10c      	bne.n	8007dc2 <USB_EPStartXfer+0x15fc>
 8007da8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dbe:	801a      	strh	r2, [r3, #0]
 8007dc0:	e073      	b.n	8007eaa <USB_EPStartXfer+0x16e4>
 8007dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007dc8:	d81e      	bhi.n	8007e08 <USB_EPStartXfer+0x1642>
 8007dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dce:	085b      	lsrs	r3, r3, #1
 8007dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <USB_EPStartXfer+0x1624>
 8007de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007de4:	3301      	adds	r3, #1
 8007de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	029b      	lsls	r3, r3, #10
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e04:	801a      	strh	r2, [r3, #0]
 8007e06:	e050      	b.n	8007eaa <USB_EPStartXfer+0x16e4>
 8007e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e16:	f003 031f 	and.w	r3, r3, #31
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d104      	bne.n	8007e28 <USB_EPStartXfer+0x1662>
 8007e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e22:	3b01      	subs	r3, #1
 8007e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	029b      	lsls	r3, r3, #10
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e4c:	801a      	strh	r2, [r3, #0]
 8007e4e:	e02c      	b.n	8007eaa <USB_EPStartXfer+0x16e4>
 8007e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d124      	bne.n	8007eaa <USB_EPStartXfer+0x16e4>
 8007e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e76:	4413      	add	r3, r2
 8007e78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	00da      	lsls	r2, r3, #3
 8007e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e8e:	4413      	add	r3, r2
 8007e90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ea2:	801a      	strh	r2, [r3, #0]
 8007ea4:	e001      	b.n	8007eaa <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e03a      	b.n	8007f20 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ed0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ed4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ed8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007edc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ee0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ee4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ee8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	441a      	add	r2, r3
 8007f06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d020      	beq.n	8007f7e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f52:	81bb      	strh	r3, [r7, #12]
 8007f54:	89bb      	ldrh	r3, [r7, #12]
 8007f56:	f083 0310 	eor.w	r3, r3, #16
 8007f5a:	81bb      	strh	r3, [r7, #12]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	441a      	add	r2, r3
 8007f66:	89bb      	ldrh	r3, [r7, #12]
 8007f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	8013      	strh	r3, [r2, #0]
 8007f7c:	e01f      	b.n	8007fbe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f94:	81fb      	strh	r3, [r7, #14]
 8007f96:	89fb      	ldrh	r3, [r7, #14]
 8007f98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f9c:	81fb      	strh	r3, [r7, #14]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	441a      	add	r2, r3
 8007fa8:	89fb      	ldrh	r3, [r7, #14]
 8007faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	7b1b      	ldrb	r3, [r3, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f040 809d 	bne.w	800811a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d04c      	beq.n	8008082 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	823b      	strh	r3, [r7, #16]
 8007ff6:	8a3b      	ldrh	r3, [r7, #16]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01b      	beq.n	8008038 <USB_EPClearStall+0x6c>
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008016:	81fb      	strh	r3, [r7, #14]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	441a      	add	r2, r3
 8008022:	89fb      	ldrh	r3, [r7, #14]
 8008024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800802c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008030:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008034:	b29b      	uxth	r3, r3
 8008036:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	78db      	ldrb	r3, [r3, #3]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d06c      	beq.n	800811a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29b      	uxth	r3, r3
 800804e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008056:	81bb      	strh	r3, [r7, #12]
 8008058:	89bb      	ldrh	r3, [r7, #12]
 800805a:	f083 0320 	eor.w	r3, r3, #32
 800805e:	81bb      	strh	r3, [r7, #12]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	441a      	add	r2, r3
 800806a:	89bb      	ldrh	r3, [r7, #12]
 800806c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800807c:	b29b      	uxth	r3, r3
 800807e:	8013      	strh	r3, [r2, #0]
 8008080:	e04b      	b.n	800811a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	82fb      	strh	r3, [r7, #22]
 8008090:	8afb      	ldrh	r3, [r7, #22]
 8008092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d01b      	beq.n	80080d2 <USB_EPClearStall+0x106>
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b0:	82bb      	strh	r3, [r7, #20]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	441a      	add	r2, r3
 80080bc:	8abb      	ldrh	r3, [r7, #20]
 80080be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080e8:	827b      	strh	r3, [r7, #18]
 80080ea:	8a7b      	ldrh	r3, [r7, #18]
 80080ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80080f0:	827b      	strh	r3, [r7, #18]
 80080f2:	8a7b      	ldrh	r3, [r7, #18]
 80080f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80080f8:	827b      	strh	r3, [r7, #18]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	441a      	add	r2, r3
 8008104:	8a7b      	ldrh	r3, [r7, #18]
 8008106:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800810a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800810e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008116:	b29b      	uxth	r3, r3
 8008118:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	371c      	adds	r7, #28
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2280      	movs	r2, #128	@ 0x80
 800813e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008174:	b29b      	uxth	r3, r3
 8008176:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008178:	68fb      	ldr	r3, [r7, #12]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008186:	b480      	push	{r7}
 8008188:	b08b      	sub	sp, #44	@ 0x2c
 800818a:	af00      	add	r7, sp, #0
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	4611      	mov	r1, r2
 8008192:	461a      	mov	r2, r3
 8008194:	460b      	mov	r3, r1
 8008196:	80fb      	strh	r3, [r7, #6]
 8008198:	4613      	mov	r3, r2
 800819a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800819c:	88bb      	ldrh	r3, [r7, #4]
 800819e:	3301      	adds	r3, #1
 80081a0:	085b      	lsrs	r3, r3, #1
 80081a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081ac:	88fa      	ldrh	r2, [r7, #6]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081b6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80081bc:	e01b      	b.n	80081f6 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	3301      	adds	r3, #1
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	021b      	lsls	r3, r3, #8
 80081cc:	b21a      	sxth	r2, r3
 80081ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	b21b      	sxth	r3, r3
 80081d6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	8a7a      	ldrh	r2, [r7, #18]
 80081dc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	3302      	adds	r3, #2
 80081e2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	3301      	adds	r3, #1
 80081e8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	3301      	adds	r3, #1
 80081ee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80081f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f2:	3b01      	subs	r3, #1
 80081f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e0      	bne.n	80081be <USB_WritePMA+0x38>
  }
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	372c      	adds	r7, #44	@ 0x2c
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800820a:	b480      	push	{r7}
 800820c:	b08b      	sub	sp, #44	@ 0x2c
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	4611      	mov	r1, r2
 8008216:	461a      	mov	r2, r3
 8008218:	460b      	mov	r3, r1
 800821a:	80fb      	strh	r3, [r7, #6]
 800821c:	4613      	mov	r3, r2
 800821e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008220:	88bb      	ldrh	r3, [r7, #4]
 8008222:	085b      	lsrs	r3, r3, #1
 8008224:	b29b      	uxth	r3, r3
 8008226:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008230:	88fa      	ldrh	r2, [r7, #6]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800823a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008240:	e018      	b.n	8008274 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	3302      	adds	r3, #2
 800824e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	b2da      	uxtb	r2, r3
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	3301      	adds	r3, #1
 800825c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	0a1b      	lsrs	r3, r3, #8
 8008262:	b2da      	uxtb	r2, r3
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	3301      	adds	r3, #1
 800826c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008270:	3b01      	subs	r3, #1
 8008272:	627b      	str	r3, [r7, #36]	@ 0x24
 8008274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e3      	bne.n	8008242 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800827a:	88bb      	ldrh	r3, [r7, #4]
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	b29b      	uxth	r3, r3
 800828c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	b2da      	uxtb	r2, r3
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	701a      	strb	r2, [r3, #0]
  }
}
 8008296:	bf00      	nop
 8008298:	372c      	adds	r7, #44	@ 0x2c
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	7c1b      	ldrb	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d115      	bne.n	80082e6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082be:	2202      	movs	r2, #2
 80082c0:	2181      	movs	r1, #129	@ 0x81
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f001 fe91 	bl	8009fea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082d2:	2202      	movs	r2, #2
 80082d4:	2101      	movs	r1, #1
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fe87 	bl	8009fea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80082e4:	e012      	b.n	800830c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082e6:	2340      	movs	r3, #64	@ 0x40
 80082e8:	2202      	movs	r2, #2
 80082ea:	2181      	movs	r1, #129	@ 0x81
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 fe7c 	bl	8009fea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082f8:	2340      	movs	r3, #64	@ 0x40
 80082fa:	2202      	movs	r2, #2
 80082fc:	2101      	movs	r1, #1
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 fe73 	bl	8009fea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800830c:	2308      	movs	r3, #8
 800830e:	2203      	movs	r2, #3
 8008310:	2182      	movs	r1, #130	@ 0x82
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 fe69 	bl	8009fea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800831e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008322:	f001 ff89 	bl	800a238 <USBD_static_malloc>
 8008326:	4602      	mov	r2, r0
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008338:	2301      	movs	r3, #1
 800833a:	73fb      	strb	r3, [r7, #15]
 800833c:	e026      	b.n	800838c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008344:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	7c1b      	ldrb	r3, [r3, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d109      	bne.n	800837c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800836e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008372:	2101      	movs	r1, #1
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 ff29 	bl	800a1cc <USBD_LL_PrepareReceive>
 800837a:	e007      	b.n	800838c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008382:	2340      	movs	r3, #64	@ 0x40
 8008384:	2101      	movs	r1, #1
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f001 ff20 	bl	800a1cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	460b      	mov	r3, r1
 80083a0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80083a6:	2181      	movs	r1, #129	@ 0x81
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f001 fe44 	bl	800a036 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80083b4:	2101      	movs	r1, #1
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fe3d 	bl	800a036 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80083c4:	2182      	movs	r1, #130	@ 0x82
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 fe35 	bl	800a036 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00e      	beq.n	80083fa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ec:	4618      	mov	r0, r3
 80083ee:	f001 ff31 	bl	800a254 <USBD_static_free>
    pdev->pClassData = NULL;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008414:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800842a:	2b00      	cmp	r3, #0
 800842c:	d039      	beq.n	80084a2 <USBD_CDC_Setup+0x9e>
 800842e:	2b20      	cmp	r3, #32
 8008430:	d17f      	bne.n	8008532 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	88db      	ldrh	r3, [r3, #6]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d029      	beq.n	800848e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	b25b      	sxtb	r3, r3
 8008440:	2b00      	cmp	r3, #0
 8008442:	da11      	bge.n	8008468 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008450:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	88d2      	ldrh	r2, [r2, #6]
 8008456:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008458:	6939      	ldr	r1, [r7, #16]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	88db      	ldrh	r3, [r3, #6]
 800845e:	461a      	mov	r2, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 fa0f 	bl	8009884 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008466:	e06b      	b.n	8008540 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	785a      	ldrb	r2, [r3, #1]
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	88db      	ldrh	r3, [r3, #6]
 8008476:	b2da      	uxtb	r2, r3
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800847e:	6939      	ldr	r1, [r7, #16]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	88db      	ldrh	r3, [r3, #6]
 8008484:	461a      	mov	r2, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 fa2a 	bl	80098e0 <USBD_CtlPrepareRx>
      break;
 800848c:	e058      	b.n	8008540 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	7850      	ldrb	r0, [r2, #1]
 800849a:	2200      	movs	r2, #0
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	4798      	blx	r3
      break;
 80084a0:	e04e      	b.n	8008540 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	2b0b      	cmp	r3, #11
 80084a8:	d02e      	beq.n	8008508 <USBD_CDC_Setup+0x104>
 80084aa:	2b0b      	cmp	r3, #11
 80084ac:	dc38      	bgt.n	8008520 <USBD_CDC_Setup+0x11c>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <USBD_CDC_Setup+0xb4>
 80084b2:	2b0a      	cmp	r3, #10
 80084b4:	d014      	beq.n	80084e0 <USBD_CDC_Setup+0xdc>
 80084b6:	e033      	b.n	8008520 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d107      	bne.n	80084d2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80084c2:	f107 030c 	add.w	r3, r7, #12
 80084c6:	2202      	movs	r2, #2
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 f9da 	bl	8009884 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084d0:	e02e      	b.n	8008530 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 f96a 	bl	80097ae <USBD_CtlError>
            ret = USBD_FAIL;
 80084da:	2302      	movs	r3, #2
 80084dc:	75fb      	strb	r3, [r7, #23]
          break;
 80084de:	e027      	b.n	8008530 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d107      	bne.n	80084fa <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80084ea:	f107 030f 	add.w	r3, r7, #15
 80084ee:	2201      	movs	r2, #1
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 f9c6 	bl	8009884 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084f8:	e01a      	b.n	8008530 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f001 f956 	bl	80097ae <USBD_CtlError>
            ret = USBD_FAIL;
 8008502:	2302      	movs	r3, #2
 8008504:	75fb      	strb	r3, [r7, #23]
          break;
 8008506:	e013      	b.n	8008530 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800850e:	2b03      	cmp	r3, #3
 8008510:	d00d      	beq.n	800852e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 f94a 	bl	80097ae <USBD_CtlError>
            ret = USBD_FAIL;
 800851a:	2302      	movs	r3, #2
 800851c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800851e:	e006      	b.n	800852e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 f943 	bl	80097ae <USBD_CtlError>
          ret = USBD_FAIL;
 8008528:	2302      	movs	r3, #2
 800852a:	75fb      	strb	r3, [r7, #23]
          break;
 800852c:	e000      	b.n	8008530 <USBD_CDC_Setup+0x12c>
          break;
 800852e:	bf00      	nop
      }
      break;
 8008530:	e006      	b.n	8008540 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 f93a 	bl	80097ae <USBD_CtlError>
      ret = USBD_FAIL;
 800853a:	2302      	movs	r3, #2
 800853c:	75fb      	strb	r3, [r7, #23]
      break;
 800853e:	bf00      	nop
  }

  return ret;
 8008540:	7dfb      	ldrb	r3, [r7, #23]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800855c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008564:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800856c:	2b00      	cmp	r3, #0
 800856e:	d03a      	beq.n	80085e6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008570:	78fa      	ldrb	r2, [r7, #3]
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	4613      	mov	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	440b      	add	r3, r1
 800857e:	331c      	adds	r3, #28
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d029      	beq.n	80085da <USBD_CDC_DataIn+0x90>
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	331c      	adds	r3, #28
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	78f9      	ldrb	r1, [r7, #3]
 800859a:	68b8      	ldr	r0, [r7, #8]
 800859c:	460b      	mov	r3, r1
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	440b      	add	r3, r1
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	4403      	add	r3, r0
 80085a6:	3320      	adds	r3, #32
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	fbb2 f1f3 	udiv	r1, r2, r3
 80085ae:	fb01 f303 	mul.w	r3, r1, r3
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d110      	bne.n	80085da <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80085b8:	78fa      	ldrb	r2, [r7, #3]
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	331c      	adds	r3, #28
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085cc:	78f9      	ldrb	r1, [r7, #3]
 80085ce:	2300      	movs	r3, #0
 80085d0:	2200      	movs	r2, #0
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 fdd7 	bl	800a186 <USBD_LL_Transmit>
 80085d8:	e003      	b.n	80085e2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	e000      	b.n	80085e8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80085e6:	2302      	movs	r3, #2
  }
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008602:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 fe02 	bl	800a212 <USBD_LL_GetRxDataSize>
 800860e:	4602      	mov	r2, r0
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00d      	beq.n	800863c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008634:	4611      	mov	r1, r2
 8008636:	4798      	blx	r3

    return USBD_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	e000      	b.n	800863e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800863c:	2302      	movs	r3, #2
  }
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008654:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800865c:	2b00      	cmp	r3, #0
 800865e:	d014      	beq.n	800868a <USBD_CDC_EP0_RxReady+0x44>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008666:	2bff      	cmp	r3, #255	@ 0xff
 8008668:	d00f      	beq.n	800868a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008678:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008680:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	22ff      	movs	r2, #255	@ 0xff
 8008686:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2243      	movs	r2, #67	@ 0x43
 80086a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80086a2:	4b03      	ldr	r3, [pc, #12]	@ (80086b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	20000098 	.word	0x20000098

080086b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2243      	movs	r2, #67	@ 0x43
 80086c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80086c2:	4b03      	ldr	r3, [pc, #12]	@ (80086d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	20000054 	.word	0x20000054

080086d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2243      	movs	r2, #67	@ 0x43
 80086e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80086e2:	4b03      	ldr	r3, [pc, #12]	@ (80086f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	200000dc 	.word	0x200000dc

080086f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	220a      	movs	r2, #10
 8008700:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008702:	4b03      	ldr	r3, [pc, #12]	@ (8008710 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008704:	4618      	mov	r0, r3
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	20000010 	.word	0x20000010

08008714 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800871e:	2302      	movs	r3, #2
 8008720:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008734:	7bfb      	ldrb	r3, [r7, #15]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008742:	b480      	push	{r7}
 8008744:	b087      	sub	sp, #28
 8008746:	af00      	add	r7, sp, #0
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	4613      	mov	r3, r2
 800874e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008756:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008760:	88fa      	ldrh	r2, [r7, #6]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	371c      	adds	r7, #28
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008776:	b480      	push	{r7}
 8008778:	b085      	sub	sp, #20
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008786:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01c      	beq.n	80087f2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d115      	bne.n	80087ee <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	2181      	movs	r1, #129	@ 0x81
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 fcce 	bl	800a186 <USBD_LL_Transmit>

      return USBD_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	e002      	b.n	80087f4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e000      	b.n	80087f4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80087f2:	2302      	movs	r3, #2
  }
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800880a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008812:	2b00      	cmp	r3, #0
 8008814:	d017      	beq.n	8008846 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	7c1b      	ldrb	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d109      	bne.n	8008832 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008828:	2101      	movs	r1, #1
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 fcce 	bl	800a1cc <USBD_LL_PrepareReceive>
 8008830:	e007      	b.n	8008842 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008838:	2340      	movs	r3, #64	@ 0x40
 800883a:	2101      	movs	r1, #1
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 fcc5 	bl	800a1cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	e000      	b.n	8008848 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008846:	2302      	movs	r3, #2
  }
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4613      	mov	r3, r2
 800885c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008864:	2302      	movs	r3, #2
 8008866:	e01a      	b.n	800889e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d003      	beq.n	8008888 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	79fa      	ldrb	r2, [r7, #7]
 8008894:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f001 fb30 	bl	8009efc <USBD_LL_Init>

  return USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b085      	sub	sp, #20
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d006      	beq.n	80088c8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]
 80088c6:	e001      	b.n	80088cc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80088c8:	2302      	movs	r3, #2
 80088ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f001 fb66 	bl	8009fb4 <USBD_LL_Start>

  return USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008914:	2302      	movs	r3, #2
 8008916:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00c      	beq.n	800893c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	4611      	mov	r1, r2
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b082      	sub	sp, #8
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	4611      	mov	r1, r2
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	4798      	blx	r3

  return USBD_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fedb 	bl	800973a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80089a0:	f003 031f 	and.w	r3, r3, #31
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d016      	beq.n	80089d6 <USBD_LL_SetupStage+0x6a>
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d81c      	bhi.n	80089e6 <USBD_LL_SetupStage+0x7a>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <USBD_LL_SetupStage+0x4a>
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d008      	beq.n	80089c6 <USBD_LL_SetupStage+0x5a>
 80089b4:	e017      	b.n	80089e6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f9ce 	bl	8008d60 <USBD_StdDevReq>
      break;
 80089c4:	e01a      	b.n	80089fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa30 	bl	8008e34 <USBD_StdItfReq>
      break;
 80089d4:	e012      	b.n	80089fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa70 	bl	8008ec4 <USBD_StdEPReq>
      break;
 80089e4:	e00a      	b.n	80089fc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80089ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f001 fb3d 	bl	800a074 <USBD_LL_StallEP>
      break;
 80089fa:	bf00      	nop
  }

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b086      	sub	sp, #24
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	607a      	str	r2, [r7, #4]
 8008a12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d14b      	bne.n	8008ab2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008a20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d134      	bne.n	8008a96 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	68da      	ldr	r2, [r3, #12]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d919      	bls.n	8008a6c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	1ad2      	subs	r2, r2, r3
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d203      	bcs.n	8008a5a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	e002      	b.n	8008a60 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 ff59 	bl	800991c <USBD_CtlContinueRx>
 8008a6a:	e038      	b.n	8008ade <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00a      	beq.n	8008a8e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d105      	bne.n	8008a8e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 ff56 	bl	8009940 <USBD_CtlSendStatus>
 8008a94:	e023      	b.n	8008ade <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a9c:	2b05      	cmp	r3, #5
 8008a9e:	d11e      	bne.n	8008ade <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f001 fae2 	bl	800a074 <USBD_LL_StallEP>
 8008ab0:	e015      	b.n	8008ade <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00d      	beq.n	8008ada <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d108      	bne.n	8008ada <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	7afa      	ldrb	r2, [r7, #11]
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	4798      	blx	r3
 8008ad8:	e001      	b.n	8008ade <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ada:	2302      	movs	r3, #2
 8008adc:	e000      	b.n	8008ae0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	460b      	mov	r3, r1
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008af6:	7afb      	ldrb	r3, [r7, #11]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d17f      	bne.n	8008bfc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3314      	adds	r3, #20
 8008b00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d15c      	bne.n	8008bc6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	68da      	ldr	r2, [r3, #12]
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d915      	bls.n	8008b44 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	1ad2      	subs	r2, r2, r3
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fec3 	bl	80098bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b36:	2300      	movs	r3, #0
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f001 fb45 	bl	800a1cc <USBD_LL_PrepareReceive>
 8008b42:	e04e      	b.n	8008be2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	6912      	ldr	r2, [r2, #16]
 8008b4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b50:	fb01 f202 	mul.w	r2, r1, r2
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d11c      	bne.n	8008b94 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	689a      	ldr	r2, [r3, #8]
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d316      	bcc.n	8008b94 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	689a      	ldr	r2, [r3, #8]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d20f      	bcs.n	8008b94 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b74:	2200      	movs	r2, #0
 8008b76:	2100      	movs	r1, #0
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 fe9f 	bl	80098bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b86:	2300      	movs	r3, #0
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f001 fb1d 	bl	800a1cc <USBD_LL_PrepareReceive>
 8008b92:	e026      	b.n	8008be2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00a      	beq.n	8008bb6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d105      	bne.n	8008bb6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008bb6:	2180      	movs	r1, #128	@ 0x80
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f001 fa5b 	bl	800a074 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 fed1 	bl	8009966 <USBD_CtlReceiveStatus>
 8008bc4:	e00d      	b.n	8008be2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d004      	beq.n	8008bda <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d103      	bne.n	8008be2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008bda:	2180      	movs	r1, #128	@ 0x80
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f001 fa49 	bl	800a074 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d11d      	bne.n	8008c28 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff fe80 	bl	80088f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008bfa:	e015      	b.n	8008c28 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00d      	beq.n	8008c24 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d108      	bne.n	8008c24 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	7afa      	ldrb	r2, [r7, #11]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	4798      	blx	r3
 8008c22:	e001      	b.n	8008c28 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c24:	2302      	movs	r3, #2
 8008c26:	e000      	b.n	8008c2a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c3a:	2340      	movs	r3, #64	@ 0x40
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2100      	movs	r1, #0
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 f9d2 	bl	8009fea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2240      	movs	r2, #64	@ 0x40
 8008c52:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c56:	2340      	movs	r3, #64	@ 0x40
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2180      	movs	r1, #128	@ 0x80
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 f9c4 	bl	8009fea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2240      	movs	r2, #64	@ 0x40
 8008c6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6852      	ldr	r2, [r2, #4]
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	4798      	blx	r3
  }

  return USBD_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	78fa      	ldrb	r2, [r7, #3]
 8008cc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2204      	movs	r2, #4
 8008cec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d105      	bne.n	8008d1c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d10b      	bne.n	8008d54 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d76:	2b40      	cmp	r3, #64	@ 0x40
 8008d78:	d005      	beq.n	8008d86 <USBD_StdDevReq+0x26>
 8008d7a:	2b40      	cmp	r3, #64	@ 0x40
 8008d7c:	d84f      	bhi.n	8008e1e <USBD_StdDevReq+0xbe>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d009      	beq.n	8008d96 <USBD_StdDevReq+0x36>
 8008d82:	2b20      	cmp	r3, #32
 8008d84:	d14b      	bne.n	8008e1e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
      break;
 8008d94:	e048      	b.n	8008e28 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	785b      	ldrb	r3, [r3, #1]
 8008d9a:	2b09      	cmp	r3, #9
 8008d9c:	d839      	bhi.n	8008e12 <USBD_StdDevReq+0xb2>
 8008d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008da4 <USBD_StdDevReq+0x44>)
 8008da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da4:	08008df5 	.word	0x08008df5
 8008da8:	08008e09 	.word	0x08008e09
 8008dac:	08008e13 	.word	0x08008e13
 8008db0:	08008dff 	.word	0x08008dff
 8008db4:	08008e13 	.word	0x08008e13
 8008db8:	08008dd7 	.word	0x08008dd7
 8008dbc:	08008dcd 	.word	0x08008dcd
 8008dc0:	08008e13 	.word	0x08008e13
 8008dc4:	08008deb 	.word	0x08008deb
 8008dc8:	08008de1 	.word	0x08008de1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f9dc 	bl	800918c <USBD_GetDescriptor>
          break;
 8008dd4:	e022      	b.n	8008e1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fb3f 	bl	800945c <USBD_SetAddress>
          break;
 8008dde:	e01d      	b.n	8008e1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fb7e 	bl	80094e4 <USBD_SetConfig>
          break;
 8008de8:	e018      	b.n	8008e1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fc07 	bl	8009600 <USBD_GetConfig>
          break;
 8008df2:	e013      	b.n	8008e1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fc37 	bl	800966a <USBD_GetStatus>
          break;
 8008dfc:	e00e      	b.n	8008e1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fc65 	bl	80096d0 <USBD_SetFeature>
          break;
 8008e06:	e009      	b.n	8008e1c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fc74 	bl	80096f8 <USBD_ClrFeature>
          break;
 8008e10:	e004      	b.n	8008e1c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fcca 	bl	80097ae <USBD_CtlError>
          break;
 8008e1a:	bf00      	nop
      }
      break;
 8008e1c:	e004      	b.n	8008e28 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fcc4 	bl	80097ae <USBD_CtlError>
      break;
 8008e26:	bf00      	nop
  }

  return ret;
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop

08008e34 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e4a:	2b40      	cmp	r3, #64	@ 0x40
 8008e4c:	d005      	beq.n	8008e5a <USBD_StdItfReq+0x26>
 8008e4e:	2b40      	cmp	r3, #64	@ 0x40
 8008e50:	d82e      	bhi.n	8008eb0 <USBD_StdItfReq+0x7c>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <USBD_StdItfReq+0x26>
 8008e56:	2b20      	cmp	r3, #32
 8008e58:	d12a      	bne.n	8008eb0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e60:	3b01      	subs	r3, #1
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d81d      	bhi.n	8008ea2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	889b      	ldrh	r3, [r3, #4]
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d813      	bhi.n	8008e98 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	4798      	blx	r3
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	88db      	ldrh	r3, [r3, #6]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d110      	bne.n	8008eac <USBD_StdItfReq+0x78>
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10d      	bne.n	8008eac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fd55 	bl	8009940 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e96:	e009      	b.n	8008eac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fc87 	bl	80097ae <USBD_CtlError>
          break;
 8008ea0:	e004      	b.n	8008eac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fc82 	bl	80097ae <USBD_CtlError>
          break;
 8008eaa:	e000      	b.n	8008eae <USBD_StdItfReq+0x7a>
          break;
 8008eac:	bf00      	nop
      }
      break;
 8008eae:	e004      	b.n	8008eba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fc7b 	bl	80097ae <USBD_CtlError>
      break;
 8008eb8:	bf00      	nop
  }

  return USBD_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	889b      	ldrh	r3, [r3, #4]
 8008ed6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ee0:	2b40      	cmp	r3, #64	@ 0x40
 8008ee2:	d007      	beq.n	8008ef4 <USBD_StdEPReq+0x30>
 8008ee4:	2b40      	cmp	r3, #64	@ 0x40
 8008ee6:	f200 8146 	bhi.w	8009176 <USBD_StdEPReq+0x2b2>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <USBD_StdEPReq+0x40>
 8008eee:	2b20      	cmp	r3, #32
 8008ef0:	f040 8141 	bne.w	8009176 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
      break;
 8008f02:	e13d      	b.n	8009180 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	d10a      	bne.n	8008f26 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	4798      	blx	r3
 8008f1e:	4603      	mov	r3, r0
 8008f20:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	e12d      	b.n	8009182 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	785b      	ldrb	r3, [r3, #1]
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d007      	beq.n	8008f3e <USBD_StdEPReq+0x7a>
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	f300 811b 	bgt.w	800916a <USBD_StdEPReq+0x2a6>
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d072      	beq.n	800901e <USBD_StdEPReq+0x15a>
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d03a      	beq.n	8008fb2 <USBD_StdEPReq+0xee>
 8008f3c:	e115      	b.n	800916a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d002      	beq.n	8008f4e <USBD_StdEPReq+0x8a>
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d015      	beq.n	8008f78 <USBD_StdEPReq+0xb4>
 8008f4c:	e02b      	b.n	8008fa6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00c      	beq.n	8008f6e <USBD_StdEPReq+0xaa>
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b80      	cmp	r3, #128	@ 0x80
 8008f58:	d009      	beq.n	8008f6e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 f888 	bl	800a074 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f64:	2180      	movs	r1, #128	@ 0x80
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 f884 	bl	800a074 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f6c:	e020      	b.n	8008fb0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fc1c 	bl	80097ae <USBD_CtlError>
              break;
 8008f76:	e01b      	b.n	8008fb0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	885b      	ldrh	r3, [r3, #2]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10e      	bne.n	8008f9e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00b      	beq.n	8008f9e <USBD_StdEPReq+0xda>
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	2b80      	cmp	r3, #128	@ 0x80
 8008f8a:	d008      	beq.n	8008f9e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	88db      	ldrh	r3, [r3, #6]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d104      	bne.n	8008f9e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 f86b 	bl	800a074 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fcce 	bl	8009940 <USBD_CtlSendStatus>

              break;
 8008fa4:	e004      	b.n	8008fb0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fc00 	bl	80097ae <USBD_CtlError>
              break;
 8008fae:	bf00      	nop
          }
          break;
 8008fb0:	e0e0      	b.n	8009174 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d002      	beq.n	8008fc2 <USBD_StdEPReq+0xfe>
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d015      	beq.n	8008fec <USBD_StdEPReq+0x128>
 8008fc0:	e026      	b.n	8009010 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00c      	beq.n	8008fe2 <USBD_StdEPReq+0x11e>
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	2b80      	cmp	r3, #128	@ 0x80
 8008fcc:	d009      	beq.n	8008fe2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 f84e 	bl	800a074 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008fd8:	2180      	movs	r1, #128	@ 0x80
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 f84a 	bl	800a074 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fe0:	e01c      	b.n	800901c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fbe2 	bl	80097ae <USBD_CtlError>
              break;
 8008fea:	e017      	b.n	800901c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	885b      	ldrh	r3, [r3, #2]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d112      	bne.n	800901a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d004      	beq.n	8009008 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 f855 	bl	800a0b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fc99 	bl	8009940 <USBD_CtlSendStatus>
              }
              break;
 800900e:	e004      	b.n	800901a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fbcb 	bl	80097ae <USBD_CtlError>
              break;
 8009018:	e000      	b.n	800901c <USBD_StdEPReq+0x158>
              break;
 800901a:	bf00      	nop
          }
          break;
 800901c:	e0aa      	b.n	8009174 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009024:	2b02      	cmp	r3, #2
 8009026:	d002      	beq.n	800902e <USBD_StdEPReq+0x16a>
 8009028:	2b03      	cmp	r3, #3
 800902a:	d032      	beq.n	8009092 <USBD_StdEPReq+0x1ce>
 800902c:	e097      	b.n	800915e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d007      	beq.n	8009044 <USBD_StdEPReq+0x180>
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	2b80      	cmp	r3, #128	@ 0x80
 8009038:	d004      	beq.n	8009044 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fbb6 	bl	80097ae <USBD_CtlError>
                break;
 8009042:	e091      	b.n	8009168 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009048:	2b00      	cmp	r3, #0
 800904a:	da0b      	bge.n	8009064 <USBD_StdEPReq+0x1a0>
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009052:	4613      	mov	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	3310      	adds	r3, #16
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	4413      	add	r3, r2
 8009060:	3304      	adds	r3, #4
 8009062:	e00b      	b.n	800907c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	4413      	add	r3, r2
 800907a:	3304      	adds	r3, #4
 800907c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2202      	movs	r2, #2
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fbfa 	bl	8009884 <USBD_CtlSendData>
              break;
 8009090:	e06a      	b.n	8009168 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009096:	2b00      	cmp	r3, #0
 8009098:	da11      	bge.n	80090be <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	f003 020f 	and.w	r2, r3, #15
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	4613      	mov	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	440b      	add	r3, r1
 80090ac:	3318      	adds	r3, #24
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d117      	bne.n	80090e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fb79 	bl	80097ae <USBD_CtlError>
                  break;
 80090bc:	e054      	b.n	8009168 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	f003 020f 	and.w	r2, r3, #15
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d104      	bne.n	80090e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fb66 	bl	80097ae <USBD_CtlError>
                  break;
 80090e2:	e041      	b.n	8009168 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	da0b      	bge.n	8009104 <USBD_StdEPReq+0x240>
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
 80090ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090f2:	4613      	mov	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	3310      	adds	r3, #16
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	4413      	add	r3, r2
 8009100:	3304      	adds	r3, #4
 8009102:	e00b      	b.n	800911c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	4413      	add	r3, r2
 800911a:	3304      	adds	r3, #4
 800911c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <USBD_StdEPReq+0x266>
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	2b80      	cmp	r3, #128	@ 0x80
 8009128:	d103      	bne.n	8009132 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	e00e      	b.n	8009150 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 ffda 	bl	800a0f0 <USBD_LL_IsStallEP>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2201      	movs	r2, #1
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	e002      	b.n	8009150 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2202      	movs	r2, #2
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fb94 	bl	8009884 <USBD_CtlSendData>
              break;
 800915c:	e004      	b.n	8009168 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fb24 	bl	80097ae <USBD_CtlError>
              break;
 8009166:	bf00      	nop
          }
          break;
 8009168:	e004      	b.n	8009174 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fb1e 	bl	80097ae <USBD_CtlError>
          break;
 8009172:	bf00      	nop
      }
      break;
 8009174:	e004      	b.n	8009180 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fb18 	bl	80097ae <USBD_CtlError>
      break;
 800917e:	bf00      	nop
  }

  return ret;
 8009180:	7bfb      	ldrb	r3, [r7, #15]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009196:	2300      	movs	r3, #0
 8009198:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800919a:	2300      	movs	r3, #0
 800919c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	885b      	ldrh	r3, [r3, #2]
 80091a6:	0a1b      	lsrs	r3, r3, #8
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	3b01      	subs	r3, #1
 80091ac:	2b06      	cmp	r3, #6
 80091ae:	f200 8128 	bhi.w	8009402 <USBD_GetDescriptor+0x276>
 80091b2:	a201      	add	r2, pc, #4	@ (adr r2, 80091b8 <USBD_GetDescriptor+0x2c>)
 80091b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b8:	080091d5 	.word	0x080091d5
 80091bc:	080091ed 	.word	0x080091ed
 80091c0:	0800922d 	.word	0x0800922d
 80091c4:	08009403 	.word	0x08009403
 80091c8:	08009403 	.word	0x08009403
 80091cc:	080093a3 	.word	0x080093a3
 80091d0:	080093cf 	.word	0x080093cf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	7c12      	ldrb	r2, [r2, #16]
 80091e0:	f107 0108 	add.w	r1, r7, #8
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
 80091e8:	60f8      	str	r0, [r7, #12]
      break;
 80091ea:	e112      	b.n	8009412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	7c1b      	ldrb	r3, [r3, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10d      	bne.n	8009210 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091fc:	f107 0208 	add.w	r2, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3301      	adds	r3, #1
 800920a:	2202      	movs	r2, #2
 800920c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800920e:	e100      	b.n	8009412 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009218:	f107 0208 	add.w	r2, r7, #8
 800921c:	4610      	mov	r0, r2
 800921e:	4798      	blx	r3
 8009220:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	2202      	movs	r2, #2
 8009228:	701a      	strb	r2, [r3, #0]
      break;
 800922a:	e0f2      	b.n	8009412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	885b      	ldrh	r3, [r3, #2]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b05      	cmp	r3, #5
 8009234:	f200 80ac 	bhi.w	8009390 <USBD_GetDescriptor+0x204>
 8009238:	a201      	add	r2, pc, #4	@ (adr r2, 8009240 <USBD_GetDescriptor+0xb4>)
 800923a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923e:	bf00      	nop
 8009240:	08009259 	.word	0x08009259
 8009244:	0800928d 	.word	0x0800928d
 8009248:	080092c1 	.word	0x080092c1
 800924c:	080092f5 	.word	0x080092f5
 8009250:	08009329 	.word	0x08009329
 8009254:	0800935d 	.word	0x0800935d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00b      	beq.n	800927c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	7c12      	ldrb	r2, [r2, #16]
 8009270:	f107 0108 	add.w	r1, r7, #8
 8009274:	4610      	mov	r0, r2
 8009276:	4798      	blx	r3
 8009278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800927a:	e091      	b.n	80093a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fa95 	bl	80097ae <USBD_CtlError>
            err++;
 8009284:	7afb      	ldrb	r3, [r7, #11]
 8009286:	3301      	adds	r3, #1
 8009288:	72fb      	strb	r3, [r7, #11]
          break;
 800928a:	e089      	b.n	80093a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00b      	beq.n	80092b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	7c12      	ldrb	r2, [r2, #16]
 80092a4:	f107 0108 	add.w	r1, r7, #8
 80092a8:	4610      	mov	r0, r2
 80092aa:	4798      	blx	r3
 80092ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ae:	e077      	b.n	80093a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fa7b 	bl	80097ae <USBD_CtlError>
            err++;
 80092b8:	7afb      	ldrb	r3, [r7, #11]
 80092ba:	3301      	adds	r3, #1
 80092bc:	72fb      	strb	r3, [r7, #11]
          break;
 80092be:	e06f      	b.n	80093a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	7c12      	ldrb	r2, [r2, #16]
 80092d8:	f107 0108 	add.w	r1, r7, #8
 80092dc:	4610      	mov	r0, r2
 80092de:	4798      	blx	r3
 80092e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092e2:	e05d      	b.n	80093a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fa61 	bl	80097ae <USBD_CtlError>
            err++;
 80092ec:	7afb      	ldrb	r3, [r7, #11]
 80092ee:	3301      	adds	r3, #1
 80092f0:	72fb      	strb	r3, [r7, #11]
          break;
 80092f2:	e055      	b.n	80093a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	7c12      	ldrb	r2, [r2, #16]
 800930c:	f107 0108 	add.w	r1, r7, #8
 8009310:	4610      	mov	r0, r2
 8009312:	4798      	blx	r3
 8009314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009316:	e043      	b.n	80093a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa47 	bl	80097ae <USBD_CtlError>
            err++;
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	3301      	adds	r3, #1
 8009324:	72fb      	strb	r3, [r7, #11]
          break;
 8009326:	e03b      	b.n	80093a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	7c12      	ldrb	r2, [r2, #16]
 8009340:	f107 0108 	add.w	r1, r7, #8
 8009344:	4610      	mov	r0, r2
 8009346:	4798      	blx	r3
 8009348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800934a:	e029      	b.n	80093a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa2d 	bl	80097ae <USBD_CtlError>
            err++;
 8009354:	7afb      	ldrb	r3, [r7, #11]
 8009356:	3301      	adds	r3, #1
 8009358:	72fb      	strb	r3, [r7, #11]
          break;
 800935a:	e021      	b.n	80093a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	7c12      	ldrb	r2, [r2, #16]
 8009374:	f107 0108 	add.w	r1, r7, #8
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
 800937c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937e:	e00f      	b.n	80093a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fa13 	bl	80097ae <USBD_CtlError>
            err++;
 8009388:	7afb      	ldrb	r3, [r7, #11]
 800938a:	3301      	adds	r3, #1
 800938c:	72fb      	strb	r3, [r7, #11]
          break;
 800938e:	e007      	b.n	80093a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa0b 	bl	80097ae <USBD_CtlError>
          err++;
 8009398:	7afb      	ldrb	r3, [r7, #11]
 800939a:	3301      	adds	r3, #1
 800939c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800939e:	e038      	b.n	8009412 <USBD_GetDescriptor+0x286>
 80093a0:	e037      	b.n	8009412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	7c1b      	ldrb	r3, [r3, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d109      	bne.n	80093be <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b2:	f107 0208 	add.w	r2, r7, #8
 80093b6:	4610      	mov	r0, r2
 80093b8:	4798      	blx	r3
 80093ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093bc:	e029      	b.n	8009412 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f9f4 	bl	80097ae <USBD_CtlError>
        err++;
 80093c6:	7afb      	ldrb	r3, [r7, #11]
 80093c8:	3301      	adds	r3, #1
 80093ca:	72fb      	strb	r3, [r7, #11]
      break;
 80093cc:	e021      	b.n	8009412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7c1b      	ldrb	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10d      	bne.n	80093f2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093de:	f107 0208 	add.w	r2, r7, #8
 80093e2:	4610      	mov	r0, r2
 80093e4:	4798      	blx	r3
 80093e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
 80093ec:	2207      	movs	r2, #7
 80093ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093f0:	e00f      	b.n	8009412 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f9da 	bl	80097ae <USBD_CtlError>
        err++;
 80093fa:	7afb      	ldrb	r3, [r7, #11]
 80093fc:	3301      	adds	r3, #1
 80093fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009400:	e007      	b.n	8009412 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f9d2 	bl	80097ae <USBD_CtlError>
      err++;
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	3301      	adds	r3, #1
 800940e:	72fb      	strb	r3, [r7, #11]
      break;
 8009410:	bf00      	nop
  }

  if (err != 0U)
 8009412:	7afb      	ldrb	r3, [r7, #11]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d11c      	bne.n	8009452 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009418:	893b      	ldrh	r3, [r7, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d011      	beq.n	8009442 <USBD_GetDescriptor+0x2b6>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	88db      	ldrh	r3, [r3, #6]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00d      	beq.n	8009442 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	88da      	ldrh	r2, [r3, #6]
 800942a:	893b      	ldrh	r3, [r7, #8]
 800942c:	4293      	cmp	r3, r2
 800942e:	bf28      	it	cs
 8009430:	4613      	movcs	r3, r2
 8009432:	b29b      	uxth	r3, r3
 8009434:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009436:	893b      	ldrh	r3, [r7, #8]
 8009438:	461a      	mov	r2, r3
 800943a:	68f9      	ldr	r1, [r7, #12]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fa21 	bl	8009884 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	88db      	ldrh	r3, [r3, #6]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d104      	bne.n	8009454 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fa78 	bl	8009940 <USBD_CtlSendStatus>
 8009450:	e000      	b.n	8009454 <USBD_GetDescriptor+0x2c8>
    return;
 8009452:	bf00      	nop
    }
  }
}
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop

0800945c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	889b      	ldrh	r3, [r3, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d130      	bne.n	80094d0 <USBD_SetAddress+0x74>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	88db      	ldrh	r3, [r3, #6]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d12c      	bne.n	80094d0 <USBD_SetAddress+0x74>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	885b      	ldrh	r3, [r3, #2]
 800947a:	2b7f      	cmp	r3, #127	@ 0x7f
 800947c:	d828      	bhi.n	80094d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	885b      	ldrh	r3, [r3, #2]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009488:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009490:	2b03      	cmp	r3, #3
 8009492:	d104      	bne.n	800949e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f989 	bl	80097ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800949c:	e01d      	b.n	80094da <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	7bfa      	ldrb	r2, [r7, #15]
 80094a2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fe4c 	bl	800a148 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fa45 	bl	8009940 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2202      	movs	r2, #2
 80094c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c4:	e009      	b.n	80094da <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ce:	e004      	b.n	80094da <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f96b 	bl	80097ae <USBD_CtlError>
  }
}
 80094d8:	bf00      	nop
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
	...

080094e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	885b      	ldrh	r3, [r3, #2]
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	4b41      	ldr	r3, [pc, #260]	@ (80095fc <USBD_SetConfig+0x118>)
 80094f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094f8:	4b40      	ldr	r3, [pc, #256]	@ (80095fc <USBD_SetConfig+0x118>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d904      	bls.n	800950a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f953 	bl	80097ae <USBD_CtlError>
 8009508:	e075      	b.n	80095f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009510:	2b02      	cmp	r3, #2
 8009512:	d002      	beq.n	800951a <USBD_SetConfig+0x36>
 8009514:	2b03      	cmp	r3, #3
 8009516:	d023      	beq.n	8009560 <USBD_SetConfig+0x7c>
 8009518:	e062      	b.n	80095e0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800951a:	4b38      	ldr	r3, [pc, #224]	@ (80095fc <USBD_SetConfig+0x118>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d01a      	beq.n	8009558 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009522:	4b36      	ldr	r3, [pc, #216]	@ (80095fc <USBD_SetConfig+0x118>)
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	461a      	mov	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2203      	movs	r2, #3
 8009530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009534:	4b31      	ldr	r3, [pc, #196]	@ (80095fc <USBD_SetConfig+0x118>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff f9e4 	bl	8008908 <USBD_SetClassConfig>
 8009540:	4603      	mov	r3, r0
 8009542:	2b02      	cmp	r3, #2
 8009544:	d104      	bne.n	8009550 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f930 	bl	80097ae <USBD_CtlError>
            return;
 800954e:	e052      	b.n	80095f6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f9f5 	bl	8009940 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009556:	e04e      	b.n	80095f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f9f1 	bl	8009940 <USBD_CtlSendStatus>
        break;
 800955e:	e04a      	b.n	80095f6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009560:	4b26      	ldr	r3, [pc, #152]	@ (80095fc <USBD_SetConfig+0x118>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d112      	bne.n	800958e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009570:	4b22      	ldr	r3, [pc, #136]	@ (80095fc <USBD_SetConfig+0x118>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	461a      	mov	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800957a:	4b20      	ldr	r3, [pc, #128]	@ (80095fc <USBD_SetConfig+0x118>)
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7ff f9e0 	bl	8008946 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f9da 	bl	8009940 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800958c:	e033      	b.n	80095f6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800958e:	4b1b      	ldr	r3, [pc, #108]	@ (80095fc <USBD_SetConfig+0x118>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	429a      	cmp	r2, r3
 800959a:	d01d      	beq.n	80095d8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7ff f9ce 	bl	8008946 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80095aa:	4b14      	ldr	r3, [pc, #80]	@ (80095fc <USBD_SetConfig+0x118>)
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80095b4:	4b11      	ldr	r3, [pc, #68]	@ (80095fc <USBD_SetConfig+0x118>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7ff f9a4 	bl	8008908 <USBD_SetClassConfig>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d104      	bne.n	80095d0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f8f0 	bl	80097ae <USBD_CtlError>
            return;
 80095ce:	e012      	b.n	80095f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f9b5 	bl	8009940 <USBD_CtlSendStatus>
        break;
 80095d6:	e00e      	b.n	80095f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f9b1 	bl	8009940 <USBD_CtlSendStatus>
        break;
 80095de:	e00a      	b.n	80095f6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f8e3 	bl	80097ae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80095e8:	4b04      	ldr	r3, [pc, #16]	@ (80095fc <USBD_SetConfig+0x118>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff f9a9 	bl	8008946 <USBD_ClrClassConfig>
        break;
 80095f4:	bf00      	nop
    }
  }
}
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	20002460 	.word	0x20002460

08009600 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	88db      	ldrh	r3, [r3, #6]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d004      	beq.n	800961c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f8ca 	bl	80097ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800961a:	e022      	b.n	8009662 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009622:	2b02      	cmp	r3, #2
 8009624:	dc02      	bgt.n	800962c <USBD_GetConfig+0x2c>
 8009626:	2b00      	cmp	r3, #0
 8009628:	dc03      	bgt.n	8009632 <USBD_GetConfig+0x32>
 800962a:	e015      	b.n	8009658 <USBD_GetConfig+0x58>
 800962c:	2b03      	cmp	r3, #3
 800962e:	d00b      	beq.n	8009648 <USBD_GetConfig+0x48>
 8009630:	e012      	b.n	8009658 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3308      	adds	r3, #8
 800963c:	2201      	movs	r2, #1
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f91f 	bl	8009884 <USBD_CtlSendData>
        break;
 8009646:	e00c      	b.n	8009662 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	3304      	adds	r3, #4
 800964c:	2201      	movs	r2, #1
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f917 	bl	8009884 <USBD_CtlSendData>
        break;
 8009656:	e004      	b.n	8009662 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f8a7 	bl	80097ae <USBD_CtlError>
        break;
 8009660:	bf00      	nop
}
 8009662:	bf00      	nop
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b082      	sub	sp, #8
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800967a:	3b01      	subs	r3, #1
 800967c:	2b02      	cmp	r3, #2
 800967e:	d81e      	bhi.n	80096be <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	88db      	ldrh	r3, [r3, #6]
 8009684:	2b02      	cmp	r3, #2
 8009686:	d004      	beq.n	8009692 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f88f 	bl	80097ae <USBD_CtlError>
        break;
 8009690:	e01a      	b.n	80096c8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d005      	beq.n	80096ae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	f043 0202 	orr.w	r2, r3, #2
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	330c      	adds	r3, #12
 80096b2:	2202      	movs	r2, #2
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f8e4 	bl	8009884 <USBD_CtlSendData>
      break;
 80096bc:	e004      	b.n	80096c8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f874 	bl	80097ae <USBD_CtlError>
      break;
 80096c6:	bf00      	nop
  }
}
 80096c8:	bf00      	nop
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	885b      	ldrh	r3, [r3, #2]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d106      	bne.n	80096f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f928 	bl	8009940 <USBD_CtlSendStatus>
  }
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009708:	3b01      	subs	r3, #1
 800970a:	2b02      	cmp	r3, #2
 800970c:	d80b      	bhi.n	8009726 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	885b      	ldrh	r3, [r3, #2]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d10c      	bne.n	8009730 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f90e 	bl	8009940 <USBD_CtlSendStatus>
      }
      break;
 8009724:	e004      	b.n	8009730 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f840 	bl	80097ae <USBD_CtlError>
      break;
 800972e:	e000      	b.n	8009732 <USBD_ClrFeature+0x3a>
      break;
 8009730:	bf00      	nop
  }
}
 8009732:	bf00      	nop
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	781a      	ldrb	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	785a      	ldrb	r2, [r3, #1]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	3302      	adds	r3, #2
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	3303      	adds	r3, #3
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	b29b      	uxth	r3, r3
 8009766:	4413      	add	r3, r2
 8009768:	b29a      	uxth	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	3304      	adds	r3, #4
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	3305      	adds	r3, #5
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	021b      	lsls	r3, r3, #8
 800977e:	b29b      	uxth	r3, r3
 8009780:	4413      	add	r3, r2
 8009782:	b29a      	uxth	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	3306      	adds	r3, #6
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	461a      	mov	r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	3307      	adds	r3, #7
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	021b      	lsls	r3, r3, #8
 8009798:	b29b      	uxth	r3, r3
 800979a:	4413      	add	r3, r2
 800979c:	b29a      	uxth	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	80da      	strh	r2, [r3, #6]

}
 80097a2:	bf00      	nop
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80097b8:	2180      	movs	r1, #128	@ 0x80
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fc5a 	bl	800a074 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80097c0:	2100      	movs	r1, #0
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fc56 	bl	800a074 <USBD_LL_StallEP>
}
 80097c8:	bf00      	nop
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d032      	beq.n	800984c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f834 	bl	8009854 <USBD_GetLen>
 80097ec:	4603      	mov	r3, r0
 80097ee:	3301      	adds	r3, #1
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
 80097fc:	1c5a      	adds	r2, r3, #1
 80097fe:	75fa      	strb	r2, [r7, #23]
 8009800:	461a      	mov	r2, r3
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	4413      	add	r3, r2
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	7812      	ldrb	r2, [r2, #0]
 800980a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800980c:	7dfb      	ldrb	r3, [r7, #23]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	75fa      	strb	r2, [r7, #23]
 8009812:	461a      	mov	r2, r3
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	4413      	add	r3, r2
 8009818:	2203      	movs	r2, #3
 800981a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800981c:	e012      	b.n	8009844 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	60fa      	str	r2, [r7, #12]
 8009824:	7dfa      	ldrb	r2, [r7, #23]
 8009826:	1c51      	adds	r1, r2, #1
 8009828:	75f9      	strb	r1, [r7, #23]
 800982a:	4611      	mov	r1, r2
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	440a      	add	r2, r1
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	75fa      	strb	r2, [r7, #23]
 800983a:	461a      	mov	r2, r3
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4413      	add	r3, r2
 8009840:	2200      	movs	r2, #0
 8009842:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e8      	bne.n	800981e <USBD_GetString+0x4e>
    }
  }
}
 800984c:	bf00      	nop
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009860:	e005      	b.n	800986e <USBD_GetLen+0x1a>
  {
    len++;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	3301      	adds	r3, #1
 8009866:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3301      	adds	r3, #1
 800986c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1f5      	bne.n	8009862 <USBD_GetLen+0xe>
  }

  return len;
 8009876:	7bfb      	ldrb	r3, [r7, #15]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	4613      	mov	r3, r2
 8009890:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2202      	movs	r2, #2
 8009896:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800989a:	88fa      	ldrh	r2, [r7, #6]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80098a0:	88fa      	ldrh	r2, [r7, #6]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098a6:	88fb      	ldrh	r3, [r7, #6]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	2100      	movs	r1, #0
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 fc6a 	bl	800a186 <USBD_LL_Transmit>

  return USBD_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	4613      	mov	r3, r2
 80098c8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098ca:	88fb      	ldrh	r3, [r7, #6]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	2100      	movs	r1, #0
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 fc58 	bl	800a186 <USBD_LL_Transmit>

  return USBD_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	4613      	mov	r3, r2
 80098ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2203      	movs	r2, #3
 80098f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80098f6:	88fa      	ldrh	r2, [r7, #6]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80098fe:	88fa      	ldrh	r2, [r7, #6]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009906:	88fb      	ldrh	r3, [r7, #6]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	2100      	movs	r1, #0
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fc5d 	bl	800a1cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	4613      	mov	r3, r2
 8009928:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800992a:	88fb      	ldrh	r3, [r7, #6]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	2100      	movs	r1, #0
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 fc4b 	bl	800a1cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2204      	movs	r2, #4
 800994c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009950:	2300      	movs	r3, #0
 8009952:	2200      	movs	r2, #0
 8009954:	2100      	movs	r1, #0
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fc15 	bl	800a186 <USBD_LL_Transmit>

  return USBD_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b082      	sub	sp, #8
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2205      	movs	r2, #5
 8009972:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009976:	2300      	movs	r3, #0
 8009978:	2200      	movs	r2, #0
 800997a:	2100      	movs	r1, #0
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fc25 	bl	800a1cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009990:	2200      	movs	r2, #0
 8009992:	4912      	ldr	r1, [pc, #72]	@ (80099dc <MX_USB_DEVICE_Init+0x50>)
 8009994:	4812      	ldr	r0, [pc, #72]	@ (80099e0 <MX_USB_DEVICE_Init+0x54>)
 8009996:	f7fe ff5b 	bl	8008850 <USBD_Init>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099a0:	f7f7 f8ac 	bl	8000afc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80099a4:	490f      	ldr	r1, [pc, #60]	@ (80099e4 <MX_USB_DEVICE_Init+0x58>)
 80099a6:	480e      	ldr	r0, [pc, #56]	@ (80099e0 <MX_USB_DEVICE_Init+0x54>)
 80099a8:	f7fe ff7d 	bl	80088a6 <USBD_RegisterClass>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099b2:	f7f7 f8a3 	bl	8000afc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099b6:	490c      	ldr	r1, [pc, #48]	@ (80099e8 <MX_USB_DEVICE_Init+0x5c>)
 80099b8:	4809      	ldr	r0, [pc, #36]	@ (80099e0 <MX_USB_DEVICE_Init+0x54>)
 80099ba:	f7fe feab 	bl	8008714 <USBD_CDC_RegisterInterface>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099c4:	f7f7 f89a 	bl	8000afc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099c8:	4805      	ldr	r0, [pc, #20]	@ (80099e0 <MX_USB_DEVICE_Init+0x54>)
 80099ca:	f7fe ff86 	bl	80088da <USBD_Start>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099d4:	f7f7 f892 	bl	8000afc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099d8:	bf00      	nop
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000130 	.word	0x20000130
 80099e0:	20002464 	.word	0x20002464
 80099e4:	2000001c 	.word	0x2000001c
 80099e8:	20000120 	.word	0x20000120

080099ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099f0:	2200      	movs	r2, #0
 80099f2:	4905      	ldr	r1, [pc, #20]	@ (8009a08 <CDC_Init_FS+0x1c>)
 80099f4:	4805      	ldr	r0, [pc, #20]	@ (8009a0c <CDC_Init_FS+0x20>)
 80099f6:	f7fe fea4 	bl	8008742 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099fa:	4905      	ldr	r1, [pc, #20]	@ (8009a10 <CDC_Init_FS+0x24>)
 80099fc:	4803      	ldr	r0, [pc, #12]	@ (8009a0c <CDC_Init_FS+0x20>)
 80099fe:	f7fe feba 	bl	8008776 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	20002b28 	.word	0x20002b28
 8009a0c:	20002464 	.word	0x20002464
 8009a10:	20002728 	.word	0x20002728

08009a14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a14:	b480      	push	{r7}
 8009a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	6039      	str	r1, [r7, #0]
 8009a2e:	71fb      	strb	r3, [r7, #7]
 8009a30:	4613      	mov	r3, r2
 8009a32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a34:	79fb      	ldrb	r3, [r7, #7]
 8009a36:	2b23      	cmp	r3, #35	@ 0x23
 8009a38:	d84a      	bhi.n	8009ad0 <CDC_Control_FS+0xac>
 8009a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a40 <CDC_Control_FS+0x1c>)
 8009a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a40:	08009ad1 	.word	0x08009ad1
 8009a44:	08009ad1 	.word	0x08009ad1
 8009a48:	08009ad1 	.word	0x08009ad1
 8009a4c:	08009ad1 	.word	0x08009ad1
 8009a50:	08009ad1 	.word	0x08009ad1
 8009a54:	08009ad1 	.word	0x08009ad1
 8009a58:	08009ad1 	.word	0x08009ad1
 8009a5c:	08009ad1 	.word	0x08009ad1
 8009a60:	08009ad1 	.word	0x08009ad1
 8009a64:	08009ad1 	.word	0x08009ad1
 8009a68:	08009ad1 	.word	0x08009ad1
 8009a6c:	08009ad1 	.word	0x08009ad1
 8009a70:	08009ad1 	.word	0x08009ad1
 8009a74:	08009ad1 	.word	0x08009ad1
 8009a78:	08009ad1 	.word	0x08009ad1
 8009a7c:	08009ad1 	.word	0x08009ad1
 8009a80:	08009ad1 	.word	0x08009ad1
 8009a84:	08009ad1 	.word	0x08009ad1
 8009a88:	08009ad1 	.word	0x08009ad1
 8009a8c:	08009ad1 	.word	0x08009ad1
 8009a90:	08009ad1 	.word	0x08009ad1
 8009a94:	08009ad1 	.word	0x08009ad1
 8009a98:	08009ad1 	.word	0x08009ad1
 8009a9c:	08009ad1 	.word	0x08009ad1
 8009aa0:	08009ad1 	.word	0x08009ad1
 8009aa4:	08009ad1 	.word	0x08009ad1
 8009aa8:	08009ad1 	.word	0x08009ad1
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009ad1 	.word	0x08009ad1
 8009ab4:	08009ad1 	.word	0x08009ad1
 8009ab8:	08009ad1 	.word	0x08009ad1
 8009abc:	08009ad1 	.word	0x08009ad1
 8009ac0:	08009ad1 	.word	0x08009ad1
 8009ac4:	08009ad1 	.word	0x08009ad1
 8009ac8:	08009ad1 	.word	0x08009ad1
 8009acc:	08009ad1 	.word	0x08009ad1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ad0:	bf00      	nop
  }

  return (USBD_OK);
 8009ad2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009aea:	6879      	ldr	r1, [r7, #4]
 8009aec:	4806      	ldr	r0, [pc, #24]	@ (8009b08 <CDC_Receive_FS+0x28>)
 8009aee:	f7fe fe42 	bl	8008776 <USBD_CDC_SetRxBuffer>
  Process_USB_Command((char*)&Buf[0]);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7f6 feae 	bl	8000854 <Process_USB_Command>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009af8:	4803      	ldr	r0, [pc, #12]	@ (8009b08 <CDC_Receive_FS+0x28>)
 8009afa:	f7fe fe7f 	bl	80087fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009afe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	20002464 	.word	0x20002464

08009b0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009b54 <CDC_Transmit_FS+0x48>)
 8009b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e00b      	b.n	8009b4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b32:	887b      	ldrh	r3, [r7, #2]
 8009b34:	461a      	mov	r2, r3
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	4806      	ldr	r0, [pc, #24]	@ (8009b54 <CDC_Transmit_FS+0x48>)
 8009b3a:	f7fe fe02 	bl	8008742 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b3e:	4805      	ldr	r0, [pc, #20]	@ (8009b54 <CDC_Transmit_FS+0x48>)
 8009b40:	f7fe fe2d 	bl	800879e <USBD_CDC_TransmitPacket>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20002464 	.word	0x20002464

08009b58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	6039      	str	r1, [r7, #0]
 8009b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2212      	movs	r2, #18
 8009b68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b6a:	4b03      	ldr	r3, [pc, #12]	@ (8009b78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	2000014c 	.word	0x2000014c

08009b7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	6039      	str	r1, [r7, #0]
 8009b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2204      	movs	r2, #4
 8009b8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b8e:	4b03      	ldr	r3, [pc, #12]	@ (8009b9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	20000160 	.word	0x20000160

08009ba0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	6039      	str	r1, [r7, #0]
 8009baa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bac:	79fb      	ldrb	r3, [r7, #7]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d105      	bne.n	8009bbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	4907      	ldr	r1, [pc, #28]	@ (8009bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bb6:	4808      	ldr	r0, [pc, #32]	@ (8009bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bb8:	f7ff fe0a 	bl	80097d0 <USBD_GetString>
 8009bbc:	e004      	b.n	8009bc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	4904      	ldr	r1, [pc, #16]	@ (8009bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bc2:	4805      	ldr	r0, [pc, #20]	@ (8009bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bc4:	f7ff fe04 	bl	80097d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bc8:	4b02      	ldr	r3, [pc, #8]	@ (8009bd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20002f28 	.word	0x20002f28
 8009bd8:	0800ad48 	.word	0x0800ad48

08009bdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	6039      	str	r1, [r7, #0]
 8009be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	4904      	ldr	r1, [pc, #16]	@ (8009bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009bec:	4804      	ldr	r0, [pc, #16]	@ (8009c00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009bee:	f7ff fdef 	bl	80097d0 <USBD_GetString>
  return USBD_StrDesc;
 8009bf2:	4b02      	ldr	r3, [pc, #8]	@ (8009bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20002f28 	.word	0x20002f28
 8009c00:	0800ad60 	.word	0x0800ad60

08009c04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	6039      	str	r1, [r7, #0]
 8009c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	221a      	movs	r2, #26
 8009c14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c16:	f000 f843 	bl	8009ca0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c1a:	4b02      	ldr	r3, [pc, #8]	@ (8009c24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20000164 	.word	0x20000164

08009c28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	6039      	str	r1, [r7, #0]
 8009c32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c34:	79fb      	ldrb	r3, [r7, #7]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d105      	bne.n	8009c46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	4907      	ldr	r1, [pc, #28]	@ (8009c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c3e:	4808      	ldr	r0, [pc, #32]	@ (8009c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c40:	f7ff fdc6 	bl	80097d0 <USBD_GetString>
 8009c44:	e004      	b.n	8009c50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	4904      	ldr	r1, [pc, #16]	@ (8009c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c4a:	4805      	ldr	r0, [pc, #20]	@ (8009c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c4c:	f7ff fdc0 	bl	80097d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c50:	4b02      	ldr	r3, [pc, #8]	@ (8009c5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	20002f28 	.word	0x20002f28
 8009c60:	0800ad74 	.word	0x0800ad74

08009c64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	6039      	str	r1, [r7, #0]
 8009c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d105      	bne.n	8009c82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	4907      	ldr	r1, [pc, #28]	@ (8009c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c7a:	4808      	ldr	r0, [pc, #32]	@ (8009c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c7c:	f7ff fda8 	bl	80097d0 <USBD_GetString>
 8009c80:	e004      	b.n	8009c8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	4904      	ldr	r1, [pc, #16]	@ (8009c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c86:	4805      	ldr	r0, [pc, #20]	@ (8009c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c88:	f7ff fda2 	bl	80097d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c8c:	4b02      	ldr	r3, [pc, #8]	@ (8009c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	20002f28 	.word	0x20002f28
 8009c9c:	0800ad80 	.word	0x0800ad80

08009ca0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ce4 <Get_SerialNum+0x44>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cac:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce8 <Get_SerialNum+0x48>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8009cec <Get_SerialNum+0x4c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d009      	beq.n	8009cda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cc6:	2208      	movs	r2, #8
 8009cc8:	4909      	ldr	r1, [pc, #36]	@ (8009cf0 <Get_SerialNum+0x50>)
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f000 f814 	bl	8009cf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cd0:	2204      	movs	r2, #4
 8009cd2:	4908      	ldr	r1, [pc, #32]	@ (8009cf4 <Get_SerialNum+0x54>)
 8009cd4:	68b8      	ldr	r0, [r7, #8]
 8009cd6:	f000 f80f 	bl	8009cf8 <IntToUnicode>
  }
}
 8009cda:	bf00      	nop
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	1ffff7ac 	.word	0x1ffff7ac
 8009ce8:	1ffff7b0 	.word	0x1ffff7b0
 8009cec:	1ffff7b4 	.word	0x1ffff7b4
 8009cf0:	20000166 	.word	0x20000166
 8009cf4:	20000176 	.word	0x20000176

08009cf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	4613      	mov	r3, r2
 8009d04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	75fb      	strb	r3, [r7, #23]
 8009d0e:	e027      	b.n	8009d60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	0f1b      	lsrs	r3, r3, #28
 8009d14:	2b09      	cmp	r3, #9
 8009d16:	d80b      	bhi.n	8009d30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	0f1b      	lsrs	r3, r3, #28
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	4619      	mov	r1, r3
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	440b      	add	r3, r1
 8009d28:	3230      	adds	r2, #48	@ 0x30
 8009d2a:	b2d2      	uxtb	r2, r2
 8009d2c:	701a      	strb	r2, [r3, #0]
 8009d2e:	e00a      	b.n	8009d46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	0f1b      	lsrs	r3, r3, #28
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	440b      	add	r3, r1
 8009d40:	3237      	adds	r2, #55	@ 0x37
 8009d42:	b2d2      	uxtb	r2, r2
 8009d44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	011b      	lsls	r3, r3, #4
 8009d4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	3301      	adds	r3, #1
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	4413      	add	r3, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	75fb      	strb	r3, [r7, #23]
 8009d60:	7dfa      	ldrb	r2, [r7, #23]
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d3d3      	bcc.n	8009d10 <IntToUnicode+0x18>
  }
}
 8009d68:	bf00      	nop
 8009d6a:	bf00      	nop
 8009d6c:	371c      	adds	r7, #28
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
	...

08009d78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a0d      	ldr	r2, [pc, #52]	@ (8009dbc <HAL_PCD_MspInit+0x44>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d113      	bne.n	8009db2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc0 <HAL_PCD_MspInit+0x48>)
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8009dc0 <HAL_PCD_MspInit+0x48>)
 8009d90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d94:	61d3      	str	r3, [r2, #28]
 8009d96:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc0 <HAL_PCD_MspInit+0x48>)
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009da2:	2200      	movs	r2, #0
 8009da4:	2100      	movs	r1, #0
 8009da6:	2014      	movs	r0, #20
 8009da8:	f7f7 f91d 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009dac:	2014      	movs	r0, #20
 8009dae:	f7f7 f936 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009db2:	bf00      	nop
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	40005c00 	.word	0x40005c00
 8009dc0:	40021000 	.word	0x40021000

08009dc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4610      	mov	r0, r2
 8009ddc:	f7fe fdc6 	bl	800896c <USBD_LL_SetupStage>
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009dfa:	78fa      	ldrb	r2, [r7, #3]
 8009dfc:	6879      	ldr	r1, [r7, #4]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	00db      	lsls	r3, r3, #3
 8009e06:	440b      	add	r3, r1
 8009e08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	4619      	mov	r1, r3
 8009e12:	f7fe fdf8 	bl	8008a06 <USBD_LL_DataOutStage>
}
 8009e16:	bf00      	nop
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009e30:	78fa      	ldrb	r2, [r7, #3]
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	4613      	mov	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	440b      	add	r3, r1
 8009e3e:	3324      	adds	r3, #36	@ 0x24
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	4619      	mov	r1, r3
 8009e46:	f7fe fe4f 	bl	8008ae8 <USBD_LL_DataInStage>
}
 8009e4a:	bf00      	nop
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe ff62 	bl	8008d2a <USBD_LL_SOF>
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e76:	2301      	movs	r3, #1
 8009e78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	795b      	ldrb	r3, [r3, #5]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d001      	beq.n	8009e86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e82:	f7f6 fe3b 	bl	8000afc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009e8c:	7bfa      	ldrb	r2, [r7, #15]
 8009e8e:	4611      	mov	r1, r2
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fe ff0f 	bl	8008cb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe fec8 	bl	8008c32 <USBD_LL_Reset>
}
 8009ea2:	bf00      	nop
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
	...

08009eac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe ff0a 	bl	8008cd4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	7a5b      	ldrb	r3, [r3, #9]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d005      	beq.n	8009ed4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ec8:	4b04      	ldr	r3, [pc, #16]	@ (8009edc <HAL_PCD_SuspendCallback+0x30>)
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	4a03      	ldr	r2, [pc, #12]	@ (8009edc <HAL_PCD_SuspendCallback+0x30>)
 8009ece:	f043 0306 	orr.w	r3, r3, #6
 8009ed2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	e000ed00 	.word	0xe000ed00

08009ee0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe ff05 	bl	8008cfe <USBD_LL_Resume>
}
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f04:	4a29      	ldr	r2, [pc, #164]	@ (8009fac <USBD_LL_Init+0xb0>)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a27      	ldr	r2, [pc, #156]	@ (8009fac <USBD_LL_Init+0xb0>)
 8009f10:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009f14:	4b25      	ldr	r3, [pc, #148]	@ (8009fac <USBD_LL_Init+0xb0>)
 8009f16:	4a26      	ldr	r2, [pc, #152]	@ (8009fb0 <USBD_LL_Init+0xb4>)
 8009f18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f1a:	4b24      	ldr	r3, [pc, #144]	@ (8009fac <USBD_LL_Init+0xb0>)
 8009f1c:	2208      	movs	r2, #8
 8009f1e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f20:	4b22      	ldr	r3, [pc, #136]	@ (8009fac <USBD_LL_Init+0xb0>)
 8009f22:	2202      	movs	r2, #2
 8009f24:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f26:	4b21      	ldr	r3, [pc, #132]	@ (8009fac <USBD_LL_Init+0xb0>)
 8009f28:	2202      	movs	r2, #2
 8009f2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8009fac <USBD_LL_Init+0xb0>)
 8009f2e:	2200      	movs	r2, #0
 8009f30:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f32:	4b1e      	ldr	r3, [pc, #120]	@ (8009fac <USBD_LL_Init+0xb0>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f38:	4b1c      	ldr	r3, [pc, #112]	@ (8009fac <USBD_LL_Init+0xb0>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f3e:	481b      	ldr	r0, [pc, #108]	@ (8009fac <USBD_LL_Init+0xb0>)
 8009f40:	f7f7 fa44 	bl	80013cc <HAL_PCD_Init>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8009f4a:	f7f6 fdd7 	bl	8000afc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f54:	2318      	movs	r3, #24
 8009f56:	2200      	movs	r2, #0
 8009f58:	2100      	movs	r1, #0
 8009f5a:	f7f8 fea7 	bl	8002cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f64:	2358      	movs	r3, #88	@ 0x58
 8009f66:	2200      	movs	r2, #0
 8009f68:	2180      	movs	r1, #128	@ 0x80
 8009f6a:	f7f8 fe9f 	bl	8002cac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f74:	23c0      	movs	r3, #192	@ 0xc0
 8009f76:	2200      	movs	r2, #0
 8009f78:	2181      	movs	r1, #129	@ 0x81
 8009f7a:	f7f8 fe97 	bl	8002cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f84:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	f7f8 fe8e 	bl	8002cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2182      	movs	r1, #130	@ 0x82
 8009f9e:	f7f8 fe85 	bl	8002cac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20003128 	.word	0x20003128
 8009fb0:	40005c00 	.word	0x40005c00

08009fb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7f7 fac5 	bl	800155a <HAL_PCD_Start>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 f952 	bl	800a280 <USBD_Get_USB_Status>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	4608      	mov	r0, r1
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	70fb      	strb	r3, [r7, #3]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	70bb      	strb	r3, [r7, #2]
 800a000:	4613      	mov	r3, r2
 800a002:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a012:	78bb      	ldrb	r3, [r7, #2]
 800a014:	883a      	ldrh	r2, [r7, #0]
 800a016:	78f9      	ldrb	r1, [r7, #3]
 800a018:	f7f7 fbbd 	bl	8001796 <HAL_PCD_EP_Open>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a020:	7bfb      	ldrb	r3, [r7, #15]
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f92c 	bl	800a280 <USBD_Get_USB_Status>
 800a028:	4603      	mov	r3, r0
 800a02a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	460b      	mov	r3, r1
 800a040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a050:	78fa      	ldrb	r2, [r7, #3]
 800a052:	4611      	mov	r1, r2
 800a054:	4618      	mov	r0, r3
 800a056:	f7f7 fbfb 	bl	8001850 <HAL_PCD_EP_Close>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
 800a060:	4618      	mov	r0, r3
 800a062:	f000 f90d 	bl	800a280 <USBD_Get_USB_Status>
 800a066:	4603      	mov	r3, r0
 800a068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	4611      	mov	r1, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f7f7 fca4 	bl	80019e0 <HAL_PCD_EP_SetStall>
 800a098:	4603      	mov	r3, r0
 800a09a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 f8ee 	bl	800a280 <USBD_Get_USB_Status>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7f7 fcd7 	bl	8001a84 <HAL_PCD_EP_ClrStall>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 f8cf 	bl	800a280 <USBD_Get_USB_Status>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a102:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	da0b      	bge.n	800a124 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a10c:	78fb      	ldrb	r3, [r7, #3]
 800a10e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a112:	68f9      	ldr	r1, [r7, #12]
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	440b      	add	r3, r1
 800a11e:	3312      	adds	r3, #18
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	e00b      	b.n	800a13c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a12a:	68f9      	ldr	r1, [r7, #12]
 800a12c:	4613      	mov	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	440b      	add	r3, r1
 800a136:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a13a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a162:	78fa      	ldrb	r2, [r7, #3]
 800a164:	4611      	mov	r1, r2
 800a166:	4618      	mov	r0, r3
 800a168:	f7f7 faf1 	bl	800174e <HAL_PCD_SetAddress>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	4618      	mov	r0, r3
 800a174:	f000 f884 	bl	800a280 <USBD_Get_USB_Status>
 800a178:	4603      	mov	r3, r0
 800a17a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b086      	sub	sp, #24
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	60f8      	str	r0, [r7, #12]
 800a18e:	607a      	str	r2, [r7, #4]
 800a190:	461a      	mov	r2, r3
 800a192:	460b      	mov	r3, r1
 800a194:	72fb      	strb	r3, [r7, #11]
 800a196:	4613      	mov	r3, r2
 800a198:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1a8:	893b      	ldrh	r3, [r7, #8]
 800a1aa:	7af9      	ldrb	r1, [r7, #11]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	f7f7 fbe0 	bl	8001972 <HAL_PCD_EP_Transmit>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 f861 	bl	800a280 <USBD_Get_USB_Status>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	607a      	str	r2, [r7, #4]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	460b      	mov	r3, r1
 800a1da:	72fb      	strb	r3, [r7, #11]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1ee:	893b      	ldrh	r3, [r7, #8]
 800a1f0:	7af9      	ldrb	r1, [r7, #11]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	f7f7 fb74 	bl	80018e0 <HAL_PCD_EP_Receive>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 f83e 	bl	800a280 <USBD_Get_USB_Status>
 800a204:	4603      	mov	r3, r0
 800a206:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a208:	7dbb      	ldrb	r3, [r7, #22]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b082      	sub	sp, #8
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	460b      	mov	r3, r1
 800a21c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a224:	78fa      	ldrb	r2, [r7, #3]
 800a226:	4611      	mov	r1, r2
 800a228:	4618      	mov	r0, r3
 800a22a:	f7f7 fb8a 	bl	8001942 <HAL_PCD_EP_GetRxCount>
 800a22e:	4603      	mov	r3, r0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a240:	4b03      	ldr	r3, [pc, #12]	@ (800a250 <USBD_static_malloc+0x18>)
}
 800a242:	4618      	mov	r0, r3
 800a244:	370c      	adds	r7, #12
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	200033fc 	.word	0x200033fc

0800a254 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]

}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	4603      	mov	r3, r0
 800a288:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a28e:	79fb      	ldrb	r3, [r7, #7]
 800a290:	2b03      	cmp	r3, #3
 800a292:	d817      	bhi.n	800a2c4 <USBD_Get_USB_Status+0x44>
 800a294:	a201      	add	r2, pc, #4	@ (adr r2, 800a29c <USBD_Get_USB_Status+0x1c>)
 800a296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29a:	bf00      	nop
 800a29c:	0800a2ad 	.word	0x0800a2ad
 800a2a0:	0800a2b3 	.word	0x0800a2b3
 800a2a4:	0800a2b9 	.word	0x0800a2b9
 800a2a8:	0800a2bf 	.word	0x0800a2bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b0:	e00b      	b.n	800a2ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b6:	e008      	b.n	800a2ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a2bc:	e005      	b.n	800a2ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2be:	2302      	movs	r3, #2
 800a2c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c2:	e002      	b.n	800a2ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c8:	bf00      	nop
  }
  return usb_status;
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <atoi>:
 800a2d8:	220a      	movs	r2, #10
 800a2da:	2100      	movs	r1, #0
 800a2dc:	f000 b87a 	b.w	800a3d4 <strtol>

0800a2e0 <_strtol_l.constprop.0>:
 800a2e0:	2b24      	cmp	r3, #36	@ 0x24
 800a2e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e6:	4686      	mov	lr, r0
 800a2e8:	4690      	mov	r8, r2
 800a2ea:	d801      	bhi.n	800a2f0 <_strtol_l.constprop.0+0x10>
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d106      	bne.n	800a2fe <_strtol_l.constprop.0+0x1e>
 800a2f0:	f000 f8a2 	bl	800a438 <__errno>
 800a2f4:	2316      	movs	r3, #22
 800a2f6:	6003      	str	r3, [r0, #0]
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2fe:	4834      	ldr	r0, [pc, #208]	@ (800a3d0 <_strtol_l.constprop.0+0xf0>)
 800a300:	460d      	mov	r5, r1
 800a302:	462a      	mov	r2, r5
 800a304:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a308:	5d06      	ldrb	r6, [r0, r4]
 800a30a:	f016 0608 	ands.w	r6, r6, #8
 800a30e:	d1f8      	bne.n	800a302 <_strtol_l.constprop.0+0x22>
 800a310:	2c2d      	cmp	r4, #45	@ 0x2d
 800a312:	d12d      	bne.n	800a370 <_strtol_l.constprop.0+0x90>
 800a314:	782c      	ldrb	r4, [r5, #0]
 800a316:	2601      	movs	r6, #1
 800a318:	1c95      	adds	r5, r2, #2
 800a31a:	f033 0210 	bics.w	r2, r3, #16
 800a31e:	d109      	bne.n	800a334 <_strtol_l.constprop.0+0x54>
 800a320:	2c30      	cmp	r4, #48	@ 0x30
 800a322:	d12a      	bne.n	800a37a <_strtol_l.constprop.0+0x9a>
 800a324:	782a      	ldrb	r2, [r5, #0]
 800a326:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a32a:	2a58      	cmp	r2, #88	@ 0x58
 800a32c:	d125      	bne.n	800a37a <_strtol_l.constprop.0+0x9a>
 800a32e:	786c      	ldrb	r4, [r5, #1]
 800a330:	2310      	movs	r3, #16
 800a332:	3502      	adds	r5, #2
 800a334:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a338:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a33c:	2200      	movs	r2, #0
 800a33e:	fbbc f9f3 	udiv	r9, ip, r3
 800a342:	4610      	mov	r0, r2
 800a344:	fb03 ca19 	mls	sl, r3, r9, ip
 800a348:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a34c:	2f09      	cmp	r7, #9
 800a34e:	d81b      	bhi.n	800a388 <_strtol_l.constprop.0+0xa8>
 800a350:	463c      	mov	r4, r7
 800a352:	42a3      	cmp	r3, r4
 800a354:	dd27      	ble.n	800a3a6 <_strtol_l.constprop.0+0xc6>
 800a356:	1c57      	adds	r7, r2, #1
 800a358:	d007      	beq.n	800a36a <_strtol_l.constprop.0+0x8a>
 800a35a:	4581      	cmp	r9, r0
 800a35c:	d320      	bcc.n	800a3a0 <_strtol_l.constprop.0+0xc0>
 800a35e:	d101      	bne.n	800a364 <_strtol_l.constprop.0+0x84>
 800a360:	45a2      	cmp	sl, r4
 800a362:	db1d      	blt.n	800a3a0 <_strtol_l.constprop.0+0xc0>
 800a364:	fb00 4003 	mla	r0, r0, r3, r4
 800a368:	2201      	movs	r2, #1
 800a36a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a36e:	e7eb      	b.n	800a348 <_strtol_l.constprop.0+0x68>
 800a370:	2c2b      	cmp	r4, #43	@ 0x2b
 800a372:	bf04      	itt	eq
 800a374:	782c      	ldrbeq	r4, [r5, #0]
 800a376:	1c95      	addeq	r5, r2, #2
 800a378:	e7cf      	b.n	800a31a <_strtol_l.constprop.0+0x3a>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1da      	bne.n	800a334 <_strtol_l.constprop.0+0x54>
 800a37e:	2c30      	cmp	r4, #48	@ 0x30
 800a380:	bf0c      	ite	eq
 800a382:	2308      	moveq	r3, #8
 800a384:	230a      	movne	r3, #10
 800a386:	e7d5      	b.n	800a334 <_strtol_l.constprop.0+0x54>
 800a388:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a38c:	2f19      	cmp	r7, #25
 800a38e:	d801      	bhi.n	800a394 <_strtol_l.constprop.0+0xb4>
 800a390:	3c37      	subs	r4, #55	@ 0x37
 800a392:	e7de      	b.n	800a352 <_strtol_l.constprop.0+0x72>
 800a394:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a398:	2f19      	cmp	r7, #25
 800a39a:	d804      	bhi.n	800a3a6 <_strtol_l.constprop.0+0xc6>
 800a39c:	3c57      	subs	r4, #87	@ 0x57
 800a39e:	e7d8      	b.n	800a352 <_strtol_l.constprop.0+0x72>
 800a3a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a4:	e7e1      	b.n	800a36a <_strtol_l.constprop.0+0x8a>
 800a3a6:	1c53      	adds	r3, r2, #1
 800a3a8:	d108      	bne.n	800a3bc <_strtol_l.constprop.0+0xdc>
 800a3aa:	2322      	movs	r3, #34	@ 0x22
 800a3ac:	f8ce 3000 	str.w	r3, [lr]
 800a3b0:	4660      	mov	r0, ip
 800a3b2:	f1b8 0f00 	cmp.w	r8, #0
 800a3b6:	d0a0      	beq.n	800a2fa <_strtol_l.constprop.0+0x1a>
 800a3b8:	1e69      	subs	r1, r5, #1
 800a3ba:	e006      	b.n	800a3ca <_strtol_l.constprop.0+0xea>
 800a3bc:	b106      	cbz	r6, 800a3c0 <_strtol_l.constprop.0+0xe0>
 800a3be:	4240      	negs	r0, r0
 800a3c0:	f1b8 0f00 	cmp.w	r8, #0
 800a3c4:	d099      	beq.n	800a2fa <_strtol_l.constprop.0+0x1a>
 800a3c6:	2a00      	cmp	r2, #0
 800a3c8:	d1f6      	bne.n	800a3b8 <_strtol_l.constprop.0+0xd8>
 800a3ca:	f8c8 1000 	str.w	r1, [r8]
 800a3ce:	e794      	b.n	800a2fa <_strtol_l.constprop.0+0x1a>
 800a3d0:	0800adc1 	.word	0x0800adc1

0800a3d4 <strtol>:
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	460a      	mov	r2, r1
 800a3d8:	4601      	mov	r1, r0
 800a3da:	4802      	ldr	r0, [pc, #8]	@ (800a3e4 <strtol+0x10>)
 800a3dc:	6800      	ldr	r0, [r0, #0]
 800a3de:	f7ff bf7f 	b.w	800a2e0 <_strtol_l.constprop.0>
 800a3e2:	bf00      	nop
 800a3e4:	20000180 	.word	0x20000180

0800a3e8 <siprintf>:
 800a3e8:	b40e      	push	{r1, r2, r3}
 800a3ea:	b500      	push	{lr}
 800a3ec:	b09c      	sub	sp, #112	@ 0x70
 800a3ee:	ab1d      	add	r3, sp, #116	@ 0x74
 800a3f0:	9002      	str	r0, [sp, #8]
 800a3f2:	9006      	str	r0, [sp, #24]
 800a3f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3f8:	4809      	ldr	r0, [pc, #36]	@ (800a420 <siprintf+0x38>)
 800a3fa:	9107      	str	r1, [sp, #28]
 800a3fc:	9104      	str	r1, [sp, #16]
 800a3fe:	4909      	ldr	r1, [pc, #36]	@ (800a424 <siprintf+0x3c>)
 800a400:	f853 2b04 	ldr.w	r2, [r3], #4
 800a404:	9105      	str	r1, [sp, #20]
 800a406:	6800      	ldr	r0, [r0, #0]
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	a902      	add	r1, sp, #8
 800a40c:	f000 f994 	bl	800a738 <_svfiprintf_r>
 800a410:	9b02      	ldr	r3, [sp, #8]
 800a412:	2200      	movs	r2, #0
 800a414:	701a      	strb	r2, [r3, #0]
 800a416:	b01c      	add	sp, #112	@ 0x70
 800a418:	f85d eb04 	ldr.w	lr, [sp], #4
 800a41c:	b003      	add	sp, #12
 800a41e:	4770      	bx	lr
 800a420:	20000180 	.word	0x20000180
 800a424:	ffff0208 	.word	0xffff0208

0800a428 <memset>:
 800a428:	4402      	add	r2, r0
 800a42a:	4603      	mov	r3, r0
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d100      	bne.n	800a432 <memset+0xa>
 800a430:	4770      	bx	lr
 800a432:	f803 1b01 	strb.w	r1, [r3], #1
 800a436:	e7f9      	b.n	800a42c <memset+0x4>

0800a438 <__errno>:
 800a438:	4b01      	ldr	r3, [pc, #4]	@ (800a440 <__errno+0x8>)
 800a43a:	6818      	ldr	r0, [r3, #0]
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	20000180 	.word	0x20000180

0800a444 <__libc_init_array>:
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	4d0d      	ldr	r5, [pc, #52]	@ (800a47c <__libc_init_array+0x38>)
 800a448:	4c0d      	ldr	r4, [pc, #52]	@ (800a480 <__libc_init_array+0x3c>)
 800a44a:	1b64      	subs	r4, r4, r5
 800a44c:	10a4      	asrs	r4, r4, #2
 800a44e:	2600      	movs	r6, #0
 800a450:	42a6      	cmp	r6, r4
 800a452:	d109      	bne.n	800a468 <__libc_init_array+0x24>
 800a454:	4d0b      	ldr	r5, [pc, #44]	@ (800a484 <__libc_init_array+0x40>)
 800a456:	4c0c      	ldr	r4, [pc, #48]	@ (800a488 <__libc_init_array+0x44>)
 800a458:	f000 fc66 	bl	800ad28 <_init>
 800a45c:	1b64      	subs	r4, r4, r5
 800a45e:	10a4      	asrs	r4, r4, #2
 800a460:	2600      	movs	r6, #0
 800a462:	42a6      	cmp	r6, r4
 800a464:	d105      	bne.n	800a472 <__libc_init_array+0x2e>
 800a466:	bd70      	pop	{r4, r5, r6, pc}
 800a468:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46c:	4798      	blx	r3
 800a46e:	3601      	adds	r6, #1
 800a470:	e7ee      	b.n	800a450 <__libc_init_array+0xc>
 800a472:	f855 3b04 	ldr.w	r3, [r5], #4
 800a476:	4798      	blx	r3
 800a478:	3601      	adds	r6, #1
 800a47a:	e7f2      	b.n	800a462 <__libc_init_array+0x1e>
 800a47c:	0800aefc 	.word	0x0800aefc
 800a480:	0800aefc 	.word	0x0800aefc
 800a484:	0800aefc 	.word	0x0800aefc
 800a488:	0800af00 	.word	0x0800af00

0800a48c <__retarget_lock_acquire_recursive>:
 800a48c:	4770      	bx	lr

0800a48e <__retarget_lock_release_recursive>:
 800a48e:	4770      	bx	lr

0800a490 <_free_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4605      	mov	r5, r0
 800a494:	2900      	cmp	r1, #0
 800a496:	d041      	beq.n	800a51c <_free_r+0x8c>
 800a498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a49c:	1f0c      	subs	r4, r1, #4
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	bfb8      	it	lt
 800a4a2:	18e4      	addlt	r4, r4, r3
 800a4a4:	f000 f8e0 	bl	800a668 <__malloc_lock>
 800a4a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a520 <_free_r+0x90>)
 800a4aa:	6813      	ldr	r3, [r2, #0]
 800a4ac:	b933      	cbnz	r3, 800a4bc <_free_r+0x2c>
 800a4ae:	6063      	str	r3, [r4, #4]
 800a4b0:	6014      	str	r4, [r2, #0]
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4b8:	f000 b8dc 	b.w	800a674 <__malloc_unlock>
 800a4bc:	42a3      	cmp	r3, r4
 800a4be:	d908      	bls.n	800a4d2 <_free_r+0x42>
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	1821      	adds	r1, r4, r0
 800a4c4:	428b      	cmp	r3, r1
 800a4c6:	bf01      	itttt	eq
 800a4c8:	6819      	ldreq	r1, [r3, #0]
 800a4ca:	685b      	ldreq	r3, [r3, #4]
 800a4cc:	1809      	addeq	r1, r1, r0
 800a4ce:	6021      	streq	r1, [r4, #0]
 800a4d0:	e7ed      	b.n	800a4ae <_free_r+0x1e>
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	b10b      	cbz	r3, 800a4dc <_free_r+0x4c>
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	d9fa      	bls.n	800a4d2 <_free_r+0x42>
 800a4dc:	6811      	ldr	r1, [r2, #0]
 800a4de:	1850      	adds	r0, r2, r1
 800a4e0:	42a0      	cmp	r0, r4
 800a4e2:	d10b      	bne.n	800a4fc <_free_r+0x6c>
 800a4e4:	6820      	ldr	r0, [r4, #0]
 800a4e6:	4401      	add	r1, r0
 800a4e8:	1850      	adds	r0, r2, r1
 800a4ea:	4283      	cmp	r3, r0
 800a4ec:	6011      	str	r1, [r2, #0]
 800a4ee:	d1e0      	bne.n	800a4b2 <_free_r+0x22>
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	6053      	str	r3, [r2, #4]
 800a4f6:	4408      	add	r0, r1
 800a4f8:	6010      	str	r0, [r2, #0]
 800a4fa:	e7da      	b.n	800a4b2 <_free_r+0x22>
 800a4fc:	d902      	bls.n	800a504 <_free_r+0x74>
 800a4fe:	230c      	movs	r3, #12
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	e7d6      	b.n	800a4b2 <_free_r+0x22>
 800a504:	6820      	ldr	r0, [r4, #0]
 800a506:	1821      	adds	r1, r4, r0
 800a508:	428b      	cmp	r3, r1
 800a50a:	bf04      	itt	eq
 800a50c:	6819      	ldreq	r1, [r3, #0]
 800a50e:	685b      	ldreq	r3, [r3, #4]
 800a510:	6063      	str	r3, [r4, #4]
 800a512:	bf04      	itt	eq
 800a514:	1809      	addeq	r1, r1, r0
 800a516:	6021      	streq	r1, [r4, #0]
 800a518:	6054      	str	r4, [r2, #4]
 800a51a:	e7ca      	b.n	800a4b2 <_free_r+0x22>
 800a51c:	bd38      	pop	{r3, r4, r5, pc}
 800a51e:	bf00      	nop
 800a520:	20003760 	.word	0x20003760

0800a524 <sbrk_aligned>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	4e0f      	ldr	r6, [pc, #60]	@ (800a564 <sbrk_aligned+0x40>)
 800a528:	460c      	mov	r4, r1
 800a52a:	6831      	ldr	r1, [r6, #0]
 800a52c:	4605      	mov	r5, r0
 800a52e:	b911      	cbnz	r1, 800a536 <sbrk_aligned+0x12>
 800a530:	f000 fba6 	bl	800ac80 <_sbrk_r>
 800a534:	6030      	str	r0, [r6, #0]
 800a536:	4621      	mov	r1, r4
 800a538:	4628      	mov	r0, r5
 800a53a:	f000 fba1 	bl	800ac80 <_sbrk_r>
 800a53e:	1c43      	adds	r3, r0, #1
 800a540:	d103      	bne.n	800a54a <sbrk_aligned+0x26>
 800a542:	f04f 34ff 	mov.w	r4, #4294967295
 800a546:	4620      	mov	r0, r4
 800a548:	bd70      	pop	{r4, r5, r6, pc}
 800a54a:	1cc4      	adds	r4, r0, #3
 800a54c:	f024 0403 	bic.w	r4, r4, #3
 800a550:	42a0      	cmp	r0, r4
 800a552:	d0f8      	beq.n	800a546 <sbrk_aligned+0x22>
 800a554:	1a21      	subs	r1, r4, r0
 800a556:	4628      	mov	r0, r5
 800a558:	f000 fb92 	bl	800ac80 <_sbrk_r>
 800a55c:	3001      	adds	r0, #1
 800a55e:	d1f2      	bne.n	800a546 <sbrk_aligned+0x22>
 800a560:	e7ef      	b.n	800a542 <sbrk_aligned+0x1e>
 800a562:	bf00      	nop
 800a564:	2000375c 	.word	0x2000375c

0800a568 <_malloc_r>:
 800a568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a56c:	1ccd      	adds	r5, r1, #3
 800a56e:	f025 0503 	bic.w	r5, r5, #3
 800a572:	3508      	adds	r5, #8
 800a574:	2d0c      	cmp	r5, #12
 800a576:	bf38      	it	cc
 800a578:	250c      	movcc	r5, #12
 800a57a:	2d00      	cmp	r5, #0
 800a57c:	4606      	mov	r6, r0
 800a57e:	db01      	blt.n	800a584 <_malloc_r+0x1c>
 800a580:	42a9      	cmp	r1, r5
 800a582:	d904      	bls.n	800a58e <_malloc_r+0x26>
 800a584:	230c      	movs	r3, #12
 800a586:	6033      	str	r3, [r6, #0]
 800a588:	2000      	movs	r0, #0
 800a58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a664 <_malloc_r+0xfc>
 800a592:	f000 f869 	bl	800a668 <__malloc_lock>
 800a596:	f8d8 3000 	ldr.w	r3, [r8]
 800a59a:	461c      	mov	r4, r3
 800a59c:	bb44      	cbnz	r4, 800a5f0 <_malloc_r+0x88>
 800a59e:	4629      	mov	r1, r5
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f7ff ffbf 	bl	800a524 <sbrk_aligned>
 800a5a6:	1c43      	adds	r3, r0, #1
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	d158      	bne.n	800a65e <_malloc_r+0xf6>
 800a5ac:	f8d8 4000 	ldr.w	r4, [r8]
 800a5b0:	4627      	mov	r7, r4
 800a5b2:	2f00      	cmp	r7, #0
 800a5b4:	d143      	bne.n	800a63e <_malloc_r+0xd6>
 800a5b6:	2c00      	cmp	r4, #0
 800a5b8:	d04b      	beq.n	800a652 <_malloc_r+0xea>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	4639      	mov	r1, r7
 800a5be:	4630      	mov	r0, r6
 800a5c0:	eb04 0903 	add.w	r9, r4, r3
 800a5c4:	f000 fb5c 	bl	800ac80 <_sbrk_r>
 800a5c8:	4581      	cmp	r9, r0
 800a5ca:	d142      	bne.n	800a652 <_malloc_r+0xea>
 800a5cc:	6821      	ldr	r1, [r4, #0]
 800a5ce:	1a6d      	subs	r5, r5, r1
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f7ff ffa6 	bl	800a524 <sbrk_aligned>
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d03a      	beq.n	800a652 <_malloc_r+0xea>
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	442b      	add	r3, r5
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	bb62      	cbnz	r2, 800a644 <_malloc_r+0xdc>
 800a5ea:	f8c8 7000 	str.w	r7, [r8]
 800a5ee:	e00f      	b.n	800a610 <_malloc_r+0xa8>
 800a5f0:	6822      	ldr	r2, [r4, #0]
 800a5f2:	1b52      	subs	r2, r2, r5
 800a5f4:	d420      	bmi.n	800a638 <_malloc_r+0xd0>
 800a5f6:	2a0b      	cmp	r2, #11
 800a5f8:	d917      	bls.n	800a62a <_malloc_r+0xc2>
 800a5fa:	1961      	adds	r1, r4, r5
 800a5fc:	42a3      	cmp	r3, r4
 800a5fe:	6025      	str	r5, [r4, #0]
 800a600:	bf18      	it	ne
 800a602:	6059      	strne	r1, [r3, #4]
 800a604:	6863      	ldr	r3, [r4, #4]
 800a606:	bf08      	it	eq
 800a608:	f8c8 1000 	streq.w	r1, [r8]
 800a60c:	5162      	str	r2, [r4, r5]
 800a60e:	604b      	str	r3, [r1, #4]
 800a610:	4630      	mov	r0, r6
 800a612:	f000 f82f 	bl	800a674 <__malloc_unlock>
 800a616:	f104 000b 	add.w	r0, r4, #11
 800a61a:	1d23      	adds	r3, r4, #4
 800a61c:	f020 0007 	bic.w	r0, r0, #7
 800a620:	1ac2      	subs	r2, r0, r3
 800a622:	bf1c      	itt	ne
 800a624:	1a1b      	subne	r3, r3, r0
 800a626:	50a3      	strne	r3, [r4, r2]
 800a628:	e7af      	b.n	800a58a <_malloc_r+0x22>
 800a62a:	6862      	ldr	r2, [r4, #4]
 800a62c:	42a3      	cmp	r3, r4
 800a62e:	bf0c      	ite	eq
 800a630:	f8c8 2000 	streq.w	r2, [r8]
 800a634:	605a      	strne	r2, [r3, #4]
 800a636:	e7eb      	b.n	800a610 <_malloc_r+0xa8>
 800a638:	4623      	mov	r3, r4
 800a63a:	6864      	ldr	r4, [r4, #4]
 800a63c:	e7ae      	b.n	800a59c <_malloc_r+0x34>
 800a63e:	463c      	mov	r4, r7
 800a640:	687f      	ldr	r7, [r7, #4]
 800a642:	e7b6      	b.n	800a5b2 <_malloc_r+0x4a>
 800a644:	461a      	mov	r2, r3
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	42a3      	cmp	r3, r4
 800a64a:	d1fb      	bne.n	800a644 <_malloc_r+0xdc>
 800a64c:	2300      	movs	r3, #0
 800a64e:	6053      	str	r3, [r2, #4]
 800a650:	e7de      	b.n	800a610 <_malloc_r+0xa8>
 800a652:	230c      	movs	r3, #12
 800a654:	6033      	str	r3, [r6, #0]
 800a656:	4630      	mov	r0, r6
 800a658:	f000 f80c 	bl	800a674 <__malloc_unlock>
 800a65c:	e794      	b.n	800a588 <_malloc_r+0x20>
 800a65e:	6005      	str	r5, [r0, #0]
 800a660:	e7d6      	b.n	800a610 <_malloc_r+0xa8>
 800a662:	bf00      	nop
 800a664:	20003760 	.word	0x20003760

0800a668 <__malloc_lock>:
 800a668:	4801      	ldr	r0, [pc, #4]	@ (800a670 <__malloc_lock+0x8>)
 800a66a:	f7ff bf0f 	b.w	800a48c <__retarget_lock_acquire_recursive>
 800a66e:	bf00      	nop
 800a670:	20003758 	.word	0x20003758

0800a674 <__malloc_unlock>:
 800a674:	4801      	ldr	r0, [pc, #4]	@ (800a67c <__malloc_unlock+0x8>)
 800a676:	f7ff bf0a 	b.w	800a48e <__retarget_lock_release_recursive>
 800a67a:	bf00      	nop
 800a67c:	20003758 	.word	0x20003758

0800a680 <__ssputs_r>:
 800a680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a684:	688e      	ldr	r6, [r1, #8]
 800a686:	461f      	mov	r7, r3
 800a688:	42be      	cmp	r6, r7
 800a68a:	680b      	ldr	r3, [r1, #0]
 800a68c:	4682      	mov	sl, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	4690      	mov	r8, r2
 800a692:	d82d      	bhi.n	800a6f0 <__ssputs_r+0x70>
 800a694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a698:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a69c:	d026      	beq.n	800a6ec <__ssputs_r+0x6c>
 800a69e:	6965      	ldr	r5, [r4, #20]
 800a6a0:	6909      	ldr	r1, [r1, #16]
 800a6a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6a6:	eba3 0901 	sub.w	r9, r3, r1
 800a6aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6ae:	1c7b      	adds	r3, r7, #1
 800a6b0:	444b      	add	r3, r9
 800a6b2:	106d      	asrs	r5, r5, #1
 800a6b4:	429d      	cmp	r5, r3
 800a6b6:	bf38      	it	cc
 800a6b8:	461d      	movcc	r5, r3
 800a6ba:	0553      	lsls	r3, r2, #21
 800a6bc:	d527      	bpl.n	800a70e <__ssputs_r+0x8e>
 800a6be:	4629      	mov	r1, r5
 800a6c0:	f7ff ff52 	bl	800a568 <_malloc_r>
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	b360      	cbz	r0, 800a722 <__ssputs_r+0xa2>
 800a6c8:	6921      	ldr	r1, [r4, #16]
 800a6ca:	464a      	mov	r2, r9
 800a6cc:	f000 fae8 	bl	800aca0 <memcpy>
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a6d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	6126      	str	r6, [r4, #16]
 800a6de:	6165      	str	r5, [r4, #20]
 800a6e0:	444e      	add	r6, r9
 800a6e2:	eba5 0509 	sub.w	r5, r5, r9
 800a6e6:	6026      	str	r6, [r4, #0]
 800a6e8:	60a5      	str	r5, [r4, #8]
 800a6ea:	463e      	mov	r6, r7
 800a6ec:	42be      	cmp	r6, r7
 800a6ee:	d900      	bls.n	800a6f2 <__ssputs_r+0x72>
 800a6f0:	463e      	mov	r6, r7
 800a6f2:	6820      	ldr	r0, [r4, #0]
 800a6f4:	4632      	mov	r2, r6
 800a6f6:	4641      	mov	r1, r8
 800a6f8:	f000 faa8 	bl	800ac4c <memmove>
 800a6fc:	68a3      	ldr	r3, [r4, #8]
 800a6fe:	1b9b      	subs	r3, r3, r6
 800a700:	60a3      	str	r3, [r4, #8]
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	4433      	add	r3, r6
 800a706:	6023      	str	r3, [r4, #0]
 800a708:	2000      	movs	r0, #0
 800a70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a70e:	462a      	mov	r2, r5
 800a710:	f000 fad4 	bl	800acbc <_realloc_r>
 800a714:	4606      	mov	r6, r0
 800a716:	2800      	cmp	r0, #0
 800a718:	d1e0      	bne.n	800a6dc <__ssputs_r+0x5c>
 800a71a:	6921      	ldr	r1, [r4, #16]
 800a71c:	4650      	mov	r0, sl
 800a71e:	f7ff feb7 	bl	800a490 <_free_r>
 800a722:	230c      	movs	r3, #12
 800a724:	f8ca 3000 	str.w	r3, [sl]
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a72e:	81a3      	strh	r3, [r4, #12]
 800a730:	f04f 30ff 	mov.w	r0, #4294967295
 800a734:	e7e9      	b.n	800a70a <__ssputs_r+0x8a>
	...

0800a738 <_svfiprintf_r>:
 800a738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73c:	4698      	mov	r8, r3
 800a73e:	898b      	ldrh	r3, [r1, #12]
 800a740:	061b      	lsls	r3, r3, #24
 800a742:	b09d      	sub	sp, #116	@ 0x74
 800a744:	4607      	mov	r7, r0
 800a746:	460d      	mov	r5, r1
 800a748:	4614      	mov	r4, r2
 800a74a:	d510      	bpl.n	800a76e <_svfiprintf_r+0x36>
 800a74c:	690b      	ldr	r3, [r1, #16]
 800a74e:	b973      	cbnz	r3, 800a76e <_svfiprintf_r+0x36>
 800a750:	2140      	movs	r1, #64	@ 0x40
 800a752:	f7ff ff09 	bl	800a568 <_malloc_r>
 800a756:	6028      	str	r0, [r5, #0]
 800a758:	6128      	str	r0, [r5, #16]
 800a75a:	b930      	cbnz	r0, 800a76a <_svfiprintf_r+0x32>
 800a75c:	230c      	movs	r3, #12
 800a75e:	603b      	str	r3, [r7, #0]
 800a760:	f04f 30ff 	mov.w	r0, #4294967295
 800a764:	b01d      	add	sp, #116	@ 0x74
 800a766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76a:	2340      	movs	r3, #64	@ 0x40
 800a76c:	616b      	str	r3, [r5, #20]
 800a76e:	2300      	movs	r3, #0
 800a770:	9309      	str	r3, [sp, #36]	@ 0x24
 800a772:	2320      	movs	r3, #32
 800a774:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a778:	f8cd 800c 	str.w	r8, [sp, #12]
 800a77c:	2330      	movs	r3, #48	@ 0x30
 800a77e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a91c <_svfiprintf_r+0x1e4>
 800a782:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a786:	f04f 0901 	mov.w	r9, #1
 800a78a:	4623      	mov	r3, r4
 800a78c:	469a      	mov	sl, r3
 800a78e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a792:	b10a      	cbz	r2, 800a798 <_svfiprintf_r+0x60>
 800a794:	2a25      	cmp	r2, #37	@ 0x25
 800a796:	d1f9      	bne.n	800a78c <_svfiprintf_r+0x54>
 800a798:	ebba 0b04 	subs.w	fp, sl, r4
 800a79c:	d00b      	beq.n	800a7b6 <_svfiprintf_r+0x7e>
 800a79e:	465b      	mov	r3, fp
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	4638      	mov	r0, r7
 800a7a6:	f7ff ff6b 	bl	800a680 <__ssputs_r>
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	f000 80a7 	beq.w	800a8fe <_svfiprintf_r+0x1c6>
 800a7b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7b2:	445a      	add	r2, fp
 800a7b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 809f 	beq.w	800a8fe <_svfiprintf_r+0x1c6>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7ca:	f10a 0a01 	add.w	sl, sl, #1
 800a7ce:	9304      	str	r3, [sp, #16]
 800a7d0:	9307      	str	r3, [sp, #28]
 800a7d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7d8:	4654      	mov	r4, sl
 800a7da:	2205      	movs	r2, #5
 800a7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e0:	484e      	ldr	r0, [pc, #312]	@ (800a91c <_svfiprintf_r+0x1e4>)
 800a7e2:	f7f5 fd05 	bl	80001f0 <memchr>
 800a7e6:	9a04      	ldr	r2, [sp, #16]
 800a7e8:	b9d8      	cbnz	r0, 800a822 <_svfiprintf_r+0xea>
 800a7ea:	06d0      	lsls	r0, r2, #27
 800a7ec:	bf44      	itt	mi
 800a7ee:	2320      	movmi	r3, #32
 800a7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7f4:	0711      	lsls	r1, r2, #28
 800a7f6:	bf44      	itt	mi
 800a7f8:	232b      	movmi	r3, #43	@ 0x2b
 800a7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a802:	2b2a      	cmp	r3, #42	@ 0x2a
 800a804:	d015      	beq.n	800a832 <_svfiprintf_r+0xfa>
 800a806:	9a07      	ldr	r2, [sp, #28]
 800a808:	4654      	mov	r4, sl
 800a80a:	2000      	movs	r0, #0
 800a80c:	f04f 0c0a 	mov.w	ip, #10
 800a810:	4621      	mov	r1, r4
 800a812:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a816:	3b30      	subs	r3, #48	@ 0x30
 800a818:	2b09      	cmp	r3, #9
 800a81a:	d94b      	bls.n	800a8b4 <_svfiprintf_r+0x17c>
 800a81c:	b1b0      	cbz	r0, 800a84c <_svfiprintf_r+0x114>
 800a81e:	9207      	str	r2, [sp, #28]
 800a820:	e014      	b.n	800a84c <_svfiprintf_r+0x114>
 800a822:	eba0 0308 	sub.w	r3, r0, r8
 800a826:	fa09 f303 	lsl.w	r3, r9, r3
 800a82a:	4313      	orrs	r3, r2
 800a82c:	9304      	str	r3, [sp, #16]
 800a82e:	46a2      	mov	sl, r4
 800a830:	e7d2      	b.n	800a7d8 <_svfiprintf_r+0xa0>
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	1d19      	adds	r1, r3, #4
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	9103      	str	r1, [sp, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bfbb      	ittet	lt
 800a83e:	425b      	neglt	r3, r3
 800a840:	f042 0202 	orrlt.w	r2, r2, #2
 800a844:	9307      	strge	r3, [sp, #28]
 800a846:	9307      	strlt	r3, [sp, #28]
 800a848:	bfb8      	it	lt
 800a84a:	9204      	strlt	r2, [sp, #16]
 800a84c:	7823      	ldrb	r3, [r4, #0]
 800a84e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a850:	d10a      	bne.n	800a868 <_svfiprintf_r+0x130>
 800a852:	7863      	ldrb	r3, [r4, #1]
 800a854:	2b2a      	cmp	r3, #42	@ 0x2a
 800a856:	d132      	bne.n	800a8be <_svfiprintf_r+0x186>
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	1d1a      	adds	r2, r3, #4
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	9203      	str	r2, [sp, #12]
 800a860:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a864:	3402      	adds	r4, #2
 800a866:	9305      	str	r3, [sp, #20]
 800a868:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a92c <_svfiprintf_r+0x1f4>
 800a86c:	7821      	ldrb	r1, [r4, #0]
 800a86e:	2203      	movs	r2, #3
 800a870:	4650      	mov	r0, sl
 800a872:	f7f5 fcbd 	bl	80001f0 <memchr>
 800a876:	b138      	cbz	r0, 800a888 <_svfiprintf_r+0x150>
 800a878:	9b04      	ldr	r3, [sp, #16]
 800a87a:	eba0 000a 	sub.w	r0, r0, sl
 800a87e:	2240      	movs	r2, #64	@ 0x40
 800a880:	4082      	lsls	r2, r0
 800a882:	4313      	orrs	r3, r2
 800a884:	3401      	adds	r4, #1
 800a886:	9304      	str	r3, [sp, #16]
 800a888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a88c:	4824      	ldr	r0, [pc, #144]	@ (800a920 <_svfiprintf_r+0x1e8>)
 800a88e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a892:	2206      	movs	r2, #6
 800a894:	f7f5 fcac 	bl	80001f0 <memchr>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d036      	beq.n	800a90a <_svfiprintf_r+0x1d2>
 800a89c:	4b21      	ldr	r3, [pc, #132]	@ (800a924 <_svfiprintf_r+0x1ec>)
 800a89e:	bb1b      	cbnz	r3, 800a8e8 <_svfiprintf_r+0x1b0>
 800a8a0:	9b03      	ldr	r3, [sp, #12]
 800a8a2:	3307      	adds	r3, #7
 800a8a4:	f023 0307 	bic.w	r3, r3, #7
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	9303      	str	r3, [sp, #12]
 800a8ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ae:	4433      	add	r3, r6
 800a8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8b2:	e76a      	b.n	800a78a <_svfiprintf_r+0x52>
 800a8b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	e7a8      	b.n	800a810 <_svfiprintf_r+0xd8>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	3401      	adds	r4, #1
 800a8c2:	9305      	str	r3, [sp, #20]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	f04f 0c0a 	mov.w	ip, #10
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8d0:	3a30      	subs	r2, #48	@ 0x30
 800a8d2:	2a09      	cmp	r2, #9
 800a8d4:	d903      	bls.n	800a8de <_svfiprintf_r+0x1a6>
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d0c6      	beq.n	800a868 <_svfiprintf_r+0x130>
 800a8da:	9105      	str	r1, [sp, #20]
 800a8dc:	e7c4      	b.n	800a868 <_svfiprintf_r+0x130>
 800a8de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e7f0      	b.n	800a8ca <_svfiprintf_r+0x192>
 800a8e8:	ab03      	add	r3, sp, #12
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	462a      	mov	r2, r5
 800a8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a928 <_svfiprintf_r+0x1f0>)
 800a8f0:	a904      	add	r1, sp, #16
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	f3af 8000 	nop.w
 800a8f8:	1c42      	adds	r2, r0, #1
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	d1d6      	bne.n	800a8ac <_svfiprintf_r+0x174>
 800a8fe:	89ab      	ldrh	r3, [r5, #12]
 800a900:	065b      	lsls	r3, r3, #25
 800a902:	f53f af2d 	bmi.w	800a760 <_svfiprintf_r+0x28>
 800a906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a908:	e72c      	b.n	800a764 <_svfiprintf_r+0x2c>
 800a90a:	ab03      	add	r3, sp, #12
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	462a      	mov	r2, r5
 800a910:	4b05      	ldr	r3, [pc, #20]	@ (800a928 <_svfiprintf_r+0x1f0>)
 800a912:	a904      	add	r1, sp, #16
 800a914:	4638      	mov	r0, r7
 800a916:	f000 f879 	bl	800aa0c <_printf_i>
 800a91a:	e7ed      	b.n	800a8f8 <_svfiprintf_r+0x1c0>
 800a91c:	0800aec1 	.word	0x0800aec1
 800a920:	0800aecb 	.word	0x0800aecb
 800a924:	00000000 	.word	0x00000000
 800a928:	0800a681 	.word	0x0800a681
 800a92c:	0800aec7 	.word	0x0800aec7

0800a930 <_printf_common>:
 800a930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a934:	4616      	mov	r6, r2
 800a936:	4698      	mov	r8, r3
 800a938:	688a      	ldr	r2, [r1, #8]
 800a93a:	690b      	ldr	r3, [r1, #16]
 800a93c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a940:	4293      	cmp	r3, r2
 800a942:	bfb8      	it	lt
 800a944:	4613      	movlt	r3, r2
 800a946:	6033      	str	r3, [r6, #0]
 800a948:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a94c:	4607      	mov	r7, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	b10a      	cbz	r2, 800a956 <_printf_common+0x26>
 800a952:	3301      	adds	r3, #1
 800a954:	6033      	str	r3, [r6, #0]
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	0699      	lsls	r1, r3, #26
 800a95a:	bf42      	ittt	mi
 800a95c:	6833      	ldrmi	r3, [r6, #0]
 800a95e:	3302      	addmi	r3, #2
 800a960:	6033      	strmi	r3, [r6, #0]
 800a962:	6825      	ldr	r5, [r4, #0]
 800a964:	f015 0506 	ands.w	r5, r5, #6
 800a968:	d106      	bne.n	800a978 <_printf_common+0x48>
 800a96a:	f104 0a19 	add.w	sl, r4, #25
 800a96e:	68e3      	ldr	r3, [r4, #12]
 800a970:	6832      	ldr	r2, [r6, #0]
 800a972:	1a9b      	subs	r3, r3, r2
 800a974:	42ab      	cmp	r3, r5
 800a976:	dc26      	bgt.n	800a9c6 <_printf_common+0x96>
 800a978:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a97c:	6822      	ldr	r2, [r4, #0]
 800a97e:	3b00      	subs	r3, #0
 800a980:	bf18      	it	ne
 800a982:	2301      	movne	r3, #1
 800a984:	0692      	lsls	r2, r2, #26
 800a986:	d42b      	bmi.n	800a9e0 <_printf_common+0xb0>
 800a988:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a98c:	4641      	mov	r1, r8
 800a98e:	4638      	mov	r0, r7
 800a990:	47c8      	blx	r9
 800a992:	3001      	adds	r0, #1
 800a994:	d01e      	beq.n	800a9d4 <_printf_common+0xa4>
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	6922      	ldr	r2, [r4, #16]
 800a99a:	f003 0306 	and.w	r3, r3, #6
 800a99e:	2b04      	cmp	r3, #4
 800a9a0:	bf02      	ittt	eq
 800a9a2:	68e5      	ldreq	r5, [r4, #12]
 800a9a4:	6833      	ldreq	r3, [r6, #0]
 800a9a6:	1aed      	subeq	r5, r5, r3
 800a9a8:	68a3      	ldr	r3, [r4, #8]
 800a9aa:	bf0c      	ite	eq
 800a9ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9b0:	2500      	movne	r5, #0
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	bfc4      	itt	gt
 800a9b6:	1a9b      	subgt	r3, r3, r2
 800a9b8:	18ed      	addgt	r5, r5, r3
 800a9ba:	2600      	movs	r6, #0
 800a9bc:	341a      	adds	r4, #26
 800a9be:	42b5      	cmp	r5, r6
 800a9c0:	d11a      	bne.n	800a9f8 <_printf_common+0xc8>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	e008      	b.n	800a9d8 <_printf_common+0xa8>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	4652      	mov	r2, sl
 800a9ca:	4641      	mov	r1, r8
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	47c8      	blx	r9
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	d103      	bne.n	800a9dc <_printf_common+0xac>
 800a9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9dc:	3501      	adds	r5, #1
 800a9de:	e7c6      	b.n	800a96e <_printf_common+0x3e>
 800a9e0:	18e1      	adds	r1, r4, r3
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	2030      	movs	r0, #48	@ 0x30
 800a9e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9ea:	4422      	add	r2, r4
 800a9ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9f4:	3302      	adds	r3, #2
 800a9f6:	e7c7      	b.n	800a988 <_printf_common+0x58>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	4641      	mov	r1, r8
 800a9fe:	4638      	mov	r0, r7
 800aa00:	47c8      	blx	r9
 800aa02:	3001      	adds	r0, #1
 800aa04:	d0e6      	beq.n	800a9d4 <_printf_common+0xa4>
 800aa06:	3601      	adds	r6, #1
 800aa08:	e7d9      	b.n	800a9be <_printf_common+0x8e>
	...

0800aa0c <_printf_i>:
 800aa0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa10:	7e0f      	ldrb	r7, [r1, #24]
 800aa12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa14:	2f78      	cmp	r7, #120	@ 0x78
 800aa16:	4691      	mov	r9, r2
 800aa18:	4680      	mov	r8, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	469a      	mov	sl, r3
 800aa1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa22:	d807      	bhi.n	800aa34 <_printf_i+0x28>
 800aa24:	2f62      	cmp	r7, #98	@ 0x62
 800aa26:	d80a      	bhi.n	800aa3e <_printf_i+0x32>
 800aa28:	2f00      	cmp	r7, #0
 800aa2a:	f000 80d2 	beq.w	800abd2 <_printf_i+0x1c6>
 800aa2e:	2f58      	cmp	r7, #88	@ 0x58
 800aa30:	f000 80b9 	beq.w	800aba6 <_printf_i+0x19a>
 800aa34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa3c:	e03a      	b.n	800aab4 <_printf_i+0xa8>
 800aa3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa42:	2b15      	cmp	r3, #21
 800aa44:	d8f6      	bhi.n	800aa34 <_printf_i+0x28>
 800aa46:	a101      	add	r1, pc, #4	@ (adr r1, 800aa4c <_printf_i+0x40>)
 800aa48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa4c:	0800aaa5 	.word	0x0800aaa5
 800aa50:	0800aab9 	.word	0x0800aab9
 800aa54:	0800aa35 	.word	0x0800aa35
 800aa58:	0800aa35 	.word	0x0800aa35
 800aa5c:	0800aa35 	.word	0x0800aa35
 800aa60:	0800aa35 	.word	0x0800aa35
 800aa64:	0800aab9 	.word	0x0800aab9
 800aa68:	0800aa35 	.word	0x0800aa35
 800aa6c:	0800aa35 	.word	0x0800aa35
 800aa70:	0800aa35 	.word	0x0800aa35
 800aa74:	0800aa35 	.word	0x0800aa35
 800aa78:	0800abb9 	.word	0x0800abb9
 800aa7c:	0800aae3 	.word	0x0800aae3
 800aa80:	0800ab73 	.word	0x0800ab73
 800aa84:	0800aa35 	.word	0x0800aa35
 800aa88:	0800aa35 	.word	0x0800aa35
 800aa8c:	0800abdb 	.word	0x0800abdb
 800aa90:	0800aa35 	.word	0x0800aa35
 800aa94:	0800aae3 	.word	0x0800aae3
 800aa98:	0800aa35 	.word	0x0800aa35
 800aa9c:	0800aa35 	.word	0x0800aa35
 800aaa0:	0800ab7b 	.word	0x0800ab7b
 800aaa4:	6833      	ldr	r3, [r6, #0]
 800aaa6:	1d1a      	adds	r2, r3, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	6032      	str	r2, [r6, #0]
 800aaac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aab0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aab4:	2301      	movs	r3, #1
 800aab6:	e09d      	b.n	800abf4 <_printf_i+0x1e8>
 800aab8:	6833      	ldr	r3, [r6, #0]
 800aaba:	6820      	ldr	r0, [r4, #0]
 800aabc:	1d19      	adds	r1, r3, #4
 800aabe:	6031      	str	r1, [r6, #0]
 800aac0:	0606      	lsls	r6, r0, #24
 800aac2:	d501      	bpl.n	800aac8 <_printf_i+0xbc>
 800aac4:	681d      	ldr	r5, [r3, #0]
 800aac6:	e003      	b.n	800aad0 <_printf_i+0xc4>
 800aac8:	0645      	lsls	r5, r0, #25
 800aaca:	d5fb      	bpl.n	800aac4 <_printf_i+0xb8>
 800aacc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	da03      	bge.n	800aadc <_printf_i+0xd0>
 800aad4:	232d      	movs	r3, #45	@ 0x2d
 800aad6:	426d      	negs	r5, r5
 800aad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aadc:	4859      	ldr	r0, [pc, #356]	@ (800ac44 <_printf_i+0x238>)
 800aade:	230a      	movs	r3, #10
 800aae0:	e011      	b.n	800ab06 <_printf_i+0xfa>
 800aae2:	6821      	ldr	r1, [r4, #0]
 800aae4:	6833      	ldr	r3, [r6, #0]
 800aae6:	0608      	lsls	r0, r1, #24
 800aae8:	f853 5b04 	ldr.w	r5, [r3], #4
 800aaec:	d402      	bmi.n	800aaf4 <_printf_i+0xe8>
 800aaee:	0649      	lsls	r1, r1, #25
 800aaf0:	bf48      	it	mi
 800aaf2:	b2ad      	uxthmi	r5, r5
 800aaf4:	2f6f      	cmp	r7, #111	@ 0x6f
 800aaf6:	4853      	ldr	r0, [pc, #332]	@ (800ac44 <_printf_i+0x238>)
 800aaf8:	6033      	str	r3, [r6, #0]
 800aafa:	bf14      	ite	ne
 800aafc:	230a      	movne	r3, #10
 800aafe:	2308      	moveq	r3, #8
 800ab00:	2100      	movs	r1, #0
 800ab02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab06:	6866      	ldr	r6, [r4, #4]
 800ab08:	60a6      	str	r6, [r4, #8]
 800ab0a:	2e00      	cmp	r6, #0
 800ab0c:	bfa2      	ittt	ge
 800ab0e:	6821      	ldrge	r1, [r4, #0]
 800ab10:	f021 0104 	bicge.w	r1, r1, #4
 800ab14:	6021      	strge	r1, [r4, #0]
 800ab16:	b90d      	cbnz	r5, 800ab1c <_printf_i+0x110>
 800ab18:	2e00      	cmp	r6, #0
 800ab1a:	d04b      	beq.n	800abb4 <_printf_i+0x1a8>
 800ab1c:	4616      	mov	r6, r2
 800ab1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab22:	fb03 5711 	mls	r7, r3, r1, r5
 800ab26:	5dc7      	ldrb	r7, [r0, r7]
 800ab28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab2c:	462f      	mov	r7, r5
 800ab2e:	42bb      	cmp	r3, r7
 800ab30:	460d      	mov	r5, r1
 800ab32:	d9f4      	bls.n	800ab1e <_printf_i+0x112>
 800ab34:	2b08      	cmp	r3, #8
 800ab36:	d10b      	bne.n	800ab50 <_printf_i+0x144>
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	07df      	lsls	r7, r3, #31
 800ab3c:	d508      	bpl.n	800ab50 <_printf_i+0x144>
 800ab3e:	6923      	ldr	r3, [r4, #16]
 800ab40:	6861      	ldr	r1, [r4, #4]
 800ab42:	4299      	cmp	r1, r3
 800ab44:	bfde      	ittt	le
 800ab46:	2330      	movle	r3, #48	@ 0x30
 800ab48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab50:	1b92      	subs	r2, r2, r6
 800ab52:	6122      	str	r2, [r4, #16]
 800ab54:	f8cd a000 	str.w	sl, [sp]
 800ab58:	464b      	mov	r3, r9
 800ab5a:	aa03      	add	r2, sp, #12
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4640      	mov	r0, r8
 800ab60:	f7ff fee6 	bl	800a930 <_printf_common>
 800ab64:	3001      	adds	r0, #1
 800ab66:	d14a      	bne.n	800abfe <_printf_i+0x1f2>
 800ab68:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6c:	b004      	add	sp, #16
 800ab6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	f043 0320 	orr.w	r3, r3, #32
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	4833      	ldr	r0, [pc, #204]	@ (800ac48 <_printf_i+0x23c>)
 800ab7c:	2778      	movs	r7, #120	@ 0x78
 800ab7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	6831      	ldr	r1, [r6, #0]
 800ab86:	061f      	lsls	r7, r3, #24
 800ab88:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab8c:	d402      	bmi.n	800ab94 <_printf_i+0x188>
 800ab8e:	065f      	lsls	r7, r3, #25
 800ab90:	bf48      	it	mi
 800ab92:	b2ad      	uxthmi	r5, r5
 800ab94:	6031      	str	r1, [r6, #0]
 800ab96:	07d9      	lsls	r1, r3, #31
 800ab98:	bf44      	itt	mi
 800ab9a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab9e:	6023      	strmi	r3, [r4, #0]
 800aba0:	b11d      	cbz	r5, 800abaa <_printf_i+0x19e>
 800aba2:	2310      	movs	r3, #16
 800aba4:	e7ac      	b.n	800ab00 <_printf_i+0xf4>
 800aba6:	4827      	ldr	r0, [pc, #156]	@ (800ac44 <_printf_i+0x238>)
 800aba8:	e7e9      	b.n	800ab7e <_printf_i+0x172>
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	f023 0320 	bic.w	r3, r3, #32
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	e7f6      	b.n	800aba2 <_printf_i+0x196>
 800abb4:	4616      	mov	r6, r2
 800abb6:	e7bd      	b.n	800ab34 <_printf_i+0x128>
 800abb8:	6833      	ldr	r3, [r6, #0]
 800abba:	6825      	ldr	r5, [r4, #0]
 800abbc:	6961      	ldr	r1, [r4, #20]
 800abbe:	1d18      	adds	r0, r3, #4
 800abc0:	6030      	str	r0, [r6, #0]
 800abc2:	062e      	lsls	r6, r5, #24
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	d501      	bpl.n	800abcc <_printf_i+0x1c0>
 800abc8:	6019      	str	r1, [r3, #0]
 800abca:	e002      	b.n	800abd2 <_printf_i+0x1c6>
 800abcc:	0668      	lsls	r0, r5, #25
 800abce:	d5fb      	bpl.n	800abc8 <_printf_i+0x1bc>
 800abd0:	8019      	strh	r1, [r3, #0]
 800abd2:	2300      	movs	r3, #0
 800abd4:	6123      	str	r3, [r4, #16]
 800abd6:	4616      	mov	r6, r2
 800abd8:	e7bc      	b.n	800ab54 <_printf_i+0x148>
 800abda:	6833      	ldr	r3, [r6, #0]
 800abdc:	1d1a      	adds	r2, r3, #4
 800abde:	6032      	str	r2, [r6, #0]
 800abe0:	681e      	ldr	r6, [r3, #0]
 800abe2:	6862      	ldr	r2, [r4, #4]
 800abe4:	2100      	movs	r1, #0
 800abe6:	4630      	mov	r0, r6
 800abe8:	f7f5 fb02 	bl	80001f0 <memchr>
 800abec:	b108      	cbz	r0, 800abf2 <_printf_i+0x1e6>
 800abee:	1b80      	subs	r0, r0, r6
 800abf0:	6060      	str	r0, [r4, #4]
 800abf2:	6863      	ldr	r3, [r4, #4]
 800abf4:	6123      	str	r3, [r4, #16]
 800abf6:	2300      	movs	r3, #0
 800abf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abfc:	e7aa      	b.n	800ab54 <_printf_i+0x148>
 800abfe:	6923      	ldr	r3, [r4, #16]
 800ac00:	4632      	mov	r2, r6
 800ac02:	4649      	mov	r1, r9
 800ac04:	4640      	mov	r0, r8
 800ac06:	47d0      	blx	sl
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d0ad      	beq.n	800ab68 <_printf_i+0x15c>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	079b      	lsls	r3, r3, #30
 800ac10:	d413      	bmi.n	800ac3a <_printf_i+0x22e>
 800ac12:	68e0      	ldr	r0, [r4, #12]
 800ac14:	9b03      	ldr	r3, [sp, #12]
 800ac16:	4298      	cmp	r0, r3
 800ac18:	bfb8      	it	lt
 800ac1a:	4618      	movlt	r0, r3
 800ac1c:	e7a6      	b.n	800ab6c <_printf_i+0x160>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	4632      	mov	r2, r6
 800ac22:	4649      	mov	r1, r9
 800ac24:	4640      	mov	r0, r8
 800ac26:	47d0      	blx	sl
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d09d      	beq.n	800ab68 <_printf_i+0x15c>
 800ac2c:	3501      	adds	r5, #1
 800ac2e:	68e3      	ldr	r3, [r4, #12]
 800ac30:	9903      	ldr	r1, [sp, #12]
 800ac32:	1a5b      	subs	r3, r3, r1
 800ac34:	42ab      	cmp	r3, r5
 800ac36:	dcf2      	bgt.n	800ac1e <_printf_i+0x212>
 800ac38:	e7eb      	b.n	800ac12 <_printf_i+0x206>
 800ac3a:	2500      	movs	r5, #0
 800ac3c:	f104 0619 	add.w	r6, r4, #25
 800ac40:	e7f5      	b.n	800ac2e <_printf_i+0x222>
 800ac42:	bf00      	nop
 800ac44:	0800aed2 	.word	0x0800aed2
 800ac48:	0800aee3 	.word	0x0800aee3

0800ac4c <memmove>:
 800ac4c:	4288      	cmp	r0, r1
 800ac4e:	b510      	push	{r4, lr}
 800ac50:	eb01 0402 	add.w	r4, r1, r2
 800ac54:	d902      	bls.n	800ac5c <memmove+0x10>
 800ac56:	4284      	cmp	r4, r0
 800ac58:	4623      	mov	r3, r4
 800ac5a:	d807      	bhi.n	800ac6c <memmove+0x20>
 800ac5c:	1e43      	subs	r3, r0, #1
 800ac5e:	42a1      	cmp	r1, r4
 800ac60:	d008      	beq.n	800ac74 <memmove+0x28>
 800ac62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac6a:	e7f8      	b.n	800ac5e <memmove+0x12>
 800ac6c:	4402      	add	r2, r0
 800ac6e:	4601      	mov	r1, r0
 800ac70:	428a      	cmp	r2, r1
 800ac72:	d100      	bne.n	800ac76 <memmove+0x2a>
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac7e:	e7f7      	b.n	800ac70 <memmove+0x24>

0800ac80 <_sbrk_r>:
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	4d06      	ldr	r5, [pc, #24]	@ (800ac9c <_sbrk_r+0x1c>)
 800ac84:	2300      	movs	r3, #0
 800ac86:	4604      	mov	r4, r0
 800ac88:	4608      	mov	r0, r1
 800ac8a:	602b      	str	r3, [r5, #0]
 800ac8c:	f7f5 fff8 	bl	8000c80 <_sbrk>
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	d102      	bne.n	800ac9a <_sbrk_r+0x1a>
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	b103      	cbz	r3, 800ac9a <_sbrk_r+0x1a>
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	20003754 	.word	0x20003754

0800aca0 <memcpy>:
 800aca0:	440a      	add	r2, r1
 800aca2:	4291      	cmp	r1, r2
 800aca4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aca8:	d100      	bne.n	800acac <memcpy+0xc>
 800acaa:	4770      	bx	lr
 800acac:	b510      	push	{r4, lr}
 800acae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acb6:	4291      	cmp	r1, r2
 800acb8:	d1f9      	bne.n	800acae <memcpy+0xe>
 800acba:	bd10      	pop	{r4, pc}

0800acbc <_realloc_r>:
 800acbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc0:	4680      	mov	r8, r0
 800acc2:	4615      	mov	r5, r2
 800acc4:	460c      	mov	r4, r1
 800acc6:	b921      	cbnz	r1, 800acd2 <_realloc_r+0x16>
 800acc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800accc:	4611      	mov	r1, r2
 800acce:	f7ff bc4b 	b.w	800a568 <_malloc_r>
 800acd2:	b92a      	cbnz	r2, 800ace0 <_realloc_r+0x24>
 800acd4:	f7ff fbdc 	bl	800a490 <_free_r>
 800acd8:	2400      	movs	r4, #0
 800acda:	4620      	mov	r0, r4
 800acdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace0:	f000 f81a 	bl	800ad18 <_malloc_usable_size_r>
 800ace4:	4285      	cmp	r5, r0
 800ace6:	4606      	mov	r6, r0
 800ace8:	d802      	bhi.n	800acf0 <_realloc_r+0x34>
 800acea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800acee:	d8f4      	bhi.n	800acda <_realloc_r+0x1e>
 800acf0:	4629      	mov	r1, r5
 800acf2:	4640      	mov	r0, r8
 800acf4:	f7ff fc38 	bl	800a568 <_malloc_r>
 800acf8:	4607      	mov	r7, r0
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d0ec      	beq.n	800acd8 <_realloc_r+0x1c>
 800acfe:	42b5      	cmp	r5, r6
 800ad00:	462a      	mov	r2, r5
 800ad02:	4621      	mov	r1, r4
 800ad04:	bf28      	it	cs
 800ad06:	4632      	movcs	r2, r6
 800ad08:	f7ff ffca 	bl	800aca0 <memcpy>
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	4640      	mov	r0, r8
 800ad10:	f7ff fbbe 	bl	800a490 <_free_r>
 800ad14:	463c      	mov	r4, r7
 800ad16:	e7e0      	b.n	800acda <_realloc_r+0x1e>

0800ad18 <_malloc_usable_size_r>:
 800ad18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad1c:	1f18      	subs	r0, r3, #4
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	bfbc      	itt	lt
 800ad22:	580b      	ldrlt	r3, [r1, r0]
 800ad24:	18c0      	addlt	r0, r0, r3
 800ad26:	4770      	bx	lr

0800ad28 <_init>:
 800ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2a:	bf00      	nop
 800ad2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad2e:	bc08      	pop	{r3}
 800ad30:	469e      	mov	lr, r3
 800ad32:	4770      	bx	lr

0800ad34 <_fini>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	bf00      	nop
 800ad38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad3a:	bc08      	pop	{r3}
 800ad3c:	469e      	mov	lr, r3
 800ad3e:	4770      	bx	lr
